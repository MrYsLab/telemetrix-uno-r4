{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Telemetrix User's Guide For The Arduino UNO R4 Minima and WIFI   <p>Telemetry is a system for collecting data on a remote device and then  automatically transmitting the collected data back to local receiving equipment for  processing. </p> <p>With Telemetrix, you can do things such as establish a GPIO pin as a PWM output pin and  set its value to run a DC motor, communicate with your favorite i2c device,  have the WIFI's LEDs scroll a message, or monitor temperature using a DHT temperature  device, and much more,  all within a Python application.</p>"},{"location":"#telemetrix-client-server-model","title":"Telemetrix Client-Server Model","text":"<p>Telemetrix is implemented using a client-server model. A \"fixed\" server is uploaded to the Arduino.</p> <p>The server communicates with a Telemetrix Python client that sends commands to  the Arduino and receives data reports.</p> <p>Application debugging is simplified by using your favorite Python toolset.</p>"},{"location":"#telemetrix-client-server-transports","title":"Telemetrix Client-Server Transports","text":"<p>The Arduino UNO R4 Minima uses a USBSerial transport.</p> <p>For the Arduino UNO R4 WIFI, you can choose a WIFI, USBSerial or BLE transport.  There are servers for each of the transport types.</p>"},{"location":"#both-threaded-and-asyncio-client-apis-are-available-for-each-board","title":"Both Threaded And ASYNCIO Client APIs Are Available For Each Board","text":"<p>Choose whichever one suits your needs.</p> <p>The transport type is specified for the UNO R4 WIFI when Telemetrix is instantiated.</p>"},{"location":"#data-is-reported-using-callback-methods","title":"Data Is Reported Using Callback Methods","text":"<p>When you set a pin mode as an input type, a user-provided callback method is  registered to provide data change notifications. Callbacks ensure that data changes are processed as soon as possible and that no data change events are lost.  Each data change is time-stamped as it is received.</p> <p>You may implement the callback scheme as a single callback to  handle all data change events or multiple individual callbacks to handle  specific pins or input device types, giving you maximum flexibility.</p>"},{"location":"#automatic-data-reporting","title":"Automatic Data Reporting","text":"<p>Data is reported automatically without polling for analog inputs,  digital inputs, DHT temperature sensors, and HC-SR04 distance sensors.  Once a pin mode is set, reporting begins immediately.</p> <p></p>"},{"location":"#summary-of-major-features","title":"Summary Of Major Features","text":"<ul> <li>Applications are programmed using Python 3.8 or greater.</li> <li>All Data change events are reported asynchronously via user-registered callback    functions. </li> <li>Each data change event is time-stamped.</li> <li>Online API Reference Documentation is provided:<ul> <li>For the Arduino UNO R4 Minima Threaded Client</li> <li>For the Arduino UNO R4 Minima Asyncio Client.</li> <li>For the Arduino UNO R4 Wifi Threaded Client</li> <li>For the Arduino UNO R4 Wifi Asyncio Client.</li> </ul> </li> <li>A complete set of working Minima examples is provided for the Arduino UNO R4 Minima and the Arduino UNO R4 WIFI</li> <li>Integrated debugging methods are included as part of the Servers.</li> <li>For Arduino UNO R4 WIFI, scrolling transport identifier messages are shown on the    display. This feature may be optionally disabled.</li> </ul>"},{"location":"#a-working-example","title":"A Working Example","text":"<p>Below is a Telemetrix example for the Arduino UNO R4 Mimima that monitors several  digital input pins. All the pins share a single callback.</p> <pre><code>import sys\nimport time\n\nfrom telemetrix_uno_r4.minima.telemetrix_uno_r4_minima import telemetrix_uno_r4_minima\n\n\"\"\"\nMonitor 4 digital input pins.\n\"\"\"\n\n\n# Callback data indices\n# When the callback function is called, the client fills in \n# the data parameter. Data is a list of values, and the following are \n# indexes into the list to retrieve report information\n\nCB_PIN_MODE = 0 # The mode of the reporting pin (input, output, PWM, etc.)\nCB_PIN = 1      # The GPIO pin number associated with this report\nCB_VALUE = 2    # The data value reported\nCB_TIME = 3     # A time stamp when the data change occurred\n\n\ndef the_callback(data):\n    \"\"\"\n    A callback function to report data changes.\n    This will print the pin number, its reported value and\n    the date and time when the change occurred\n    :param data: [report type(i.e. analog, pwm, digital), pin number, current reported \n                 value, timestamp]\n    \"\"\"\n    date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME]))\n    print(f'Report Type: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} '\n          f'Value: {data[CB_VALUE]} Time Stamp: {date}')\n\n# instantiate TelemetrixUnoR4Minima\nboard = telemetrix_uno_r4_minima.TelemetrixUnoR4Minima()\n\n# Set the pin mode for each pin.\n# A callback must be specified. A single callback is used for this example, but\n# separate callback could be used for each pin.\nboard.set_pin_mode_digital_input(5, the_callback)\nboard.set_pin_mode_digital_input(6, the_callback)\nboard.set_pin_mode_digital_input(7, the_callback)\nboard.set_pin_mode_digital_inputp(8, the_callback)\n\ntry:\n    while True:\n        time.sleep(.0001)\nexcept KeyboardInterrupt:\n    board.shutdown()\n    sys.exit(0)\n</code></pre> <p>And here is some sample output:</p> <pre><code>telemetrix_uno_r4_minima:  Version 1.00\n\nCopyright (c) 2023 Alan Yorinks All Rights Reserved.\n\nOpening all potential serial ports...\n    /dev/ttyACM0\n\nWaiting 1 seconds(arduino_wait) for Arduino devices to reset...\nValid Arduino ID Found.\nArduino compatible device found and connected to /dev/ttyACM0\nReset Complete\n\nRetrieving Telemetrix4UnoR4Minima firmware ID...\nTelemetrix4UnoR4Minima firmware version: 1.0.0\nEnter Control-C to quit.\n\nReport Type: 2 Pin: 5 Value: 1 Time Stamp: 2023-07-14 13:34:52\nReport Type: 2 Pin: 6 Value: 1 Time Stamp: 2023-07-14 13:34:52\nReport Type: 2 Pin: 7 Value: 1 Time Stamp: 2023-07-14 13:34:52\nReport Type: 2 Pin: 8 Value: 1 Time Stamp: 2023-07-14 13:34:52\nReport Type: 2 Pin: 8 Value: 0 Time Stamp: 2023-07-14 13:35:21\nReport Type: 2 Pin: 8 Value: 1 Time Stamp: 2023-07-14 13:35:22\nReport Type: 2 Pin: 5 Value: 0 Time Stamp: 2023-07-14 13:35:29\nReport Type: 2 Pin: 5 Value: 1 Time Stamp: 2023-07-14 13:35:31\nReport Type: 2 Pin: 6 Value: 0 Time Stamp: 2023-07-14 13:35:33\nReport Type: 2 Pin: 8 Value: 1 Time Stamp: 2023-07-14 13:35:34\n\n\n</code></pre> <p></p>"},{"location":"about/","title":"REPORTING ISSUES","text":"<p>If you wish to report an issue with this library, please use this link.</p> <p>For any of the servers, please use this link.</p> <p>When filing an issue, please provide:</p> <ol> <li>Any console output.</li> <li>A description of the issue.</li> <li>Sample code demonstrating the problem.</li> </ol> <p>For bugs, comments, or questions, please use the links above.</p> <p></p>"},{"location":"about_the_apis/","title":"General Principles","text":""},{"location":"about_the_apis/#setting-pin-modes","title":"Setting Pin Modes","text":"<p>Pin modes must be set before interacting with a pin. All the methods listed below have a consistent API across all API classes.</p>"},{"location":"about_the_apis/#input-pin-modes","title":"Input Pin Modes","text":""},{"location":"about_the_apis/#requiring-a-callback-to-be-specified","title":"Requiring A Callback To Be Specified","text":"<ul> <li>set_pin_mode_analog_input</li> <li>set_pin_mode_dht</li> <li>set_pin_mode_digital_input</li> <li>set_pin_mode_digital_input_pullup</li> <li>set_pin_mode_sonar</li> </ul>"},{"location":"about_the_apis/#callback-specified-in-read-commands","title":"Callback Specified In Read Commands","text":"<ul> <li>set_pin_mode_i2c</li> <li>set_pin_mode_spi</li> </ul>"},{"location":"about_the_apis/#output-pin-modes","title":"Output Pin Modes","text":"<ul> <li>set_pin_mode_analog_output</li> <li>set_pin_mode_digital_output</li> <li>set_pin_mode_servo</li> </ul>"},{"location":"app_creation/","title":"Application Creation","text":""},{"location":"app_creation/#a-word-about-the-application-templates","title":"A Word About The Application Templates","text":"<p>The following section contains a set of application templates for each of the four  servers. The templates are based on the included examples.</p> <ul> <li>r4_minima_examples - asyncio</li> <li>r4_minima_examples - threaded</li> <li>r4_wifi_examples_asyncio - BLE</li> <li>r4_wifi_examples_asyncio - WIFI</li> <li>r4_wifi_examples_asyncio - usbSerial</li> <li>r4_wifi_examples_threaded - WIFI</li> <li>r4_wifi_examples_threaded - usbSerial</li> </ul> <p>As you will see, your application needs to import the correct API  and instantiate the API class.  You then use the API method calls in writing your application.</p> <p></p>"},{"location":"arduino_ide/","title":"Install The Arduino IDE","text":""},{"location":"arduino_ide/#download-and-install-the-arduino-ide","title":"Download And Install The Arduino IDE","text":"<p>Arduino IDE version 2.1.X is used to upload a server to the Minima or WIFI. It is also  used to modify server source code when configuration is necessary.</p> <p>To install a copy of the IDE, go to the Arduino Software Download page, and  select the version for your  operating system. Follow the installation instructions.</p> <p></p>"},{"location":"arduino_ide/#a-note-for-linux-users","title":"A Note For Linux Users","text":"<p>You may need to add your login to the dialout group to upload to the Arduino.</p> <p>To do so, follow these instructions.</p> <p></p>"},{"location":"callbacks/","title":"Callbacks","text":""},{"location":"callbacks/#registering-a-callback","title":"Registering A Callback","text":"<p>A callback function must be registered when you set a pin to an input mode.</p> <p>The code below illustrates a typical callback function. </p> <pre><code>def the_callback(data):\n    \"\"\"\n    A callback function to report data changes.\n    This will print the pin number, its reported value and\n    the date and time when the change occurred\n\n    :param data: [pin mode, pin, current reported value,timestamp]\n    \"\"\"\n    date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME]))\n    print(f'Report Type: {data[CB_PIN_MODE]} Pin: {data[CB_PIN]} '\n          f'Value: {data[CB_VALUE]} Time Stamp: {date}')\n</code></pre> <p>And here, the callback is registered when the set_pin_mode is called:</p> <pre><code>board.set_pin_mode_digital_input_pullup(12, the_callback)\n</code></pre> <p>If you forget to register a callback,  a RunTime exception will be thrown.</p> <pre><code>Traceback (most recent call last):\n  File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/ play/no_callback_registered.py\", line 5, in &lt;module&gt;\n    board.set_pin_mode_digital_input(5)\n  File \"/home/afy/PycharmProjects/telemetrix-rpi-pico-w/telemetrix_rpi_pico_w/telemetrix_rpi_pico_w.py\", line 752, in set_pin_mode_digital_input\n    raise RuntimeError('A callback must be specified')\nRuntimeError: A callback must be specified\n</code></pre>"},{"location":"callbacks/#callback-function-parameter","title":"Callback Function Parameter","text":"<p>A callback function or method must accept a single parameter. The client  automatically fills in this parameter as a list  when receiving an input data change notification. For \"the_callback\" above, this parameter is named data.</p> <p>The list contents vary from input pin type to input pin type and  are described in detail for each set_pin_mode_XXX method in the API documentation.  The first element in the list identifies the pin type, and the last element is a timestamp of the data change occurrence. Other elements identify the GPIO pin,  the current data value, and additional relevant information.</p> <p>For example, the list may contain</p> <pre><code>[DIGITAL_REPORT, pin_number, pin_value, raw_time_stamp]\n\nDIGITAL_REPORT = 2\n</code></pre> <p>NOTE:</p> <p>**Telemetrix does not support polling or direct read methods for  inputs. Instead, the pin's associated callback is called as soon  as a data change is detected, allowing immediate response to data  changes and, generally, a more straightforward application design. **</p>"},{"location":"callbacks/#pin-types","title":"Pin Types","text":"Pin Mode Pin Mode Value Digital Input (including pullup and pulldown) 2 Analog Input (ADC) 3 I2C 10 SONAR Distance 11 DHT 12"},{"location":"callbacks/#converting-the-raw-timestamp","title":"Converting The Raw Timestamp","text":"<p>To convert the raw timestamp field to a human-readable time, use time.localtime().</p> <pre><code>date = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME]))\n</code></pre> <p></p>"},{"location":"examples/","title":"Downloading And Running The Examples","text":"<p>Once the client and server software have been installed,  it would be an excellent time to try the examples.</p> <p>Examples are provided for all four of the servers.</p>"},{"location":"examples/#example-naming-conventions","title":"Example Naming Conventions","text":"<p>The naming convention used for the examples prefixes each example with three letters. The first letter is for the board type:</p> <ul> <li>m = Minima</li> <li>w = Wifi</li> </ul> <p>The second letter is for the transport type:</p> <ul> <li>b = BLE</li> <li>s = serial</li> <li>w = WIFI</li> </ul> <p>The third is for the concurrency type:</p> <ul> <li>a = asyncio</li> <li>t = threaded</li> </ul>"},{"location":"examples/#links-to-the-examples","title":"Links To The Examples","text":"<ul> <li>r4_minima_examples - asyncio</li> <li>r4_minima_examples - threaded</li> <li>r4_wifi_examples_asyncio - BLE</li> <li>r4_wifi_examples_asyncio - WIFI</li> <li>r4_wifi_examples_asyncio - usbSerial</li> <li>r4_wifi_examples_threaded - WIFI</li> <li>r4_wifi_examples_threaded - usbSerial</li> </ul>"},{"location":"install_telemetrix/","title":"Installing The Client APIs","text":""},{"location":"install_telemetrix/#installing-for-the-first-time","title":"Installing For The First Time","text":"<p>To install from PyPI, within your virtual environment type:</p> <pre><code>pip install telemetrix-uno-r4\n</code></pre>"},{"location":"install_telemetrix/#upgrading-to-a-newer-version","title":"Upgrading To A Newer Version","text":"<p>To upgrade to a newer version from an existing installation, use the following command:</p> <pre><code>pip install telemetrix-uno-r4 --upgrade\n\n</code></pre>"},{"location":"install_telemetrix/#what-is-installed","title":"What Is Installed?","text":"<p>The telemetrix-uno-r4 package contains four client APIs. You have the choice of using  an API employing a threaded concurrency model or an API using an asyncio concurrency  model.  The asyncio API  names end  with _aio. </p> <p>NOTE: BLE is only supported by telemetrix_uno_r4_wifi_aio.</p>"},{"location":"install_telemetrix/#arduino-uno-r4-mimima-clients","title":"Arduino UNO R4 Mimima Clients","text":"<ul> <li> <p>telemetrix_uno_r4_minima</p> </li> <li> <p>telemetrix_uno_r4_minima_aio </p> </li> </ul>"},{"location":"install_telemetrix/#arduino-uno-r4-wifi-clients","title":"Arduino UNO R4 WIFI Clients","text":"<ul> <li> <p>telemetrix_uno_r4_wifi</p> </li> <li> <p>telemetrix_uno_r4_wifi_aio </p> </li> </ul> <p></p>"},{"location":"issues/","title":"Known Issues","text":""},{"location":"issues/#arduino-compiler-warnings","title":"Arduino Compiler Warnings","text":"<p>Telemetrix4UnoR4 uses the NewPing library for HC-SR04 Sonar distance sensor support. You may see the following warning when compiling any of the servers. This warning may be safely ignored.</p> <p>An issue was created but has not yet been addressed.</p> <pre><code>WARNING: library NewPing claims to run on avr, megaavr, esp32 architecture(s)\nand may be incompatible with your current board which runs on \nrenesas architecture(s).\n\n</code></pre>"},{"location":"issues/#ble","title":"BLE","text":""},{"location":"issues/#client-side-issues","title":"Client Side Issues","text":"<p>BLE is only supported using the asyncio API. The  threaded API does not support BLE.</p> <p></p>"},{"location":"license/","title":"License","text":""},{"location":"license/#gnu-affero-general-public-license","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License.","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"python_3_verify/","title":"Verifying The Python Version","text":"<p>Python 3.8 or greater is required before installing and using the telemetrix-uno-r4  package.</p> <p>To check that you have the correct version of Python 3 installed, open a command window and type:</p> <pre><code>python3 -V\n</code></pre> <p>For Windows, you may need to type:</p> <pre><code>python -V\n</code></pre> <p>Executing this command displays the current version of Python 3 installed.</p> <pre><code>Python 3.11.4\n</code></pre> <p>If you need to install Python 3, refer to python.org.</p> <p></p>"},{"location":"server_config/","title":"Server Configuration","text":""},{"location":"server_config/#arduino-uno-r4-minima","title":"Arduino UNO R4 Minima","text":"<p>The Minima requires no configuration.</p>"},{"location":"server_config/#arduino-uno-r4-wifi","title":"Arduino UNO R4 WIFI","text":""},{"location":"server_config/#telemetrix4unor4ble","title":"Telemetrix4UnoR4BLE","text":""},{"location":"server_config/#starting-banner-enable","title":"Starting Banner Enable","text":"<p>By default, when you power up the Arduino, the sketch is identified by the message \"Telemetrix BLE\" scrolling across the display. This message will be extinguished once a  client application connects.</p> <p>You may disable the power on scrolling by commenting out the line that says</p> <pre><code>#define ENABLE_STARTING_BANNER 1\n</code></pre> <p>The client API method, enable_scroll_message, which allows you to create and scroll your own message across the display, still functions even if you disable the starting banner.</p>"},{"location":"server_config/#ble-name","title":"BLE Name","text":"<p>The ble_name string is the name the BLE client will search for to connect. You may  change the default value, but if you do, you must also set the  ble_device_name parameter in the __init__ method when you  instantiate telemetrix_uno_r4_wifi_aio.</p>"},{"location":"server_config/#telemetrix4unor4serialusb","title":"Telemetrix4UnoR4SerialUSB","text":""},{"location":"server_config/#starting-banner-enable_1","title":"Starting Banner Enable","text":"<p>By default, when you power up the Arduino, the sketch is identified by the message \"USBSerial\" scrolling across the display. This message will be extinguished once a  client application connects.</p> <p>You may disable the power on scrolling by commenting out the line that says</p> <pre><code>#define ENABLE_STARTING_BANNER 1\n</code></pre> <p>The client API method, enable_scroll_message, allows you to create and scroll your own message across the display, and it still functions even if you disable the starting banner.</p>"},{"location":"server_config/#telemetrix4unor4wifi","title":"Telemetrix4UnoR4Wifi","text":""},{"location":"server_config/#required-configuration","title":"Required Configuration","text":""},{"location":"server_config/#ssid","title":"SSID","text":"<p>Edit the sketch and place your router's SSID between the quotes.</p>"},{"location":"server_config/#password","title":"PASSWORD","text":"<p>Edit the sketch and place your router's PASSWORD between the quotes.</p>"},{"location":"server_config/#starting-banner-enable_2","title":"Starting Banner Enable","text":"<p>If the starting banner is enabled, and you forget to set SSID and PASSWORD in the sketch, a series of question marks will scroll across the screen.</p> <p>Once you have a valid SSID and PASSWORD configured, the IP address assigned by the  router will be displayed. </p> <p>You may disable the power on scrolling by commenting out the line that says</p> <pre><code>#define ENABLE_STARTING_BANNER 1\n</code></pre> <p>The client API method, enable_scroll_message, allows you to create and scroll your own message across the display, and it still functions even if you disable the starting banner.</p> <p></p>"},{"location":"server_library_installation/","title":"Install the Telemetrix4Uno Library Into The Arduino IDE","text":""},{"location":"server_library_installation/#add-the-arduino4unor4-library-to-the-ide","title":"Add The Arduino4UnoR4 Library To The IDE","text":"<ol> <li> <p>Open the Arduino IDE and click on the library icon.</p> <p></p> </li> <li> <p>In the search box, type Telemetrix4UnoR4, and when the library is found, click INSTALL.</p> <p></p> </li> <li> <p>You will be prompted to install all of the dependencies. Select INSTALL ALL.</p> <p></p> </li> </ol>"},{"location":"server_library_installation/#additional-steps-if-you-wish-to-use-the-ble-server","title":"Additional Steps If You Wish To Use The BLE Server","text":"<p>Follow the instructions on this link to make sure that you have the correct version of  the radio firmware installed and to install the Beta version of the ArduinoBLE library.</p> <p></p>"},{"location":"server_selection/","title":"Select A Server From the Arduino IDE Examples Menu","text":""},{"location":"server_selection/#choose-a-server","title":"Choose A Server","text":"<p>Select File from the Arduino IDE main menu and then select Examples.</p> <p>Next, select TelemetrixUnoR4 from the example selections.</p> <p></p> <p>There are four servers to choose from:</p> <ul> <li> <p>Arduino UNO R4 Minima</p> <ul> <li>Minima - utilizing a serial transport via the USB port.</li> </ul> </li> <li> <p>Arduino UNO R4 WIFI</p> <ul> <li>Telemetrix4UnoR4BLE - utilizing a BLE transport.</li> <li>Telemetrix4UnoR4SerialUSB - utilizing serial transport via the USB port.</li> <li>Telemetrix4UnoR4WIFI - utilizing a WIFI transport.</li> </ul> </li> </ul> <p></p>"},{"location":"telemetrix_minima_reference/","title":"telemetrix_uno_r4_minima","text":"<p>Copyright (c) 2023, 2024 Alan Yorinks All rights reserved.</p> <p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3 as published by the Free Software Foundation; either or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</p>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima","title":"<code>TelemetrixUnoR4Minima</code>","text":"<p>             Bases: <code>threading.Thread</code></p> <p>This class exposes and implements the telemetrix API. It uses threading to accommodate concurrency. It includes the public API methods as well as a set of private methods.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>class TelemetrixUnoR4Minima(threading.Thread):\n\"\"\"\n    This class exposes and implements the telemetrix API.\n    It uses threading to accommodate concurrency.\n    It includes the public API methods as well as\n    a set of private methods.\n\n    \"\"\"\n\n    # noinspection PyPep8,PyPep8,PyPep8\n    def __init__(self, com_port=None, arduino_instance_id=1,\n                 arduino_wait=1, sleep_tune=0.000001,\n                 shutdown_on_exception=True, hard_reset_on_shutdown=True):\n\n\"\"\"\n\n        :param com_port: e.g. COM3 or /dev/ttyACM0.\n                         Only use if you wish to bypass auto com port\n                         detection.\n\n        :param arduino_instance_id: Match with the value installed on the\n                                    arduino-telemetrix sketch.\n\n        :param arduino_wait: Amount of time to wait for an Arduino to\n                             fully reset itself.\n\n        :param sleep_tune: A tuning parameter (typically not changed by user)\n\n        :param shutdown_on_exception: call shutdown before raising\n                                      a RunTimeError exception, or\n                                      receiving a KeyboardInterrupt exception\n\n        :param hard_reset_on_shutdown: reset the board on shutdown\n\n        \"\"\"\n\n        # initialize threading parent\n        threading.Thread.__init__(self)\n\n        # create the threads and set them as daemons so\n        # that they stop when the program is closed\n\n        # create a thread to interpret received serial data\n        self.the_reporter_thread = threading.Thread(target=self._reporter)\n        self.the_reporter_thread.daemon = True\n\n        self.the_data_receive_thread = threading.Thread(target=self._serial_receiver)\n\n        self.the_data_receive_thread.daemon = True\n\n        # flag to allow the reporter and receive threads to run.\n        self.run_event = threading.Event()\n\n        # check to make sure that Python interpreter is version 3.7 or greater\n        python_version = sys.version_info\n        if python_version[0] &gt;= 3:\n            if python_version[1] &gt;= 7:\n                pass\n            else:\n                raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                                   \"required for use of this program.\")\n\n        # save input parameters as instance variables\n        self.com_port = com_port\n        self.arduino_instance_id = arduino_instance_id\n        self.arduino_wait = arduino_wait\n        self.sleep_tune = sleep_tune\n        self.shutdown_on_exception = shutdown_on_exception\n        self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n        # create a deque to receive and process data from the arduino\n        self.the_deque = deque()\n\n        # The report_dispatch dictionary is used to process\n        # incoming report messages by looking up the report message\n        # and executing its associated processing method.\n\n        self.report_dispatch = {}\n\n        # To add a command to the command dispatch table, append here.\n        self.report_dispatch.update(\n            {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n        self.report_dispatch.update(\n            {PrivateConstants.ANALOG_REPORT: self._analog_message})\n        self.report_dispatch.update(\n            {PrivateConstants.FIRMWARE_REPORT: self._firmware_message})\n        self.report_dispatch.update({PrivateConstants.I_AM_HERE_REPORT: self._i_am_here})\n        self.report_dispatch.update(\n            {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n        self.report_dispatch.update(\n            {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n        self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n        self.report_dispatch.update(\n            {PrivateConstants.SPI_REPORT: self._spi_report})\n        self.report_dispatch.update(\n            {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_CURRENT_POSITION:\n                 self._stepper_current_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUNNING_REPORT:\n                 self._stepper_is_running_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n                 self._stepper_run_complete_report})\n\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.FEATURES:\n                 self._features_report})\n\n        # dictionaries to store the callbacks for each pin\n        self.analog_callbacks = {}\n\n        self.digital_callbacks = {}\n\n        self.i2c_callback = None\n        self.i2c_callback2 = None\n\n        self.i2c_1_active = False\n        self.i2c_2_active = False\n\n        self.spi_callback = None\n\n        self.onewire_callback = None\n\n        self.cs_pins_enabled = []\n\n        # the trigger pin will be the key to retrieve\n        # the callback for a specific HC-SR04\n        self.sonar_callbacks = {}\n\n        self.sonar_count = 0\n\n        self.dht_callbacks = {}\n\n        self.dht_count = 0\n\n        # serial port in use\n        self.serial_port = None\n\n        # flag to indicate we are in shutdown mode\n        self.shutdown_flag = False\n\n        # debug loopback callback method\n        self.loop_back_callback = None\n\n        # flag to indicate the start of a new report\n        # self.new_report_start = True\n\n        # firmware version to be stored here\n        self.firmware_version = []\n\n        # reported arduino instance id\n        self.reported_arduino_id = []\n\n        # reported features\n        self.reported_features = 0\n\n        # flag to indicate if i2c was previously enabled\n        self.i2c_enabled = False\n\n        # flag to indicate if spi is initialized\n        self.spi_enabled = False\n\n        # flag to indicate if onewire is initialized\n        self.onewire_enabled = False\n\n        # # stepper motor variables\n        #\n        # # updated when a new motor is added\n        # self.next_stepper_assigned = 0\n        #\n        # # valid list of stepper motor interface types\n        # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n        #\n        # # maximum number of steppers supported\n        # self.max_number_of_steppers = 4\n        #\n        # # number of steppers created - not to exceed the maximum\n        # self.number_of_steppers = 0\n        #\n        # # dictionary to hold stepper motor information\n        # self.stepper_info = {'instance': False, 'is_running': None,\n        #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n        #                      'distance_to_go_callback': None,\n        #                      'target_position_callback': None,\n        #                      'current_position_callback': None,\n        #                      'is_running_callback': None,\n        #                      'motion_complete_callback': None,\n        #                      'acceleration_callback': None}\n        #\n        # # build a list of stepper motor info items\n        # self.stepper_info_list = []\n        # # a list of dictionaries to hold stepper information\n        # for motor in range(self.max_number_of_steppers):\n        #     self.stepper_info_list.append(self.stepper_info.copy())\n\n        self.the_reporter_thread.start()\n        self.the_data_receive_thread.start()\n\n        print(f\"telemetrix_uno_r4_minima:  Version\"\n              f\" {PrivateConstants.TELEMETRIX_VERSION}\\n\\n\"\n              f\"Copyright (c) 2023 Alan Yorinks All Rights Reserved.\\n\")\n\n        # using the serial link\n        if not self.com_port:\n            # user did not specify a com_port\n            try:\n                self._find_arduino()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n        else:\n            # com_port specified - set com_port and baud rate\n            try:\n                self._manual_open()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n\n        if self.serial_port:\n            print(\n                f\"Arduino compatible device found and connected to {self.serial_port.port}\")\n\n            self.serial_port.reset_input_buffer()\n            self.serial_port.reset_output_buffer()\n\n        # no com_port found - raise a runtime exception\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('No Arduino Found or User Aborted Program')\n\n        # allow the threads to run\n        self._run_threads()\n        print(f'Reset Complete')\n\n        # get telemetrix firmware version and print it\n        print('\\nRetrieving Telemetrix4UnoR4Minima firmware ID...')\n        self._get_firmware_version()\n        if not self.firmware_version:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'Telemetrix4UnoR4Minima firmware version')\n\n        else:\n\n            print(f'Telemetrix4UnoR4Minima firmware version: {self.firmware_version[0]}.'\n                  f'{self.firmware_version[1]}.{self.firmware_version[2]}')\n        command = [PrivateConstants.ENABLE_ALL_REPORTS]\n        self._send_command(command)\n\n        # get the features list\n        command = [PrivateConstants.GET_FEATURES]\n        self._send_command(command)\n        time.sleep(.2)\n\n        # Have the server reset its data structures\n        command = [PrivateConstants.RESET]\n        self._send_command(command)\n\n    def _find_arduino(self):\n\"\"\"\n        This method will search all potential serial ports for an Arduino\n        containing a sketch that has a matching arduino_instance_id as\n        specified in the input parameters of this class.\n\n        This is used explicitly with the Telemetrix4Arduino sketch.\n        \"\"\"\n\n        # a list of serial ports to be checked\n        serial_ports = []\n\n        print('Opening all potential serial ports...')\n        the_ports_list = list_ports.comports()\n        for port in the_ports_list:\n            if port.pid is None:\n                continue\n            try:\n                self.serial_port = serial.Serial(port.device, 115200,\n                                                 timeout=1, writeTimeout=0)\n            except SerialException:\n                continue\n            # create a list of serial ports that we opened\n            serial_ports.append(self.serial_port)\n\n            # display to the user\n            print('\\t' + port.device)\n\n            # clear out any possible data in the input buffer\n        # wait for arduino to reset\n        print(\n            f'\\nWaiting {self.arduino_wait} seconds(arduino_wait) for Arduino devices to '\n            'reset...')\n        # temporary for testing\n        time.sleep(self.arduino_wait)\n        self._run_threads()\n\n        for serial_port in serial_ports:\n            self.serial_port = serial_port\n\n            self._get_arduino_id()\n            if self.reported_arduino_id != self.arduino_instance_id:\n                continue\n            else:\n                print('Valid Arduino ID Found.')\n                self.serial_port.reset_input_buffer()\n                self.serial_port.reset_output_buffer()\n                return\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'Incorrect Arduino ID: {self.reported_arduino_id}')\n\n    def _manual_open(self):\n\"\"\"\n        Com port was specified by the user - try to open up that port\n\n        \"\"\"\n        # if port is not found, a serial exception will be thrown\n        try:\n            print(f'Opening {self.com_port}...')\n            self.serial_port = serial.Serial(self.com_port, 115200,\n                                             timeout=1, writeTimeout=0)\n\n            print(\n                f'\\nWaiting {self.arduino_wait} seconds(arduino_wait) for Arduino devices to '\n                'reset...')\n            self._run_threads()\n            time.sleep(self.arduino_wait)\n\n            self._get_arduino_id()\n\n            if self.reported_arduino_id != self.arduino_instance_id:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(f'Incorrect Arduino ID: {self.reported_arduino_id}')\n            print('Valid Arduino ID Found.')\n            # get arduino firmware version and print it\n            print('\\nRetrieving Telemetrix4Arduino firmware ID...')\n            self._get_firmware_version()\n\n            if not self.firmware_version:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    f'Telemetrix4Arduino Sketch Firmware Version Not Found')\n\n            else:\n                print(f'Telemetrix4UnoR4 firmware version: {self.firmware_version[0]}.'\n                      f'{self.firmware_version[1]}')\n        except KeyboardInterrupt:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('User Hit Control-C')\n\n    def analog_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (maximum 16 bits)\n\n        \"\"\"\n        value_msb = value &gt;&gt; 8\n        value_lsb = value &amp; 0xff\n        command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n        self._send_command(command)\n\n    def digital_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (1 or 0)\n\n        \"\"\"\n\n        command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n        self._send_command(command)\n\n    def disable_all_reporting(self):\n\"\"\"\n        Disable reporting for all digital and analog input pins\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DISABLE_ALL, 0]\n        self._send_command(command)\n\n    def disable_analog_reporting(self, pin):\n\"\"\"\n        Disables analog reporting for a single analog pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n        self._send_command(command)\n\n    def disable_digital_reporting(self, pin):\n\"\"\"\n        Disables digital reporting for a single digital input.\n\n        :param pin: Pin number.\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n        self._send_command(command)\n\n    def enable_analog_reporting(self, pin):\n\"\"\"\n        Enables analog reporting for the specified pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n        self._send_command(command)\n\n    def enable_digital_reporting(self, pin):\n\"\"\"\n        Enable reporting on the specified digital pin.\n\n        :param pin: Pin number.\n        \"\"\"\n\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n        self._send_command(command)\n\n    def _get_arduino_id(self):\n\"\"\"\n        Retrieve arduino-telemetrix arduino id\n\n        \"\"\"\n        command = [PrivateConstants.ARE_U_THERE]\n        self._send_command(command)\n        # provide time for the reply\n        time.sleep(.5)\n\n    def _get_firmware_version(self):\n\"\"\"\n        This method retrieves the\n        arduino-telemetrix firmware version\n\n        \"\"\"\n        command = [PrivateConstants.GET_FIRMWARE_VERSION]\n        self._send_command(command)\n        # provide time for the reply\n        time.sleep(.5)\n\n    def i2c_read(self, address, register, number_of_bytes,\n                 callback=None, i2c_port=0,\n                 write_register=True):\n\"\"\"\n        Read the specified number of bytes from the\n        specified register for the i2c device.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register\n                                       selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report\n                         i2c data as a result of read command\n\n       :param i2c_port: 0 = default, 1 = secondary\n\n       :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n\n        self._i2c_read_request(address, register, number_of_bytes,\n                               callback=callback, i2c_port=i2c_port,\n                               write_register=write_register)\n\n    def i2c_read_restart_transmission(self, address, register,\n                                      number_of_bytes,\n                                      callback=None, i2c_port=0,\n                                      write_register=True):\n\"\"\"\n        Read the specified number of bytes from the specified\n        register for the i2c device. This restarts the transmission\n        after the read. It is required for some i2c devices such as the MMA8452Q\n        accelerometer.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register\n                                                    selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report i2c\n                         data as a result of read command\n\n       :param i2c_port: 0 = default 1 = secondary\n\n       :param write_register: If True, the register is written before read\n                              Else, the write is suppressed\n\n\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n\n        self._i2c_read_request(address, register, number_of_bytes,\n                               stop_transmission=False,\n                               callback=callback, i2c_port=i2c_port,\n                               write_register=write_register)\n\n    def _i2c_read_request(self, address, register, number_of_bytes,\n                          stop_transmission=True, callback=None, i2c_port=0,\n                          write_register=True):\n\"\"\"\n        This method requests the read of an i2c device. Results are retrieved\n        via callback.\n\n        :param address: i2c device address\n\n        :param register: register number (or None if no register selection is needed)\n\n        :param number_of_bytes: number of bytes expected to be returned\n\n        :param stop_transmission: stop transmission after read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command.\n\n       :param write_register: If True, the register is written before read\n                              Else, the write is suppressed\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 2.')\n\n        if not callback:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('I2C Read: A callback function must be specified.')\n\n        if not i2c_port:\n            self.i2c_callback = callback\n        else:\n            self.i2c_callback2 = callback\n\n        if not register:\n            register = 0\n\n        if write_register:\n            write_register = 1\n        else:\n            write_register = 0\n\n        # message contains:\n        # 1. address\n        # 2. register\n        # 3. number of bytes\n        # 4. restart_transmission - True or False\n        # 5. i2c port\n        # 6. suppress write flag\n\n        command = [PrivateConstants.I2C_READ, address, register, number_of_bytes,\n                   stop_transmission, i2c_port, write_register]\n        self._send_command(command)\n\n    def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n        Write data to an i2c device.\n\n        :param address: i2c device address\n\n        :param i2c_port: 0= port 1, 1 = port 2\n\n        :param args: A variable number of bytes to be sent to the device\n                     passed in as a list\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n        command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n        for item in args:\n            command.append(item)\n\n        self._send_command(command)\n\n    def loop_back(self, start_character, callback=None):\n\"\"\"\n        This is a debugging method to send a character to the\n        Arduino device, and have the device loop it back.\n\n        :param start_character: The character to loop back. It should be\n                                an integer.\n\n        :param callback: Looped back character will appear in the callback method\n\n        \"\"\"\n        command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n        self.loop_back_callback = callback\n        self._send_command(command)\n\n    def set_analog_scan_interval(self, interval):\n\"\"\"\n        Set the analog scanning interval.\n\n        :param interval: value of 0 - 255 - milliseconds\n        \"\"\"\n\n        if 0 &lt;= interval &lt;= 255:\n            command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('Analog interval must be between 0 and 255')\n\n    def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n        Set a pin as a pwm (analog output) pin.\n\n        :param pin_number:arduino pin number\n\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n\n    def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n        Set a pin as an analog input.\n\n        :param pin_number: arduino pin number\n\n        :param differential: difference in previous to current value before\n                             report will be generated\n\n        :param callback: callback function\n\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for analog input pins = 3\n\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG, differential,\n                           callback)\n\n    def set_pin_mode_digital_input(self, pin_number, callback=None):\n\"\"\"\n        Set a pin as a digital input.\n\n        :param pin_number: arduino pin number\n\n        :param callback: callback function\n\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, callback=callback)\n\n    def set_pin_mode_digital_input_pullup(self, pin_number, callback=None):\n\"\"\"\n        Set a pin as a digital input with pullup enabled.\n\n        :param pin_number: arduino pin number\n\n        :param callback: callback function\n\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                           callback=callback)\n\n    def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n        Set a pin as a digital output pin.\n\n        :param pin_number: arduino pin number\n        \"\"\"\n\n        self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n\n    def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n        Establish the standard Arduino i2c pins for i2c utilization.\n\n        :param i2c_port: 0 = i2c1, 1 = i2c2\n\n        NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n               2. Callbacks are set within the individual i2c read methods of this\n              API.\n\n              See i2c_read, or i2c_read_restart_transmission.\n\n        \"\"\"\n        # test for i2c port 2\n        if i2c_port:\n            # if not previously activated set it to activated\n            # and the send a begin message for this port\n            if not self.i2c_2_active:\n                self.i2c_2_active = True\n            else:\n                return\n        # port 1\n        else:\n            if not self.i2c_1_active:\n                self.i2c_1_active = True\n            else:\n                return\n\n        command = [PrivateConstants.I2C_BEGIN, i2c_port]\n        self._send_command(command)\n\n    def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n        :param pin: connection pin\n\n        :param callback: callback function\n\n        :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n        Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n        Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n        Temperature,\n        Time]\n\n        DHT_REPORT_TYPE = 12\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n            if not callback:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n            if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n                self.dht_callbacks[pin] = callback\n                self.dht_count += 1\n\n                if dht_type != 22 and dht_type != 11:\n                    dht_type = 22\n\n                command = [PrivateConstants.DHT_NEW, pin, dht_type]\n                self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The DHT feature is disabled in the server.')\n\n    # noinspection PyRedundantParentheses\n    def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n        Attach a pin to a servo motor\n\n        :param pin_number: pin\n\n        :param min_pulse: minimum pulse width\n\n        :param max_pulse: maximum pulse width\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n            minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n            maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n            command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                       minv[0], minv[1], maxv[0], maxv[1]]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The SERVO feature is disabled in the server.')\n\n    def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                           callback=None):\n\"\"\"\n\n        :param trigger_pin:\n\n        :param echo_pin:\n\n        :param callback: callback\n\n        callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n            if not callback:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n            if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n                self.sonar_callbacks[trigger_pin] = callback\n                self.sonar_count += 1\n\n                command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n                self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The SONAR feature is disabled in the server.')\n\n    def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n        Specify the list of chip select pins.\n\n        Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n        Chip Select is any digital output capable pin.\n\n        :param chip_select_list: this is a list of pins to be used for chip select.\n                           The pins will be configured as output, and set to high\n                           ready to be used for chip select.\n                           NOTE: You must specify the chips select pins here!\n\n\n        command message: [command, [cs pins...]]\n        \"\"\"\n\n        if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n            if type(chip_select_list) is not list:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('chip_select_list must be in the form of a list')\n            if not chip_select_list:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('Chip select pins were not specified')\n\n            self.spi_enabled = True\n\n            command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n            for pin in chip_select_list:\n                command.append(pin)\n                self.cs_pins_enabled.append(pin)\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The SPI feature is disabled in the server.')\n\n    # def set_pin_mode_stepper(self, interface=1, pin1=2, pin2=3, pin3=4,\n    #                          pin4=5, enable=True):\n    #     \"\"\"\n    #     Stepper motor support is implemented as a proxy for the\n    #     the AccelStepper library for the Arduino.\n    #\n    #     This feature is compatible with the TB6600 Motor Driver\n    #\n    #     Note: It may not work for other driver types!\n    #\n    #     https://github.com/waspinator/AccelStepper\n    #\n    #     Instantiate a stepper motor.\n    #\n    #     Initialize the interface and pins for a stepper motor.\n    #\n    #     :param interface: Motor Interface Type:\n    #\n    #             1 = Stepper Driver, 2 driver pins required\n    #\n    #             2 = FULL2WIRE  2 wire stepper, 2 motor pins required\n    #\n    #             3 = FULL3WIRE 3 wire stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             4 = FULL4WIRE, 4 wire full stepper, 4 motor pins\n    #                 required\n    #\n    #             6 = HALF3WIRE, 3 wire half stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             8 = HALF4WIRE, 4 wire half stepper, 4 motor pins required\n    #\n    #     :param pin1: Arduino digital pin number for motor pin 1\n    #\n    #     :param pin2: Arduino digital pin number for motor pin 2\n    #\n    #     :param pin3: Arduino digital pin number for motor pin 3\n    #\n    #     :param pin4: Arduino digital pin number for motor pin 4\n    #\n    #     :param enable: If this is true, the output pins at construction time.\n    #\n    #     :return: Motor Reference number\n    #     \"\"\"\n    #     if self.reported_features &amp; PrivateConstants.STEPPERS_FEATURE:\n    #\n    #         if self.number_of_steppers == self.max_number_of_steppers:\n    #             if self.shutdown_on_exception:\n    #                 self.shutdown()\n    #             raise RuntimeError('Maximum number of steppers has already been assigned')\n    #\n    #         if interface not in self.valid_stepper_interfaces:\n    #             if self.shutdown_on_exception:\n    #                 self.shutdown()\n    #             raise RuntimeError('Invalid stepper interface')\n    #\n    #         self.number_of_steppers += 1\n    #\n    #         motor_id = self.next_stepper_assigned\n    #         self.next_stepper_assigned += 1\n    #         self.stepper_info_list[motor_id]['instance'] = True\n    #\n    #         # build message and send message to server\n    #         command = [PrivateConstants.SET_PIN_MODE_STEPPER, motor_id, interface, pin1,\n    #                    pin2, pin3, pin4, enable]\n    #         self._send_command(command)\n    #\n    #         # return motor id\n    #         return motor_id\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'The Stepper feature is disabled in the server.')\n\n    def servo_write(self, pin_number, angle):\n\"\"\"\n\n        Set a servo attached to a pin to a given angle.\n\n        :param pin_number: pin\n\n        :param angle: angle (0-180)\n\n        \"\"\"\n        command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n        self._send_command(command)\n\n    def servo_detach(self, pin_number):\n\"\"\"\n        Detach a servo for reuse\n\n        :param pin_number: attached pin\n\n        \"\"\"\n        command = [PrivateConstants.SERVO_DETACH, pin_number]\n        self._send_command(command)\n\n    # def stepper_move_to(self, motor_id, position):\n    #     \"\"\"\n    #     Set an absolution target position. If position is positive, the movement is\n    #     clockwise, else it is counter-clockwise.\n    #\n    #     The run() function (below) will try to move the motor (at most one step per call)\n    #     from the current position to the target position set by the most\n    #     recent call to this function. Caution: moveTo() also recalculates the\n    #     speed for the next step.\n    #     If you are trying to use constant speed movements, you should call setSpeed()\n    #     after calling moveTo().\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param position: target position. Maximum value is 32 bits.\n    #     \"\"\"\n    #     if position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #     position = abs(position)\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_move_to: Invalid motor_id.')\n    #\n    #     position_bytes = list(position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE_TO, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #     self._send_command(command)\n    #\n    # def stepper_move(self, motor_id, relative_position):\n    #     \"\"\"\n    #     Set the target position relative to the current position.\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param relative_position: The desired position relative to the current\n    #                               position. Negative is anticlockwise from\n    #                               the current position. Maximum value is 32 bits.\n    #     \"\"\"\n    #     if relative_position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #\n    #     relative_position = abs(relative_position)\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_move: Invalid motor_id.')\n    #\n    #     position_bytes = list(relative_position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #     self._send_command(command)\n    #\n    # def stepper_run(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     This method steps the selected motor based on the current speed.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run: A motion complete callback must be '\n    #                            'specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_run_speed(self, motor_id):\n    #     \"\"\"\n    #     This method steps the selected motor based at a constant speed as set by the most\n    #     recent call to stepper_set_max_speed(). The motor will run continuously.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run_speed: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_set_max_speed(self, motor_id, max_speed):\n    #     \"\"\"\n    #     Sets the maximum permitted speed. The stepper_run() function will accelerate\n    #     up to the speed set by this function.\n    #\n    #     Caution: the maximum speed achievable depends on your processor and clock speed.\n    #     The default maxSpeed is 1 step per second.\n    #\n    #      Caution: Speeds that exceed the maximum speed supported by the processor may\n    #               result in non-linear accelerations and decelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param max_speed: 1 - 1000\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Invalid motor_id.')\n    #\n    #     if not 1 &lt; max_speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Speed range is 1 - 1000.')\n    #\n    #     self.stepper_info_list[motor_id]['max_speed'] = max_speed\n    #     max_speed_msb = (max_speed &amp; 0xff00) &gt;&gt; 8\n    #     max_speed_lsb = max_speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MAX_SPEED, motor_id, max_speed_msb,\n    #                max_speed_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_get_max_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the maximum speed configured for this stepper\n    #     that was previously set by stepper_set_max_speed()\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :return: The currently configured maximum speed.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_max_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['max_speed']\n    #\n    # def stepper_set_acceleration(self, motor_id, acceleration):\n    #     \"\"\"\n    #     Sets the acceleration/deceleration rate.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param acceleration: The desired acceleration in steps per second\n    #                          per second. Must be &gt; 0.0. This is an\n    #                          expensive call since it requires a square\n    #                          root to be calculated on the server.\n    #                          Dont call more often than needed.\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Invalid motor_id.')\n    #\n    #     if not 1 &lt; acceleration &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Acceleration range is 1 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['acceleration'] = acceleration\n    #\n    #     max_accel_msb = acceleration &gt;&gt; 8\n    #     max_accel_lsb = acceleration &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_ACCELERATION, motor_id, max_accel_msb,\n    #                max_accel_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_set_speed(self, motor_id, speed):\n    #     \"\"\"\n    #     Sets the desired constant speed for use with stepper_run_speed().\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param speed: 0 - 1000 The desired constant speed in steps per\n    #                   second. Positive is clockwise. Speeds of more than 1000 steps per\n    #                   second are unreliable. Speed accuracy depends on the Arduino\n    #                   crystal. Jitter depends on how frequently you call the\n    #                   stepper_run_speed() method.\n    #                   The speed will be limited by the current value of\n    #                   stepper_set_max_speed().\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Invalid motor_id.')\n    #\n    #     if not 0 &lt; speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Speed range is 0 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['speed'] = speed\n    #\n    #     speed_msb = speed &gt;&gt; 8\n    #     speed_lsb = speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_SPEED, motor_id, speed_msb, speed_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_get_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the  most recently set speed.\n    #     that was previously set by stepper_set_speed();\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['speed']\n    #\n    # def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback):\n    #     \"\"\"\n    #     Request the distance from the current position to the target position\n    #     from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param distance_to_go_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=15, motor_id, distance in steps, time_stamp]\n    #\n    #     A positive distance is clockwise from the current position.\n    #\n    #     \"\"\"\n    #     if not distance_to_go_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go: Invalid motor_id.')\n    #     self.stepper_info_list[motor_id][\n    #         'distance_to_go_callback'] = distance_to_go_callback\n    #     command = [PrivateConstants.STEPPER_GET_DISTANCE_TO_GO, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_get_target_position(self, motor_id, target_callback):\n    #     \"\"\"\n    #     Request the most recently set target position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param target_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=16, motor_id, target position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #\n    #     \"\"\"\n    #     if not target_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_target_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_target_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id][\n    #         'target_position_callback'] = target_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_TARGET_POSITION, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_get_current_position(self, motor_id, current_position_callback):\n    #     \"\"\"\n    #     Request the current motor position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param current_position_callback: required callback function to receive report\n    #\n    #     :return: The current motor position returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=17, motor_id, current position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #     \"\"\"\n    #     if not current_position_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_current_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_current_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['current_position_callback'] = current_position_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_CURRENT_POSITION, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_set_current_position(self, motor_id, position):\n    #     \"\"\"\n    #     Resets the current position of the motor, so that wherever the motor\n    #     happens to be right now is considered to be the new 0 position. Useful\n    #     for setting a zero position on a stepper after an initial hardware\n    #     positioning move.\n    #\n    #     Has the side effect of setting the current motor speed to 0.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     :param position: Position in steps. This is a 32 bit value\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_current_position: Invalid motor_id.')\n    #     position_bytes = list(position.to_bytes(4, 'big',  signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_SET_CURRENT_POSITION, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     self._send_command(command)\n    #\n    # def stepper_run_speed_to_position(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     Runs the motor at the currently selected speed until the target position is\n    #     reached.\n    #\n    #     Does not implement accelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: A motion complete '\n    #                            'callback must be '\n    #                            'specified.')\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED_TO_POSITION, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_stop(self, motor_id):\n    #     \"\"\"\n    #     Sets a new target position that causes the stepper\n    #     to stop as quickly as possible, using the current speed and\n    #     acceleration parameters.\n    #\n    #     :param motor_id:  0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_stop: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_STOP, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_disable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Disable motor pin outputs by setting them all LOW.\n    #\n    #     Depending on the design of your electronics this may turn off\n    #     the power to the motor coils, saving power.\n    #\n    #     This is useful to support Arduino low power modes: disable the outputs\n    #     during sleep and then re-enable with enableOutputs() before stepping\n    #     again.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and clears\n    #     the pin to disabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_disable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_DISABLE_OUTPUTS, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_enable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Enable motor pin outputs by setting the motor pins to OUTPUT\n    #     mode.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and sets\n    #     the pin to enabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_enable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_ENABLE_OUTPUTS, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_set_min_pulse_width(self, motor_id, minimum_width):\n    #     \"\"\"\n    #     Sets the minimum pulse width allowed by the stepper driver.\n    #\n    #     The minimum practical pulse width is approximately 20 microseconds.\n    #\n    #     Times less than 20 microseconds will usually result in 20 microseconds or so.\n    #\n    #     :param motor_id: 0 -3\n    #\n    #     :param minimum_width: A 16 bit unsigned value expressed in microseconds.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Invalid motor_id.')\n    #\n    #     if not 0 &lt; minimum_width &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Pulse width range = '\n    #                            '0-0xffff.')\n    #\n    #     width_msb = minimum_width &gt;&gt; 8\n    #     width_lsb = minimum_width &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MINIMUM_PULSE_WIDTH, motor_id, width_msb,\n    #                width_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_set_enable_pin(self, motor_id, pin=0xff):\n    #     \"\"\"\n    #     Sets the enable pin number for stepper drivers.\n    #     0xFF indicates unused (default).\n    #\n    #     Otherwise, if a pin is set, the pin will be turned on when\n    #     enableOutputs() is called and switched off when disableOutputs()\n    #     is called.\n    #\n    #     :param motor_id: 0 - 4\n    #     :param pin: 0-0xff\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Invalid motor_id.')\n    #\n    #     if not 0 &lt; pin &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Pulse width range = '\n    #                            '0-0xff.')\n    #     command = [PrivateConstants.STEPPER_SET_ENABLE_PIN, motor_id, pin]\n    #\n    #     self._send_command(command)\n    #\n    # def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False,\n    #                                 enable=False):\n    #     \"\"\"\n    #     Sets the inversion for stepper driver pins.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param direction: True=inverted or False\n    #\n    #     :param step: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_3_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_3_PINS_INVERTED, motor_id, direction,\n    #                step, enable]\n    #\n    #     self._send_command(command)\n    #\n    # def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False, pin2_invert=False,\n    #                                 pin3_invert=False, pin4_invert=False, enable=False):\n    #     \"\"\"\n    #     Sets the inversion for 2, 3 and 4 wire stepper pins\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param pin1_invert: True=inverted or False\n    #\n    #     :param pin2_invert: True=inverted or False\n    #\n    #     :param pin3_invert: True=inverted or False\n    #\n    #     :param pin4_invert: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_4_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_4_PINS_INVERTED, motor_id, pin1_invert,\n    #                pin2_invert, pin3_invert, pin4_invert, enable]\n    #\n    #     self._send_command(command)\n    #\n    # def stepper_is_running(self, motor_id, callback):\n    #     \"\"\"\n    #     Checks to see if the motor is currently running to a target.\n    #\n    #     Callback return True if the speed is not zero or not at the target position.\n    #\n    #     :param motor_id: 0-4\n    #\n    #     :param callback: required callback function to receive report\n    #\n    #     :return: The current running state returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp]\n    #     \"\"\"\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_is_running: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_is_running: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['is_running_callback'] = callback\n    #\n    #     command = [PrivateConstants.STEPPER_IS_RUNNING, motor_id]\n    #     self._send_command(command)\n\n    def _set_pin_mode(self, pin_number, pin_state, differential=0, callback=None):\n\"\"\"\n        A private method to set the various pin modes.\n\n        :param pin_number: arduino pin number\n\n        :param pin_state: INPUT/OUTPUT/ANALOG/PWM/PULLUP\n                         For SERVO use: set_pin_mode_servo\n                         For DHT   use: set_pin_mode_dht\n\n        :param differential: for analog inputs - threshold\n                             value to be achieved for report to\n                             be generated\n\n        :param callback: A reference to a call back function to be\n                         called when pin data value changes\n\n        \"\"\"\n        if callback:\n            if pin_state == PrivateConstants.AT_INPUT:\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_INPUT_PULLUP:\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_ANALOG:\n                self.analog_callbacks[pin_number] = callback\n            else:\n                print('{} {}'.format('set_pin_mode: callback ignored for '\n                                     'pin state:', pin_state))\n\n        if pin_state == PrivateConstants.AT_INPUT:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_INPUT, 1]\n\n        elif pin_state == PrivateConstants.AT_INPUT_PULLUP:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_INPUT_PULLUP, 1]\n\n        elif pin_state == PrivateConstants.AT_OUTPUT:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_OUTPUT]\n\n        elif pin_state == PrivateConstants.AT_ANALOG:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_ANALOG,\n                       differential &gt;&gt; 8, differential &amp; 0xff, 1]\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('Unknown pin state')\n\n        if command:\n            self._send_command(command)\n\n    def shutdown(self):\n\"\"\"\n        This method attempts an orderly shutdown\n        If any exceptions are thrown, they are ignored.\n        \"\"\"\n        self.shutdown_flag = True\n\n        self._stop_threads()\n\n        try:\n            command = [PrivateConstants.STOP_ALL_REPORTS]\n            self._send_command(command)\n            time.sleep(.5)\n\n            if self.hard_reset_on_shutdown:\n                self.r4_hard_reset()\n            else:\n                try:\n                    self.serial_port.reset_input_buffer()\n                    self.serial_port.reset_output_buffer()\n\n                    self.serial_port.close()\n\n                except (RuntimeError, SerialException, OSError):\n                    # ignore error on shutdown\n                    pass\n        except Exception:\n            # raise RuntimeError('Shutdown failed - could not send stop streaming\n            # message')\n            pass\n\n    def sonar_disable(self):\n\"\"\"\n        Disable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_DISABLE]\n        self._send_command(command)\n\n    def sonar_enable(self):\n\"\"\"\n        Enable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_ENABLE]\n        self._send_command(command)\n\n    def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n        Control an SPI chip select line\n        :param chip_select_pin: pin connected to CS\n\n        :param select: 0=select, 1=deselect\n        \"\"\"\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n        if chip_select_pin not in self.cs_pins_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n        command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n        self._send_command(command)\n\n    def spi_read_blocking(self, chip_select, register_selection, number_of_bytes_to_read,\n                          call_back=None):\n\"\"\"\n        Read the specified number of bytes from the specified SPI port and\n        call the callback function with the reported data.\n\n        :param chip_select: chip select pin\n\n        :param register_selection: Register to be selected for read.\n\n        :param number_of_bytes_to_read: Number of bytes to read\n\n        :param call_back: Required callback function to report spi data as a\n                   result of read command\n\n\n        callback returns a data list:\n        [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n        data bytes, time-stamp]\n\n        SPI_READ_REPORT = 13\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n        if not call_back:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n        self.spi_callback = call_back\n\n        command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n                   number_of_bytes_to_read,\n                   register_selection]\n\n        self._send_command(command)\n\n    def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n        Configure how the SPI serializes and de-serializes data on the wire.\n\n        See Arduino SPI reference materials for details.\n\n        :param clock_divisor: 1 - 255\n\n        :param bit_order:\n\n                            LSBFIRST = 0\n\n                            MSBFIRST = 1 (default)\n\n        :param data_mode:\n\n                            SPI_MODE0 = 0x00 (default)\n\n                            SPI_MODE1  = 1\n\n                            SPI_MODE2 = 2\n\n                            SPI_MODE3 = 3\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n        if not 0 &lt; clock_divisor &lt;= 255:\n            raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n        if bit_order not in [0, 1]:\n            raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n        if data_mode not in [0, 1, 2, 3]:\n            raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n        command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n                   data_mode]\n        self._send_command(command)\n\n    def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n        Write a list of bytes to the SPI device.\n\n        :param chip_select: chip select pin\n\n        :param bytes_to_write: A list of bytes to write. This must\n                                be in the form of a list.\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n        if type(bytes_to_write) is not list:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n        command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n        for data in bytes_to_write:\n            command.append(data)\n\n        self._send_command(command)\n\n    # def set_pin_mode_one_wire(self, pin):\n    #     \"\"\"\n    #     Initialize the one wire serial bus.\n    #\n    #     :param pin: Data pin connected to the OneWire device\n    #     \"\"\"\n    #     if self.reported_features &amp; PrivateConstants.ONEWIRE_FEATURE:\n    #         self.onewire_enabled = True\n    #         command = [PrivateConstants.ONE_WIRE_INIT, pin]\n    #         self._send_command(command)\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'The OneWire feature is disabled in the server.')\n    #\n    # def onewire_reset(self, callback=None):\n    #     \"\"\"\n    #     Reset the onewire device\n    #\n    #     :param callback: required  function to report reset result\n    #\n    #     callback returns a list:\n    #     [ReportType = 14, Report Subtype = 25, reset result byte,\n    #                     timestamp]\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_reset: OneWire interface is not enabled.')\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_reset: A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_RESET]\n    #     self._send_command(command)\n    #\n    # def onewire_select(self, device_address):\n    #     \"\"\"\n    #     Select a device based on its address\n    #     :param device_address: A bytearray of 8 bytes\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_select: OneWire interface is not enabled.')\n    #\n    #     if type(device_address) is not list:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #\n    #     if len(device_address) != 8:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #     command = [PrivateConstants.ONE_WIRE_SELECT]\n    #     for data in device_address:\n    #         command.append(data)\n    #     self._send_command(command)\n    #\n    # def onewire_skip(self):\n    #     \"\"\"\n    #     Skip the device selection. This only works if you have a\n    #     single device, but you can avoid searching and use this to\n    #     immediately access your device.\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_skip: OneWire interface is not enabled.')\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SKIP]\n    #     self._send_command(command)\n    #\n    # def onewire_write(self, data, power=0):\n    #     \"\"\"\n    #     Write a byte to the onewire device. If 'power' is one\n    #     then the wire is held high at the end for\n    #     parasitically powered devices. You\n    #     are responsible for eventually de-powering it by calling\n    #     another read or write.\n    #\n    #     :param data: byte to write.\n    #     :param power: power control (see above)\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_write: OneWire interface is not enabled.')\n    #     if 0 &lt; data &lt; 255:\n    #         command = [PrivateConstants.ONE_WIRE_WRITE, data, power]\n    #         self._send_command(command)\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_write: Data must be no larger than 255')\n    #\n    # def onewire_read(self, callback=None):\n    #     \"\"\"\n    #     Read a byte from the onewire device\n    #     :param callback: required  function to report onewire data as a\n    #                result of read command\n    #\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_READ=29, data byte, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_read: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_READ]\n    #     self._send_command(command)\n    #\n    # def onewire_reset_search(self):\n    #     \"\"\"\n    #     Begin a new search. The next use of search will begin at the first device\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_reset_search: OneWire interface is not '\n    #                            f'enabled.')\n    #     else:\n    #         command = [PrivateConstants.ONE_WIRE_RESET_SEARCH]\n    #         self._send_command(command)\n    #\n    # def onewire_search(self, callback=None):\n    #     \"\"\"\n    #     Search for the next device. The device address will returned in the callback.\n    #     If a device is found, the 8 byte address is contained in the callback.\n    #     If no more devices are found, the address returned contains all elements set\n    #     to 0xff.\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_SEARCH=31, 8 byte address, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_search: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SEARCH]\n    #     self._send_command(command)\n    #\n    # def onewire_crc8(self, address_list, callback=None):\n    #     \"\"\"\n    #     Compute a CRC check on an array of data.\n    #     :param address_list:\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_CRC8=32, CRC, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_crc8: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_crc8 A Callback must be specified')\n    #\n    #     if type(address_list) is not list:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_crc8: address list must be a list.')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     address_length = len(address_list)\n    #\n    #     command = [PrivateConstants.ONE_WIRE_CRC8, address_length - 1]\n    #\n    #     for data in address_list:\n    #         command.append(data)\n    #\n    #     self._send_command(command)\n\n    def r4_hard_reset(self):\n\"\"\"\n        Place the r4 into hard reset\n        \"\"\"\n        command = [PrivateConstants.RESET, 1]\n        self._send_command(command)\n        time.sleep(.5)\n        command = [PrivateConstants.BOARD_HARD_RESET, 1]\n        self._send_command(command)\n'''\n    report message handlers\n    '''\n\n    def _analog_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for analog messages.\n\n        :param data: message data\n\n        \"\"\"\n        pin = data[0]\n        value = (data[1] &lt;&lt; 8) + data[2]\n        # set the current value in the pin structure\n        time_stamp = time.time()\n        # self.digital_pins[pin].event_time = time_stamp\n        if self.analog_callbacks[pin]:\n            message = [PrivateConstants.ANALOG_REPORT, pin, value, time_stamp]\n            try:\n                self.analog_callbacks[pin](message)\n            except KeyError:\n                pass\n\n    def _dht_report(self, data):\n\"\"\"\n        This is the dht report handler method.\n\n        :param data:            data[0] = report error return\n                                    No Errors = 0\n\n                                    Checksum Error = 1\n\n                                    Timeout Error = 2\n\n                                    Invalid Value = 999\n\n                                data[1] = pin number\n\n                                data[2] = dht type 11 or 22\n\n                                data[3] = humidity positivity flag\n\n                                data[4] = temperature positivity value\n\n                                data[5] = humidity integer\n\n                                data[6] = humidity fractional value\n\n                                data[7] = temperature integer\n\n                                data[8] = temperature fractional value\n\n\n        \"\"\"\n        if data[0]:  # DHT_ERROR\n            # error report\n            # data[0] = report sub type, data[1] = pin, data[2] = error message\n            if self.dht_callbacks[data[1]]:\n                # Callback 0=DHT REPORT, DHT_ERROR, PIN, Time\n                message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                           time.time()]\n                try:\n                    self.dht_callbacks[data[1]](message)\n                except KeyError:\n                    pass\n        else:\n            # got valid data DHT_DATA\n            f_humidity = float(data[5] + data[6] / 100)\n            if data[3]:\n                f_humidity *= -1.0\n            f_temperature = float(data[7] + data[8] / 100)\n            if data[4]:\n                f_temperature *= -1.0\n            message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                       f_humidity, f_temperature, time.time()]\n\n            try:\n                self.dht_callbacks[data[1]](message)\n            except KeyError:\n                pass\n\n    def _digital_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for Digital Messages.\n\n        :param data: digital message\n\n        \"\"\"\n        pin = data[0]\n        value = data[1]\n\n        time_stamp = time.time()\n        if self.digital_callbacks[pin]:\n            message = [PrivateConstants.DIGITAL_REPORT, pin, value, time_stamp]\n            self.digital_callbacks[pin](message)\n\n    def _firmware_message(self, data):\n\"\"\"\n        Telemetrix4Arduino firmware version message\n\n        :param data: data[0] = major number, data[1] = minor number.\n\n                               data[2] = patch number\n        \"\"\"\n\n        self.firmware_version = [data[0], data[1], data[2]]\n\n    def _i2c_read_report(self, data):\n\"\"\"\n        Execute callback for i2c reads.\n\n        :param data: [I2C_READ_REPORT, i2c_port, number of bytes read, address, register, bytes read..., time-stamp]\n        \"\"\"\n\n        # we receive [# data bytes, address, register, data bytes]\n        # number of bytes of data returned\n\n        # data[0] = number of bytes\n        # data[1] = i2c_port\n        # data[2] = number of bytes returned\n        # data[3] = address\n        # data[4] = register\n        # data[5] ... all the data bytes\n\n        cb_list = [PrivateConstants.I2C_READ_REPORT, data[0], data[1]] + data[2:]\n        cb_list.append(time.time())\n\n        if cb_list[1]:\n            self.i2c_callback2(cb_list)\n        else:\n            self.i2c_callback(cb_list)\n\n    def _i2c_too_few(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(\n            f'i2c too few bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    def _i2c_too_many(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(\n            f'i2c too many bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    def _i_am_here(self, data):\n\"\"\"\n        Reply to are_u_there message\n        :param data: arduino id\n        \"\"\"\n        self.reported_arduino_id = data[0]\n\n    def _spi_report(self, report):\n\n        cb_list = [PrivateConstants.SPI_REPORT, report[0]] + report[1:]\n\n        cb_list.append(time.time())\n\n        self.spi_callback(cb_list)\n\n    def _onewire_report(self, report):\n        cb_list = [PrivateConstants.ONE_WIRE_REPORT, report[0]] + report[1:]\n        cb_list.append(time.time())\n        self.onewire_callback(cb_list)\n\n    def _report_debug_data(self, data):\n\"\"\"\n        Print debug data sent from Arduino\n        :param data: data[0] is a byte followed by 2\n                     bytes that comprise an integer\n        :return:\n        \"\"\"\n        value = (data[1] &lt;&lt; 8) + data[2]\n        print(f'DEBUG ID: {data[0]} Value: {value}')\n\n    def _report_loop_data(self, data):\n\"\"\"\n        Print data that was looped back\n        :param data: byte of loop back data\n        :return:\n        \"\"\"\n        if self.loop_back_callback:\n            self.loop_back_callback(data)\n\n    def _send_command(self, command):\n\"\"\"\n        This is a private utility method.\n\n\n        :param command:  command data in the form of a list\n\n        \"\"\"\n        # the length of the list is added at the head\n        command.insert(0, len(command))\n        send_message = bytes(command)\n\n        if self.serial_port:\n            try:\n                self.serial_port.write(send_message)\n            except SerialException:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('write fail in _send_command')\n        else:\n            raise RuntimeError('No serial port set.')\n\n    def _servo_unavailable(self, report):\n\"\"\"\n        Message if no servos are available for use.\n        :param report: pin number\n        \"\"\"\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(\n            f'Servo Attach For Pin {report[0]} Failed: No Available Servos')\n\n    def _sonar_distance_report(self, report):\n\"\"\"\n\n        :param report: data[0] = trigger pin, data[1] and data[2] = distance\n\n        callback report format: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n        \"\"\"\n\n        # get callback from pin number\n        cb = self.sonar_callbacks[report[0]]\n\n        # build report data\n        cb_list = [PrivateConstants.SONAR_DISTANCE, report[0],\n                   ((report[1] &lt;&lt; 8) + report[2]), time.time()]\n\n        cb(cb_list)\n\n    def _stepper_distance_to_go_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper distance to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = steps MSB, data[2] = steps byte 1,\n    #                              data[3] = steps bytes 2, data[4] = steps LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_DISTANCE_TO_GO, motor_id\n    #                              steps, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['distance_to_go_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     steps = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     num_steps = int.from_bytes(steps, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_DISTANCE_TO_GO, report[0], num_steps,\n    #                time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_target_position_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper target position to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = target position MSB,\n    #                    data[2] = target position byte MSB+1\n    #                    data[3] = target position byte MSB+2\n    #                    data[4] = target position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_TARGET_POSITION, motor_id\n    #                              target_position, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['target_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     target = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     target_position = int.from_bytes(target, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_TARGET_POSITION, report[0], target_position,\n    #                time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_current_position_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper current position.\n    #\n    #     :param report: data[0] = motor_id, data[1] = current position MSB,\n    #                    data[2] = current position byte MSB+1\n    #                    data[3] = current position byte MSB+2\n    #                    data[4] = current position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_CURRENT_POSITION, motor_id\n    #                              current_position, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['current_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     position = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     current_position = int.from_bytes(position, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_CURRENT_POSITION, report[0], current_position,\n    #                time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_is_running_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report if the motor is currently running\n    #\n    #     :param report: data[0] = motor_id, True if motor is running or False if it is not.\n    #\n    #     callback report format: [18, motor_id,\n    #                              running_state, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['is_running_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUNNING_REPORT, report[0], time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_run_complete_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     The motor completed it motion\n    #\n    #     :param report: data[0] = motor_id\n    #\n    #     callback report format: [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, motor_id,\n    #                              time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['motion_complete_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, report[0],\n    #                time.time()]\n    #\n    #     cb(cb_list)\n\n    def _features_report(self, report):\n        self.reported_features = report[0]\n\n    def _run_threads(self):\n        self.run_event.set()\n\n    def _is_running(self):\n        return self.run_event.is_set()\n\n    def _stop_threads(self):\n        self.run_event.clear()\n\n    def _reporter(self):\n\"\"\"\n        This is the reporter thread. It continuously pulls data from\n        the deque. When a full message is detected, that message is\n        processed.\n        \"\"\"\n        self.run_event.wait()\n\n        while self._is_running() and not self.shutdown_flag:\n            if len(self.the_deque):\n                # response_data will be populated with the received data for the report\n                response_data = []\n                packet_length = self.the_deque.popleft()\n                if packet_length:\n                    # get all the data for the report and place it into response_data\n                    for i in range(packet_length):\n                        while not len(self.the_deque):\n                            time.sleep(self.sleep_tune)\n                        data = self.the_deque.popleft()\n                        response_data.append(data)\n\n                    # print(f'response_data {response_data}')\n\n                    # get the report type and look up its dispatch method\n                    # here we pop the report type off of response_data\n                    report_type = response_data.pop(0)\n                    # print(f' reported type {report_type}')\n\n                    # retrieve the report handler from the dispatch table\n                    dispatch_entry = self.report_dispatch.get(report_type)\n\n                    # if there is additional data for the report,\n                    # it will be contained in response_data\n                    # noinspection PyArgumentList\n                    dispatch_entry(response_data)\n                    continue\n                else:\n                    if self.shutdown_on_exception:\n                        self.shutdown()\n                    raise RuntimeError(\n                        'A report with a packet length of zero was received.')\n            else:\n                time.sleep(self.sleep_tune)\n\n    def _serial_receiver(self):\n\"\"\"\n        Thread to continuously check for incoming data.\n        When a byte comes in, place it onto the deque.\n        \"\"\"\n        self.run_event.wait()\n\n        # Don't start this thread if using a tcp/ip transport\n\n        while self._is_running() and not self.shutdown_flag:\n            # we can get an OSError: [Errno9] Bad file descriptor when shutting down\n            # just ignore it\n            try:\n                if self.serial_port.inWaiting():\n                    c = self.serial_port.read()\n                    self.the_deque.append(ord(c))\n                    # print(ord(c))\n                else:\n                    time.sleep(self.sleep_tune)\n                    # continue\n            except OSError:\n                pass\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.__init__","title":"<code>__init__(com_port=None, arduino_instance_id=1, arduino_wait=1, sleep_tune=1e-06, shutdown_on_exception=True, hard_reset_on_shutdown=True)</code>","text":"<p>:param com_port: e.g. COM3 or /dev/ttyACM0.                  Only use if you wish to bypass auto com port                  detection.</p> <p>:param arduino_instance_id: Match with the value installed on the                             arduino-telemetrix sketch.</p> <p>:param arduino_wait: Amount of time to wait for an Arduino to                      fully reset itself.</p> <p>:param sleep_tune: A tuning parameter (typically not changed by user)</p> <p>:param shutdown_on_exception: call shutdown before raising                               a RunTimeError exception, or                               receiving a KeyboardInterrupt exception</p> <p>:param hard_reset_on_shutdown: reset the board on shutdown</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def __init__(self, com_port=None, arduino_instance_id=1,\n             arduino_wait=1, sleep_tune=0.000001,\n             shutdown_on_exception=True, hard_reset_on_shutdown=True):\n\n\"\"\"\n\n    :param com_port: e.g. COM3 or /dev/ttyACM0.\n                     Only use if you wish to bypass auto com port\n                     detection.\n\n    :param arduino_instance_id: Match with the value installed on the\n                                arduino-telemetrix sketch.\n\n    :param arduino_wait: Amount of time to wait for an Arduino to\n                         fully reset itself.\n\n    :param sleep_tune: A tuning parameter (typically not changed by user)\n\n    :param shutdown_on_exception: call shutdown before raising\n                                  a RunTimeError exception, or\n                                  receiving a KeyboardInterrupt exception\n\n    :param hard_reset_on_shutdown: reset the board on shutdown\n\n    \"\"\"\n\n    # initialize threading parent\n    threading.Thread.__init__(self)\n\n    # create the threads and set them as daemons so\n    # that they stop when the program is closed\n\n    # create a thread to interpret received serial data\n    self.the_reporter_thread = threading.Thread(target=self._reporter)\n    self.the_reporter_thread.daemon = True\n\n    self.the_data_receive_thread = threading.Thread(target=self._serial_receiver)\n\n    self.the_data_receive_thread.daemon = True\n\n    # flag to allow the reporter and receive threads to run.\n    self.run_event = threading.Event()\n\n    # check to make sure that Python interpreter is version 3.7 or greater\n    python_version = sys.version_info\n    if python_version[0] &gt;= 3:\n        if python_version[1] &gt;= 7:\n            pass\n        else:\n            raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                               \"required for use of this program.\")\n\n    # save input parameters as instance variables\n    self.com_port = com_port\n    self.arduino_instance_id = arduino_instance_id\n    self.arduino_wait = arduino_wait\n    self.sleep_tune = sleep_tune\n    self.shutdown_on_exception = shutdown_on_exception\n    self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n    # create a deque to receive and process data from the arduino\n    self.the_deque = deque()\n\n    # The report_dispatch dictionary is used to process\n    # incoming report messages by looking up the report message\n    # and executing its associated processing method.\n\n    self.report_dispatch = {}\n\n    # To add a command to the command dispatch table, append here.\n    self.report_dispatch.update(\n        {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n    self.report_dispatch.update(\n        {PrivateConstants.ANALOG_REPORT: self._analog_message})\n    self.report_dispatch.update(\n        {PrivateConstants.FIRMWARE_REPORT: self._firmware_message})\n    self.report_dispatch.update({PrivateConstants.I_AM_HERE_REPORT: self._i_am_here})\n    self.report_dispatch.update(\n        {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n    self.report_dispatch.update(\n        {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n    self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n    self.report_dispatch.update(\n        {PrivateConstants.SPI_REPORT: self._spi_report})\n    self.report_dispatch.update(\n        {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_CURRENT_POSITION:\n             self._stepper_current_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUNNING_REPORT:\n             self._stepper_is_running_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n             self._stepper_run_complete_report})\n\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.FEATURES:\n             self._features_report})\n\n    # dictionaries to store the callbacks for each pin\n    self.analog_callbacks = {}\n\n    self.digital_callbacks = {}\n\n    self.i2c_callback = None\n    self.i2c_callback2 = None\n\n    self.i2c_1_active = False\n    self.i2c_2_active = False\n\n    self.spi_callback = None\n\n    self.onewire_callback = None\n\n    self.cs_pins_enabled = []\n\n    # the trigger pin will be the key to retrieve\n    # the callback for a specific HC-SR04\n    self.sonar_callbacks = {}\n\n    self.sonar_count = 0\n\n    self.dht_callbacks = {}\n\n    self.dht_count = 0\n\n    # serial port in use\n    self.serial_port = None\n\n    # flag to indicate we are in shutdown mode\n    self.shutdown_flag = False\n\n    # debug loopback callback method\n    self.loop_back_callback = None\n\n    # flag to indicate the start of a new report\n    # self.new_report_start = True\n\n    # firmware version to be stored here\n    self.firmware_version = []\n\n    # reported arduino instance id\n    self.reported_arduino_id = []\n\n    # reported features\n    self.reported_features = 0\n\n    # flag to indicate if i2c was previously enabled\n    self.i2c_enabled = False\n\n    # flag to indicate if spi is initialized\n    self.spi_enabled = False\n\n    # flag to indicate if onewire is initialized\n    self.onewire_enabled = False\n\n    # # stepper motor variables\n    #\n    # # updated when a new motor is added\n    # self.next_stepper_assigned = 0\n    #\n    # # valid list of stepper motor interface types\n    # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n    #\n    # # maximum number of steppers supported\n    # self.max_number_of_steppers = 4\n    #\n    # # number of steppers created - not to exceed the maximum\n    # self.number_of_steppers = 0\n    #\n    # # dictionary to hold stepper motor information\n    # self.stepper_info = {'instance': False, 'is_running': None,\n    #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n    #                      'distance_to_go_callback': None,\n    #                      'target_position_callback': None,\n    #                      'current_position_callback': None,\n    #                      'is_running_callback': None,\n    #                      'motion_complete_callback': None,\n    #                      'acceleration_callback': None}\n    #\n    # # build a list of stepper motor info items\n    # self.stepper_info_list = []\n    # # a list of dictionaries to hold stepper information\n    # for motor in range(self.max_number_of_steppers):\n    #     self.stepper_info_list.append(self.stepper_info.copy())\n\n    self.the_reporter_thread.start()\n    self.the_data_receive_thread.start()\n\n    print(f\"telemetrix_uno_r4_minima:  Version\"\n          f\" {PrivateConstants.TELEMETRIX_VERSION}\\n\\n\"\n          f\"Copyright (c) 2023 Alan Yorinks All Rights Reserved.\\n\")\n\n    # using the serial link\n    if not self.com_port:\n        # user did not specify a com_port\n        try:\n            self._find_arduino()\n        except KeyboardInterrupt:\n            if self.shutdown_on_exception:\n                self.shutdown()\n    else:\n        # com_port specified - set com_port and baud rate\n        try:\n            self._manual_open()\n        except KeyboardInterrupt:\n            if self.shutdown_on_exception:\n                self.shutdown()\n\n    if self.serial_port:\n        print(\n            f\"Arduino compatible device found and connected to {self.serial_port.port}\")\n\n        self.serial_port.reset_input_buffer()\n        self.serial_port.reset_output_buffer()\n\n    # no com_port found - raise a runtime exception\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('No Arduino Found or User Aborted Program')\n\n    # allow the threads to run\n    self._run_threads()\n    print(f'Reset Complete')\n\n    # get telemetrix firmware version and print it\n    print('\\nRetrieving Telemetrix4UnoR4Minima firmware ID...')\n    self._get_firmware_version()\n    if not self.firmware_version:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'Telemetrix4UnoR4Minima firmware version')\n\n    else:\n\n        print(f'Telemetrix4UnoR4Minima firmware version: {self.firmware_version[0]}.'\n              f'{self.firmware_version[1]}.{self.firmware_version[2]}')\n    command = [PrivateConstants.ENABLE_ALL_REPORTS]\n    self._send_command(command)\n\n    # get the features list\n    command = [PrivateConstants.GET_FEATURES]\n    self._send_command(command)\n    time.sleep(.2)\n\n    # Have the server reset its data structures\n    command = [PrivateConstants.RESET]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.analog_write","title":"<code>analog_write(pin, value)</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (maximum 16 bits)</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def analog_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (maximum 16 bits)\n\n    \"\"\"\n    value_msb = value &gt;&gt; 8\n    value_lsb = value &amp; 0xff\n    command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.digital_write","title":"<code>digital_write(pin, value)</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (1 or 0)</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def digital_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (1 or 0)\n\n    \"\"\"\n\n    command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.disable_all_reporting","title":"<code>disable_all_reporting()</code>","text":"<p>Disable reporting for all digital and analog input pins</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def disable_all_reporting(self):\n\"\"\"\n    Disable reporting for all digital and analog input pins\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DISABLE_ALL, 0]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.disable_analog_reporting","title":"<code>disable_analog_reporting(pin)</code>","text":"<p>Disables analog reporting for a single analog pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def disable_analog_reporting(self, pin):\n\"\"\"\n    Disables analog reporting for a single analog pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.disable_digital_reporting","title":"<code>disable_digital_reporting(pin)</code>","text":"<p>Disables digital reporting for a single digital input.</p> <p>:param pin: Pin number.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def disable_digital_reporting(self, pin):\n\"\"\"\n    Disables digital reporting for a single digital input.\n\n    :param pin: Pin number.\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.enable_analog_reporting","title":"<code>enable_analog_reporting(pin)</code>","text":"<p>Enables analog reporting for the specified pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def enable_analog_reporting(self, pin):\n\"\"\"\n    Enables analog reporting for the specified pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.enable_digital_reporting","title":"<code>enable_digital_reporting(pin)</code>","text":"<p>Enable reporting on the specified digital pin.</p> <p>:param pin: Pin number.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def enable_digital_reporting(self, pin):\n\"\"\"\n    Enable reporting on the specified digital pin.\n\n    :param pin: Pin number.\n    \"\"\"\n\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.i2c_read","title":"<code>i2c_read(address, register, number_of_bytes, callback=None, i2c_port=0, write_register=True)</code>","text":"<p>Read the specified number of bytes from the  specified register for the i2c device.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register                                 selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report                   i2c data as a result of read command</p> <p>:param i2c_port: 0 = default, 1 = secondary</p> <p>:param write_register: If True, the register is written                                 before read                        Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,     bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def i2c_read(self, address, register, number_of_bytes,\n             callback=None, i2c_port=0,\n             write_register=True):\n\"\"\"\n    Read the specified number of bytes from the\n    specified register for the i2c device.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register\n                                   selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report\n                     i2c data as a result of read command\n\n   :param i2c_port: 0 = default, 1 = secondary\n\n   :param write_register: If True, the register is written\n                                   before read\n                          Else, the write is suppressed\n\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n\n    self._i2c_read_request(address, register, number_of_bytes,\n                           callback=callback, i2c_port=i2c_port,\n                           write_register=write_register)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.i2c_read_restart_transmission","title":"<code>i2c_read_restart_transmission(address, register, number_of_bytes, callback=None, i2c_port=0, write_register=True)</code>","text":"<p>Read the specified number of bytes from the specified  register for the i2c device. This restarts the transmission  after the read. It is required for some i2c devices such as the MMA8452Q  accelerometer.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register                                              selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report i2c                   data as a result of read command</p> <p>:param i2c_port: 0 = default 1 = secondary</p> <p>:param write_register: If True, the register is written before read                        Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,     bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def i2c_read_restart_transmission(self, address, register,\n                                  number_of_bytes,\n                                  callback=None, i2c_port=0,\n                                  write_register=True):\n\"\"\"\n    Read the specified number of bytes from the specified\n    register for the i2c device. This restarts the transmission\n    after the read. It is required for some i2c devices such as the MMA8452Q\n    accelerometer.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register\n                                                selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report i2c\n                     data as a result of read command\n\n   :param i2c_port: 0 = default 1 = secondary\n\n   :param write_register: If True, the register is written before read\n                          Else, the write is suppressed\n\n\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n\n    self._i2c_read_request(address, register, number_of_bytes,\n                           stop_transmission=False,\n                           callback=callback, i2c_port=i2c_port,\n                           write_register=write_register)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.i2c_write","title":"<code>i2c_write(address, args, i2c_port=0)</code>","text":"<p>Write data to an i2c device.</p> <p>:param address: i2c device address</p> <p>:param i2c_port: 0= port 1, 1 = port 2</p> <p>:param args: A variable number of bytes to be sent to the device              passed in as a list</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n    Write data to an i2c device.\n\n    :param address: i2c device address\n\n    :param i2c_port: 0= port 1, 1 = port 2\n\n    :param args: A variable number of bytes to be sent to the device\n                 passed in as a list\n\n    \"\"\"\n    if not i2c_port:\n        if not self.i2c_1_active:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n    if i2c_port:\n        if not self.i2c_2_active:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n    command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n    for item in args:\n        command.append(item)\n\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.loop_back","title":"<code>loop_back(start_character, callback=None)</code>","text":"<p>This is a debugging method to send a character to the Arduino device, and have the device loop it back.</p> <p>:param start_character: The character to loop back. It should be                         an integer.</p> <p>:param callback: Looped back character will appear in the callback method</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def loop_back(self, start_character, callback=None):\n\"\"\"\n    This is a debugging method to send a character to the\n    Arduino device, and have the device loop it back.\n\n    :param start_character: The character to loop back. It should be\n                            an integer.\n\n    :param callback: Looped back character will appear in the callback method\n\n    \"\"\"\n    command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n    self.loop_back_callback = callback\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.r4_hard_reset","title":"<code>r4_hard_reset()</code>","text":"<p>Place the r4 into hard reset</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def r4_hard_reset(self):\n\"\"\"\n    Place the r4 into hard reset\n    \"\"\"\n    command = [PrivateConstants.RESET, 1]\n    self._send_command(command)\n    time.sleep(.5)\n    command = [PrivateConstants.BOARD_HARD_RESET, 1]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.servo_detach","title":"<code>servo_detach(pin_number)</code>","text":"<p>Detach a servo for reuse</p> <p>:param pin_number: attached pin</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def servo_detach(self, pin_number):\n\"\"\"\n    Detach a servo for reuse\n\n    :param pin_number: attached pin\n\n    \"\"\"\n    command = [PrivateConstants.SERVO_DETACH, pin_number]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.servo_write","title":"<code>servo_write(pin_number, angle)</code>","text":"<p>Set a servo attached to a pin to a given angle.</p> <p>:param pin_number: pin</p> <p>:param angle: angle (0-180)</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def servo_write(self, pin_number, angle):\n\"\"\"\n\n    Set a servo attached to a pin to a given angle.\n\n    :param pin_number: pin\n\n    :param angle: angle (0-180)\n\n    \"\"\"\n    command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_analog_scan_interval","title":"<code>set_analog_scan_interval(interval)</code>","text":"<p>Set the analog scanning interval.</p> <p>:param interval: value of 0 - 255 - milliseconds</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_analog_scan_interval(self, interval):\n\"\"\"\n    Set the analog scanning interval.\n\n    :param interval: value of 0 - 255 - milliseconds\n    \"\"\"\n\n    if 0 &lt;= interval &lt;= 255:\n        command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n        self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('Analog interval must be between 0 and 255')\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_analog_input","title":"<code>set_pin_mode_analog_input(pin_number, differential=0, callback=None)</code>","text":"<p>Set a pin as an analog input.</p> <p>:param pin_number: arduino pin number</p> <p>:param differential: difference in previous to current value before                      report will be generated</p> <p>:param callback: callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for analog input pins = 3</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n    Set a pin as an analog input.\n\n    :param pin_number: arduino pin number\n\n    :param differential: difference in previous to current value before\n                         report will be generated\n\n    :param callback: callback function\n\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for analog input pins = 3\n\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG, differential,\n                       callback)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_analog_output","title":"<code>set_pin_mode_analog_output(pin_number)</code>","text":"<p>Set a pin as a pwm (analog output) pin.</p> <p>:param pin_number:arduino pin number</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n    Set a pin as a pwm (analog output) pin.\n\n    :param pin_number:arduino pin number\n\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_dht","title":"<code>set_pin_mode_dht(pin, callback=None, dht_type=22)</code>","text":"<p>:param pin: connection pin</p> <p>:param callback: callback function</p> <p>:param dht_type: either 22 for DHT22 or 11 for DHT11</p> <p>Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]</p> <p>Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity, Temperature, Time]</p> <p>DHT_REPORT_TYPE = 12</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n    :param pin: connection pin\n\n    :param callback: callback function\n\n    :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n    Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n    Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n    Temperature,\n    Time]\n\n    DHT_REPORT_TYPE = 12\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n        if not callback:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n        if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n            self.dht_callbacks[pin] = callback\n            self.dht_count += 1\n\n            if dht_type != 22 and dht_type != 11:\n                dht_type = 22\n\n            command = [PrivateConstants.DHT_NEW, pin, dht_type]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The DHT feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_digital_input","title":"<code>set_pin_mode_digital_input(pin_number, callback=None)</code>","text":"<p>Set a pin as a digital input.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_digital_input(self, pin_number, callback=None):\n\"\"\"\n    Set a pin as a digital input.\n\n    :param pin_number: arduino pin number\n\n    :param callback: callback function\n\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, callback=callback)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_digital_input_pullup","title":"<code>set_pin_mode_digital_input_pullup(pin_number, callback=None)</code>","text":"<p>Set a pin as a digital input with pullup enabled.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_digital_input_pullup(self, pin_number, callback=None):\n\"\"\"\n    Set a pin as a digital input with pullup enabled.\n\n    :param pin_number: arduino pin number\n\n    :param callback: callback function\n\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                       callback=callback)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_digital_output","title":"<code>set_pin_mode_digital_output(pin_number)</code>","text":"<p>Set a pin as a digital output pin.</p> <p>:param pin_number: arduino pin number</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n    Set a pin as a digital output pin.\n\n    :param pin_number: arduino pin number\n    \"\"\"\n\n    self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_i2c","title":"<code>set_pin_mode_i2c(i2c_port=0)</code>","text":"<p>Establish the standard Arduino i2c pins for i2c utilization.</p> <p>:param i2c_port: 0 = i2c1, 1 = i2c2</p> <ol> <li>THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE</li> </ol> <ol> <li>Callbacks are set within the individual i2c read methods of this</li> </ol> <pre><code>  API.\n\n  See i2c_read, or i2c_read_restart_transmission.\n</code></pre> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n    Establish the standard Arduino i2c pins for i2c utilization.\n\n    :param i2c_port: 0 = i2c1, 1 = i2c2\n\n    NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n           2. Callbacks are set within the individual i2c read methods of this\n          API.\n\n          See i2c_read, or i2c_read_restart_transmission.\n\n    \"\"\"\n    # test for i2c port 2\n    if i2c_port:\n        # if not previously activated set it to activated\n        # and the send a begin message for this port\n        if not self.i2c_2_active:\n            self.i2c_2_active = True\n        else:\n            return\n    # port 1\n    else:\n        if not self.i2c_1_active:\n            self.i2c_1_active = True\n        else:\n            return\n\n    command = [PrivateConstants.I2C_BEGIN, i2c_port]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_servo","title":"<code>set_pin_mode_servo(pin_number, min_pulse=544, max_pulse=2400)</code>","text":"<p>Attach a pin to a servo motor</p> <p>:param pin_number: pin</p> <p>:param min_pulse: minimum pulse width</p> <p>:param max_pulse: maximum pulse width</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n    Attach a pin to a servo motor\n\n    :param pin_number: pin\n\n    :param min_pulse: minimum pulse width\n\n    :param max_pulse: maximum pulse width\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n        minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n        maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n        command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                   minv[0], minv[1], maxv[0], maxv[1]]\n        self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The SERVO feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_sonar","title":"<code>set_pin_mode_sonar(trigger_pin, echo_pin, callback=None)</code>","text":"<p>:param trigger_pin:</p> <p>:param echo_pin:</p> <p>:param callback: callback</p> <p>callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                       callback=None):\n\"\"\"\n\n    :param trigger_pin:\n\n    :param echo_pin:\n\n    :param callback: callback\n\n    callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n        if not callback:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n        if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n            self.sonar_callbacks[trigger_pin] = callback\n            self.sonar_count += 1\n\n            command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The SONAR feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.set_pin_mode_spi","title":"<code>set_pin_mode_spi(chip_select_list=None)</code>","text":"<p>Specify the list of chip select pins.</p> <p>Standard Arduino MISO, MOSI and CLK pins are used for the board in use.</p> <p>Chip Select is any digital output capable pin.</p> <p>:param chip_select_list: this is a list of pins to be used for chip select.                    The pins will be configured as output, and set to high                    ready to be used for chip select.                    NOTE: You must specify the chips select pins here!</p> <p>command message: [command, [cs pins...]]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n    Specify the list of chip select pins.\n\n    Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n    Chip Select is any digital output capable pin.\n\n    :param chip_select_list: this is a list of pins to be used for chip select.\n                       The pins will be configured as output, and set to high\n                       ready to be used for chip select.\n                       NOTE: You must specify the chips select pins here!\n\n\n    command message: [command, [cs pins...]]\n    \"\"\"\n\n    if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n        if type(chip_select_list) is not list:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('chip_select_list must be in the form of a list')\n        if not chip_select_list:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('Chip select pins were not specified')\n\n        self.spi_enabled = True\n\n        command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n        for pin in chip_select_list:\n            command.append(pin)\n            self.cs_pins_enabled.append(pin)\n        self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The SPI feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.shutdown","title":"<code>shutdown()</code>","text":"<p>This method attempts an orderly shutdown If any exceptions are thrown, they are ignored.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def shutdown(self):\n\"\"\"\n    This method attempts an orderly shutdown\n    If any exceptions are thrown, they are ignored.\n    \"\"\"\n    self.shutdown_flag = True\n\n    self._stop_threads()\n\n    try:\n        command = [PrivateConstants.STOP_ALL_REPORTS]\n        self._send_command(command)\n        time.sleep(.5)\n\n        if self.hard_reset_on_shutdown:\n            self.r4_hard_reset()\n        else:\n            try:\n                self.serial_port.reset_input_buffer()\n                self.serial_port.reset_output_buffer()\n\n                self.serial_port.close()\n\n            except (RuntimeError, SerialException, OSError):\n                # ignore error on shutdown\n                pass\n    except Exception:\n        # raise RuntimeError('Shutdown failed - could not send stop streaming\n        # message')\n        pass\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.sonar_disable","title":"<code>sonar_disable()</code>","text":"<p>Disable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def sonar_disable(self):\n\"\"\"\n    Disable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_DISABLE]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.sonar_enable","title":"<code>sonar_enable()</code>","text":"<p>Enable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def sonar_enable(self):\n\"\"\"\n    Enable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_ENABLE]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.spi_cs_control","title":"<code>spi_cs_control(chip_select_pin, select)</code>","text":"<p>Control an SPI chip select line :param chip_select_pin: pin connected to CS</p> <p>:param select: 0=select, 1=deselect</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n    Control an SPI chip select line\n    :param chip_select_pin: pin connected to CS\n\n    :param select: 0=select, 1=deselect\n    \"\"\"\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n    if chip_select_pin not in self.cs_pins_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n    command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.spi_read_blocking","title":"<code>spi_read_blocking(chip_select, register_selection, number_of_bytes_to_read, call_back=None)</code>","text":"<p>Read the specified number of bytes from the specified SPI port and call the callback function with the reported data.</p> <p>:param chip_select: chip select pin</p> <p>:param register_selection: Register to be selected for read.</p> <p>:param number_of_bytes_to_read: Number of bytes to read</p> <p>:param call_back: Required callback function to report spi data as a            result of read command</p> <p>callback returns a data list: [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read, data bytes, time-stamp]</p> <p>SPI_READ_REPORT = 13</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def spi_read_blocking(self, chip_select, register_selection, number_of_bytes_to_read,\n                      call_back=None):\n\"\"\"\n    Read the specified number of bytes from the specified SPI port and\n    call the callback function with the reported data.\n\n    :param chip_select: chip select pin\n\n    :param register_selection: Register to be selected for read.\n\n    :param number_of_bytes_to_read: Number of bytes to read\n\n    :param call_back: Required callback function to report spi data as a\n               result of read command\n\n\n    callback returns a data list:\n    [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n    data bytes, time-stamp]\n\n    SPI_READ_REPORT = 13\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n    if not call_back:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n    self.spi_callback = call_back\n\n    command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n               number_of_bytes_to_read,\n               register_selection]\n\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.spi_set_format","title":"<code>spi_set_format(clock_divisor, bit_order, data_mode)</code>","text":"<p>Configure how the SPI serializes and de-serializes data on the wire.</p> <p>See Arduino SPI reference materials for details.</p> <p>:param clock_divisor: 1 - 255</p> <p>:param bit_order:</p> <pre><code>                LSBFIRST = 0\n\n                MSBFIRST = 1 (default)\n</code></pre> <p>:param data_mode:</p> <pre><code>                SPI_MODE0 = 0x00 (default)\n\n                SPI_MODE1  = 1\n\n                SPI_MODE2 = 2\n\n                SPI_MODE3 = 3\n</code></pre> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n    Configure how the SPI serializes and de-serializes data on the wire.\n\n    See Arduino SPI reference materials for details.\n\n    :param clock_divisor: 1 - 255\n\n    :param bit_order:\n\n                        LSBFIRST = 0\n\n                        MSBFIRST = 1 (default)\n\n    :param data_mode:\n\n                        SPI_MODE0 = 0x00 (default)\n\n                        SPI_MODE1  = 1\n\n                        SPI_MODE2 = 2\n\n                        SPI_MODE3 = 3\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n    if not 0 &lt; clock_divisor &lt;= 255:\n        raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n    if bit_order not in [0, 1]:\n        raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n    if data_mode not in [0, 1, 2, 3]:\n        raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n    command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n               data_mode]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference/#telemetrix_uno_r4_minima.TelemetrixUnoR4Minima.spi_write_blocking","title":"<code>spi_write_blocking(chip_select, bytes_to_write)</code>","text":"<p>Write a list of bytes to the SPI device.</p> <p>:param chip_select: chip select pin</p> <p>:param bytes_to_write: A list of bytes to write. This must                         be in the form of a list.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima/telemetrix_uno_r4_minima.py</code> <pre><code>def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n    Write a list of bytes to the SPI device.\n\n    :param chip_select: chip select pin\n\n    :param bytes_to_write: A list of bytes to write. This must\n                            be in the form of a list.\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n    if type(bytes_to_write) is not list:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n    command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n    for data in bytes_to_write:\n        command.append(data)\n\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/","title":"telemetrix_uno_r4_minima_aio","text":"<p>Copyright (c) 2023, 2024 Alan Yorinks All rights reserved.</p> <p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3 as published by the Free Software Foundation; either or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</p>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio","title":"<code>TelemetrixUnoR4MinimaAio</code>","text":"<p>This class exposes and implements the TelemetrixAIO API. It includes the public API methods as well as a set of private methods. This is an asyncio API.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>class TelemetrixUnoR4MinimaAio:\n\"\"\"\n    This class exposes and implements the TelemetrixAIO API.\n    It includes the public API methods as well as\n    a set of private methods. This is an asyncio API.\n\n    \"\"\"\n\n    # noinspection PyPep8,PyPep8\n    def __init__(self, com_port=None,\n                 arduino_instance_id=1, arduino_wait=1,\n                 sleep_tune=0.0001, autostart=True,\n                 loop=None, shutdown_on_exception=True,\n                 close_loop_on_shutdown=True, hard_reset_on_shutdown=True):\n\n\"\"\"\n        If you have a single Arduino connected to your computer,\n        then you may accept all the default values.\n\n        Otherwise, specify a unique arduino_instance id for each board in use.\n\n        :param com_port: e.g. COM3 or /dev/ttyACM0.\n\n        :param arduino_instance_id: Must match value in the Telemetrix4Arduino sketch\n\n        :param arduino_wait: Amount of time to wait for an Arduino to\n                             fully reset itself.\n\n        :param sleep_tune: A tuning parameter (typically not changed by user)\n\n        :param autostart: If you wish to call the start method within\n                          your application, then set this to False.\n\n        :param loop: optional user provided event loop\n\n        :param shutdown_on_exception: call shutdown before raising\n                                      a RunTimeError exception, or\n                                      receiving a KeyboardInterrupt exception\n\n        :param close_loop_on_shutdown: stop and close the event loop loop\n                                       when a shutdown is called or a serial\n                                       error occurs\n\n       :param hard_reset_on_shutdown: reset the board on shutdown\n\n        \"\"\"\n        # check to make sure that Python interpreter is version 3.8.3 or greater\n        python_version = sys.version_info\n        if python_version[0] &gt;= 3:\n            if python_version[1] &gt;= 8:\n                if python_version[2] &gt;= 3:\n                    pass\n            else:\n                raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                                   \"required for use of this program.\")\n\n        # save input parameters\n        self.com_port = com_port\n        self.arduino_instance_id = arduino_instance_id\n        self.arduino_wait = arduino_wait\n        self.sleep_tune = sleep_tune\n        self.autostart = autostart\n        self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n        # set the event loop\n        if loop is None:\n            self.loop = asyncio.get_event_loop()\n        else:\n            self.loop = loop\n\n        self.shutdown_on_exception = shutdown_on_exception\n        self.close_loop_on_shutdown = close_loop_on_shutdown\n\n        # dictionaries to store the callbacks for each pin\n        self.analog_callbacks = {}\n\n        self.digital_callbacks = {}\n\n        self.i2c_callback = None\n        self.i2c_callback2 = None\n\n        self.i2c_1_active = False\n        self.i2c_2_active = False\n\n        self.spi_callback = None\n\n        self.onewire_callback = None\n\n        # debug loopback callback method\n        self.loop_back_callback = None\n\n        # the trigger pin will be the key to retrieve\n        # the callback for a specific HC-SR04\n        self.sonar_callbacks = {}\n\n        self.sonar_count = 0\n\n        self.dht_callbacks = {}\n\n        self.dht_count = 0\n\n        # serial port in use\n        self.serial_port = None\n\n        # generic asyncio task holder\n        self.the_task = None\n\n        # flag to indicate we are in shutdown mode\n        self.shutdown_flag = False\n\n        self.report_dispatch = {}\n\n        # reported features\n        self.reported_features = 0\n\n        # To add a command to the command dispatch table, append here.\n        self.report_dispatch.update(\n            {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n        self.report_dispatch.update(\n            {PrivateConstants.ANALOG_REPORT: self._analog_message})\n        self.report_dispatch.update(\n            {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n        self.report_dispatch.update(\n            {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n        self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n        self.report_dispatch.update(\n            {PrivateConstants.SPI_REPORT: self._spi_report})\n        self.report_dispatch.update(\n            {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_CURRENT_POSITION:\n                 self._stepper_current_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUNNING_REPORT:\n                 self._stepper_is_running_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n                 self._stepper_run_complete_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.FEATURES:\n                 self._features_report})\n\n        # dictionaries to store the callbacks for each pin\n        self.analog_callbacks = {}\n\n        self.digital_callbacks = {}\n\n        self.i2c_callback = None\n        self.i2c_callback2 = None\n\n        self.i2c_1_active = False\n        self.i2c_2_active = False\n\n        self.spi_callback = None\n\n        self.onewire_callback = None\n\n        self.cs_pins_enabled = []\n\n        # flag to indicate if spi is initialized\n        self.spi_enabled = False\n\n        # flag to indicate if onewire is initialized\n        self.onewire_enabled = False\n\n        # the trigger pin will be the key to retrieve\n        # the callback for a specific HC-SR04\n        self.sonar_callbacks = {}\n\n        self.sonar_count = 0\n\n        self.dht_callbacks = {}\n\n        # # stepper motor variables\n        #\n        # # updated when a new motor is added\n        # self.next_stepper_assigned = 0\n        #\n        # # valid list of stepper motor interface types\n        # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n        #\n        # # maximum number of steppers supported\n        # self.max_number_of_steppers = 4\n        #\n        # # number of steppers created - not to exceed the maximum\n        # self.number_of_steppers = 0\n        #\n        # # dictionary to hold stepper motor information\n        # self.stepper_info = {'instance': False, 'is_running': None,\n        #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n        #                      'distance_to_go_callback': None,\n        #                      'target_position_callback': None,\n        #                      'current_position_callback': None,\n        #                      'is_running_callback': None,\n        #                      'motion_complete_callback': None,\n        #                      'acceleration_callback': None}\n        #\n        # # build a list of stepper motor info items\n        # self.stepper_info_list = []\n        # # a list of dictionaries to hold stepper information\n        # for motor in range(self.max_number_of_steppers):\n        #     self.stepper_info_list.append(self.stepper_info.copy())\n\n        print(f'telemetrix_uno_r4_minima_aio Version:'\n              f' {PrivateConstants.TELEMETRIX_AIO_VERSION}')\n        print(f'Copyright (c) 2023 Alan Yorinks All rights reserved.\\n')\n\n        if autostart:\n            self.loop.run_until_complete(self.start_aio())\n\n    async def start_aio(self):\n\"\"\"\n        This method may be called directly, if the autostart\n        parameter in __init__ is set to false.\n\n        This method instantiates the serial interface and then performs auto pin\n        discovery if using a serial interface, or creates and connects to\n        a TCP/IP enabled device running StandardFirmataWiFi.\n\n        Use this method if you wish to start TelemetrixAIO manually from\n        an asyncio function.\n         \"\"\"\n\n        if not self.com_port:\n            # user did not specify a com_port\n            try:\n                await self._find_arduino()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n        else:\n            # com_port specified - set com_port and baud rate\n            try:\n                await self._manual_open()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n\n        if self.com_port:\n            print(f'Telemetrix4UnoR4 found and connected to {self.com_port}')\n\n            # no com_port found - raise a runtime exception\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('No Arduino Found or User Aborted Program')\n\n        # get arduino firmware version and print it\n        firmware_version = await self._get_firmware_version()\n        if not firmware_version:\n            print('*** Firmware Version retrieval timed out. ***')\n            print('\\nDo you have Arduino connectivity and do you have the ')\n            print('Telemetrix4UnoR4 sketch uploaded to the board and are connected')\n            print('to the correct serial port.\\n')\n            print('To see a list of serial ports, type: '\n                  '\"list_serial_ports\" in your console.')\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError\n        else:\n\n            print(f'Telemetrix4UnoR4 Version Number: {firmware_version[2]}.'\n                  f'{firmware_version[3]}.{firmware_version[4]}')\n            # start the command dispatcher loop\n            command = [PrivateConstants.ENABLE_ALL_REPORTS]\n            await self._send_command(command)\n            if not self.loop:\n                self.loop = asyncio.get_event_loop()\n            self.the_task = self.loop.create_task(self._arduino_report_dispatcher())\n\n            # get the features list\n            command = [PrivateConstants.GET_FEATURES]\n            await self._send_command(command)\n            await asyncio.sleep(.5)\n\n            # Have the server reset its data structures\n            command = [PrivateConstants.RESET]\n            await self._send_command(command)\n\n    async def get_event_loop(self):\n\"\"\"\n        Return the currently active asyncio event loop\n\n        :return: Active event loop\n\n        \"\"\"\n        return self.loop\n\n    async def _find_arduino(self):\n\"\"\"\n        This method will search all potential serial ports for an Arduino\n        containing a sketch that has a matching arduino_instance_id as\n        specified in the input parameters of this class.\n\n        This is used explicitly with the FirmataExpress sketch.\n        \"\"\"\n\n        # a list of serial ports to be checked\n        serial_ports = []\n\n        print('Opening all potential serial ports...')\n        the_ports_list = list_ports.comports()\n        for port in the_ports_list:\n            if port.pid is None:\n                continue\n            print('\\nChecking {}'.format(port.device))\n            try:\n                self.serial_port = TelemetrixAioSerial(port.device, 115200,\n                                                       telemetrix_aio_instance=self,\n                                                       close_loop_on_error=self.close_loop_on_shutdown)\n            except SerialException:\n                continue\n            # create a list of serial ports that we opened\n            serial_ports.append(self.serial_port)\n\n            # display to the user\n            print('\\t' + port.device)\n\n            # clear out any possible data in the input buffer\n            await self.serial_port.reset_input_buffer()\n\n        # wait for arduino to reset\n        print('\\nWaiting {} seconds(arduino_wait) for Arduino devices to '\n              'reset...'.format(self.arduino_wait))\n        await asyncio.sleep(self.arduino_wait)\n\n        print('\\nSearching for an Arduino configured with an arduino_instance = ',\n              self.arduino_instance_id)\n\n        for serial_port in serial_ports:\n            self.serial_port = serial_port\n\n            command = [PrivateConstants.ARE_U_THERE]\n            await self._send_command(command)\n            # provide time for the reply\n            await asyncio.sleep(.1)\n\n            i_am_here = await self.serial_port.read(3)\n\n            if not i_am_here:\n                continue\n\n            # got an I am here message - is it the correct ID?\n            if i_am_here[2] == self.arduino_instance_id:\n                self.com_port = serial_port.com_port\n                return\n\n    async def _manual_open(self):\n\"\"\"\n        Com port was specified by the user - try to open up that port\n\n        \"\"\"\n        # if port is not found, a serial exception will be thrown\n        print('Opening {} ...'.format(self.com_port))\n        self.serial_port = TelemetrixAioSerial(self.com_port, 115200,\n                                               telemetrix_aio_instance=self,\n                                               close_loop_on_error=self.close_loop_on_shutdown)\n\n        print('Waiting {} seconds for the Arduino To Reset.'\n              .format(self.arduino_wait))\n        await asyncio.sleep(self.arduino_wait)\n        command = [PrivateConstants.ARE_U_THERE]\n        await self._send_command(command)\n        # provide time for the reply\n        await asyncio.sleep(.1)\n\n        print(f'Searching for correct arduino_instance_id: {self.arduino_instance_id}')\n        i_am_here = await self.serial_port.read(3)\n\n        if not i_am_here:\n            print(f'ERROR: correct arduino_instance_id not found')\n\n        print('Correct arduino_instance_id found')\n\n    async def _get_firmware_version(self):\n\"\"\"\n        This method retrieves the Arduino4Telemetrix firmware version\n\n        :returns: Firmata firmware version\n        \"\"\"\n        command = [PrivateConstants.GET_FIRMWARE_VERSION]\n        await self._send_command(command)\n        # provide time for the reply\n        await asyncio.sleep(.1)\n        firmware_version = await self.serial_port.read(5)\n\n        return firmware_version\n\n    async def analog_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (maximum 16 bits)\n\n        \"\"\"\n        value_msb = value &gt;&gt; 8\n        value_lsb = value &amp; 0xff\n        command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n        await self._send_command(command)\n\n    async def digital_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (1 or 0)\n\n        \"\"\"\n        command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n        await self._send_command(command)\n\n    async def i2c_read(self, address, register, number_of_bytes,\n                       callback, i2c_port=0,\n                       write_register=True):\n\"\"\"\n        Read the specified number of bytes from the specified register for\n        the i2c device.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command\n\n        :param i2c_port: select the default port (0) or secondary port (1)\n\n        :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('i2c_read: A Callback must be specified')\n\n        await self._i2c_read_request(address, register, number_of_bytes,\n                                     callback=callback, i2c_port=i2c_port,\n                                     write_register=write_register)\n\n    async def i2c_read_restart_transmission(self, address, register,\n                                            number_of_bytes,\n                                            callback, i2c_port=0,\n                                            write_register=True):\n\"\"\"\n        Read the specified number of bytes from the specified register for\n        the i2c device. This restarts the transmission after the read. It is\n        required for some i2c devices such as the MMA8452Q accelerometer.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register\n                                                    selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command\n\n        :param i2c_port: select the default port (0) or secondary port (1)\n\n        :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'i2c_read_restart_transmission: A Callback must be specified')\n\n        await self._i2c_read_request(address, register, number_of_bytes,\n                                     stop_transmission=False,\n                                     callback=callback, i2c_port=i2c_port,\n                                     write_register=write_register)\n\n    async def _i2c_read_request(self, address, register, number_of_bytes,\n                                stop_transmission=True, callback=None,\n                                i2c_port=0, write_register=True):\n\"\"\"\n        This method requests the read of an i2c device. Results are retrieved\n        via callback.\n\n        :param address: i2c device address\n\n        :param register: register number (or None if no register selection is needed)\n\n        :param number_of_bytes: number of bytes expected to be returned\n\n        :param stop_transmission: stop transmission after read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command.\n\n       :param i2c_port: select the default port (0) or secondary port (1)\n\n       :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 2.')\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('I2C Read: A callback function must be specified.')\n\n        if not i2c_port:\n            self.i2c_callback = callback\n        else:\n            self.i2c_callback2 = callback\n\n        if not register:\n            register = 0\n\n        if write_register:\n            write_register = 1\n        else:\n            write_register = 0\n\n        # message contains:\n        # 1. address\n        # 2. register\n        # 3. number of bytes\n        # 4. restart_transmission - True or False\n        # 5. i2c port\n        # 6. suppress write flag\n\n        command = [PrivateConstants.I2C_READ, address, register, number_of_bytes,\n                   stop_transmission, i2c_port, write_register]\n        await self._send_command(command)\n\n    async def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n        Write data to an i2c device.\n\n        :param address: i2c device address\n\n        :param i2c_port: 0= port 1, 1 = port 2\n\n        :param args: A variable number of bytes to be sent to the device\n                     passed in as a list\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n        command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n        for item in args:\n            command.append(item)\n\n        await self._send_command(command)\n\n    async def loop_back(self, start_character, callback):\n\"\"\"\n        This is a debugging method to send a character to the\n        Arduino device, and have the device loop it back.\n\n        :param start_character: The character to loop back. It should be\n                                an integer.\n\n        :param callback: Looped back character will appear in the callback method\n\n        \"\"\"\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('loop_back: A callback function must be specified.')\n        command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n        self.loop_back_callback = callback\n        await self._send_command(command)\n\n    async def set_analog_scan_interval(self, interval):\n\"\"\"\n        Set the analog scanning interval.\n\n        :param interval: value of 0 - 255 - milliseconds\n        \"\"\"\n\n        if 0 &lt;= interval &lt;= 255:\n            command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('Analog interval must be between 0 and 255')\n\n    async def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n        Set a pin as an analog input.\n\n        :param pin_number: arduino pin number\n\n        :param callback: async callback function\n\n        :param differential: difference in previous to current value before\n                             report will be generated\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for analog input pins = 3\n\n        \"\"\"\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'set_pin_mode_analog_input: A callback function must be specified.')\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG,\n                                 differential, callback=callback)\n\n    async def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n\n        Set a pin as a pwm (analog output) pin.\n\n        :param pin_number:arduino pin number\n\n        \"\"\"\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                                 callback=None)\n\n    async def set_pin_mode_digital_input(self, pin_number, callback):\n\"\"\"\n        Set a pin as a digital input.\n\n        :param pin_number: arduino pin number\n\n        :param callback: async callback function\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n\n        \"\"\"\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, differential=0,\n                                 callback=callback)\n\n    async def set_pin_mode_digital_input_pullup(self, pin_number, callback):\n\"\"\"\n        Set a pin as a digital input with pullup enabled.\n\n        :param pin_number: arduino pin number\n\n        :param callback: async callback function\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n\n        \"\"\"\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'set_pin_mode_digital_input_pullup: A callback function must be specified.')\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                                 differential=0, callback=callback)\n\n    async def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n        Set a pin as a digital output pin.\n\n        :param pin_number: arduino pin number\n        \"\"\"\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                                 callback=None)\n\n    # noinspection PyIncorrectDocstring\n    async def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n        Establish the standard Arduino i2c pins for i2c utilization.\n\n        :param i2c_port: 0 = i2c1, 1 = i2c2\n\n        NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n               2. Callbacks are set within the individual i2c read methods of this\n              API.\n\n              See i2c_read, or i2c_read_restart_transmission.\n\n        \"\"\"\n        # test for i2c port 2\n        if i2c_port:\n            # if not previously activated set it to activated\n            # and the send a begin message for this port\n            if not self.i2c_2_active:\n                self.i2c_2_active = True\n            else:\n                return\n        # port 1\n        else:\n            if not self.i2c_1_active:\n                self.i2c_1_active = True\n            else:\n                return\n\n        command = [PrivateConstants.I2C_BEGIN, i2c_port]\n        await self._send_command(command)\n\n    async def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n        :param pin: connection pin\n\n        :param callback: callback function\n\n        :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n        Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n        Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n        Temperature,\n        Time]\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n\n            if not callback:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n            if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n                self.dht_callbacks[pin] = callback\n                self.dht_count += 1\n\n                if dht_type != 22 and dht_type != 11:\n                    dht_type = 22\n\n                command = [PrivateConstants.DHT_NEW, pin, dht_type]\n                await self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The DHT feature is disabled in the server.')\n\n    async def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n        Attach a pin to a servo motor\n\n        :param pin_number: pin\n\n        :param min_pulse: minimum pulse width\n\n        :param max_pulse: maximum pulse width\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n            minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n            maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n            command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                       minv[0], minv[1], maxv[0], maxv[1]]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The SERVO feature is disabled in the server.')\n\n    async def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                                 callback):\n\"\"\"\n\n        :param trigger_pin:\n\n        :param echo_pin:\n\n        :param callback:  callback\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n            if not callback:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n            if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n                self.sonar_callbacks[trigger_pin] = callback\n                self.sonar_count += 1\n\n                command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n                await self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The SONAR feature is disabled in the server.')\n\n    async def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n        Specify the list of chip select pins.\n\n        Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n        Chip Select is any digital output capable pin.\n\n        :param chip_select_list: this is a list of pins to be used for chip select.\n                           The pins will be configured as output, and set to high\n                           ready to be used for chip select.\n                           NOTE: You must specify the chips select pins here!\n\n\n        command message: [command, number of cs pins, [cs pins...]]\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n\n            if type(chip_select_list) is not list:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('chip_select_list must be in the form of a list')\n            if not chip_select_list:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('Chip select pins were not specified')\n\n            self.spi_enabled = True\n\n            command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n            for pin in chip_select_list:\n                command.append(pin)\n                self.cs_pins_enabled.append(pin)\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The SPI feature is disabled in the server.')\n\n    # async def set_pin_mode_stepper(self, interface=1, pin1=2, pin2=3, pin3=4,\n    #                          pin4=5, enable=True):\n    #     \"\"\"\n    #     Stepper motor support is implemented as a proxy for the\n    #     the AccelStepper library for the Arduino.\n    #\n    #     This feature is compatible with the TB6600 Motor Driver\n    #\n    #     Note: It may not work for other driver types!\n    #\n    #     https://github.com/waspinator/AccelStepper\n    #\n    #     Instantiate a stepper motor.\n    #\n    #     Initialize the interface and pins for a stepper motor.\n    #\n    #     :param interface: Motor Interface Type:\n    #\n    #             1 = Stepper Driver, 2 driver pins required\n    #\n    #             2 = FULL2WIRE  2 wire stepper, 2 motor pins required\n    #\n    #             3 = FULL3WIRE 3 wire stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             4 = FULL4WIRE, 4 wire full stepper, 4 motor pins\n    #                 required\n    #\n    #             6 = HALF3WIRE, 3 wire half stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             8 = HALF4WIRE, 4 wire half stepper, 4 motor pins required\n    #\n    #     :param pin1: Arduino digital pin number for motor pin 1\n    #\n    #     :param pin2: Arduino digital pin number for motor pin 2\n    #\n    #     :param pin3: Arduino digital pin number for motor pin 3\n    #\n    #     :param pin4: Arduino digital pin number for motor pin 4\n    #\n    #     :param enable: If this is true, the output pins at construction time.\n    #\n    #     :return: Motor Reference number\n    #     \"\"\"\n    #     if self.reported_features &amp; PrivateConstants.STEPPERS_FEATURE:\n    #\n    #         if self.number_of_steppers == self.max_number_of_steppers:\n    #             if self.shutdown_on_exception:\n    #                 await self.shutdown()\n    #             raise RuntimeError('Maximum number of steppers has already been assigned')\n    #\n    #         if interface not in self.valid_stepper_interfaces:\n    #             if self.shutdown_on_exception:\n    #                 await self.shutdown()\n    #             raise RuntimeError('Invalid stepper interface')\n    #\n    #         self.number_of_steppers += 1\n    #\n    #         motor_id = self.next_stepper_assigned\n    #         self.next_stepper_assigned += 1\n    #         self.stepper_info_list[motor_id]['instance'] = True\n    #\n    #         # build message and send message to server\n    #         command = [PrivateConstants.SET_PIN_MODE_STEPPER, motor_id, interface, pin1,\n    #                    pin2, pin3, pin4, enable]\n    #         await self._send_command(command)\n    #\n    #         # return motor id\n    #         return motor_id\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'The Stepper feature is disabled in the server.')\n\n    async def sonar_disable(self):\n\"\"\"\n        Disable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_DISABLE]\n        await self._send_command(command)\n\n    async def sonar_enable(self):\n\"\"\"\n        Enable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_ENABLE]\n        await self._send_command(command)\n\n    async def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n        Control an SPI chip select line\n        :param chip_select_pin: pin connected to CS\n\n        :param select: 0=select, 1=deselect\n        \"\"\"\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n        if chip_select_pin not in self.cs_pins_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n        command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n        await self._send_command(command)\n\n    async def spi_read_blocking(self, chip_select, register_selection,\n                                number_of_bytes_to_read,\n                          call_back=None):\n\"\"\"\n        Read the specified number of bytes from the specified SPI port and\n        call the callback function with the reported data.\n\n        :param chip_select: chip select pin\n\n        :param register_selection: Register to be selected for read.\n\n        :param number_of_bytes_to_read: Number of bytes to read\n\n        :param call_back: Required callback function to report spi data as a\n                   result of read command\n\n\n        callback returns a data list:\n            [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n             data bytes, time-stamp]\n        SPI_READ_REPORT = 13\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n        if not call_back:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n        self.spi_callback = call_back\n\n        command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n                   number_of_bytes_to_read,\n                   register_selection]\n\n        await self._send_command(command)\n\n    async def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n        Configure how the SPI serializes and de-serializes data on the wire.\n\n        See Arduino SPI reference materials for details.\n\n        :param clock_divisor: 1 - 255\n\n        :param bit_order:\n\n                            LSBFIRST = 0\n\n                            MSBFIRST = 1 (default)\n\n        :param data_mode:\n\n                            SPI_MODE0 = 0x00 (default)\n\n                            SPI_MODE1  = 1\n\n                            SPI_MODE2 = 2\n\n                            SPI_MODE3 = 3\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n        if not 0 &lt; clock_divisor &lt;= 255:\n            raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n        if bit_order not in [0, 1]:\n            raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n        if data_mode not in [0, 1, 2, 3]:\n            raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n        command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n                   data_mode]\n        await self._send_command(command)\n\n    async def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n        Write a list of bytes to the SPI device.\n\n        :param chip_select: chip select pin\n\n        :param bytes_to_write: A list of bytes to write. This must\n                                be in the form of a list.\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n        if type(bytes_to_write) is not list:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n        command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n        for data in bytes_to_write:\n            command.append(data)\n\n        await self._send_command(command)\n\n    # async def set_pin_mode_one_wire(self, pin):\n    #     \"\"\"\n    #     Initialize the one wire serial bus.\n    #\n    #     :param pin: Data pin connected to the OneWire device\n    #     \"\"\"\n    #     self.onewire_enabled = True\n    #     command = [PrivateConstants.ONE_WIRE_INIT, pin]\n    #     await self._send_command(command)\n    #\n    # async def onewire_reset(self, callback=None):\n    #     \"\"\"\n    #     Reset the onewire device\n    #\n    #     :param callback: required  function to report reset result\n    #\n    #     callback returns a list:\n    #     [ReportType = 14, Report Subtype = 25, reset result byte,\n    #                     timestamp]\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_reset: OneWire interface is not enabled.')\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_reset: A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_RESET]\n    #     await self._send_command(command)\n    #\n    # async def onewire_select(self, device_address):\n    #     \"\"\"\n    #     Select a device based on its address\n    #     :param device_address: A bytearray of 8 bytes\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_select: OneWire interface is not enabled.')\n    #\n    #     if type(device_address) is not list:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #\n    #     if len(device_address) != 8:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #     command = [PrivateConstants.ONE_WIRE_SELECT]\n    #     for data in device_address:\n    #         command.append(data)\n    #     await self._send_command(command)\n    #\n    # async def onewire_skip(self):\n    #     \"\"\"\n    #     Skip the device selection. This only works if you have a\n    #     single device, but you can avoid searching and use this to\n    #     immediately access your device.\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_skip: OneWire interface is not enabled.')\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SKIP]\n    #     await self._send_command(command)\n    #\n    # async def onewire_write(self, data, power=0):\n    #     \"\"\"\n    #     Write a byte to the onewire device. If 'power' is one\n    #     then the wire is held high at the end for\n    #     parasitically powered devices. You\n    #     are responsible for eventually de-powering it by calling\n    #     another read or write.\n    #\n    #     :param data: byte to write.\n    #     :param power: power control (see above)\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_write: OneWire interface is not enabled.')\n    #     if 0 &lt; data &lt; 255:\n    #         command = [PrivateConstants.ONE_WIRE_WRITE, data, power]\n    #         await self._send_command(command)\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_write: Data must be no larger than 255')\n    #\n    # async def onewire_read(self, callback=None):\n    #     \"\"\"\n    #     Read a byte from the onewire device\n    #     :param callback: required  function to report onewire data as a\n    #                result of read command\n    #\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_READ=29, data byte, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_read: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_READ]\n    #     await self._send_command(command)\n    #\n    # async def onewire_reset_search(self):\n    #     \"\"\"\n    #     Begin a new search. The next use of search will begin at the first device\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_reset_search: OneWire interface is not '\n    #                            f'enabled.')\n    #     else:\n    #         command = [PrivateConstants.ONE_WIRE_RESET_SEARCH]\n    #         await self._send_command(command)\n    #\n    # async def onewire_search(self, callback=None):\n    #     \"\"\"\n    #     Search for the next device. The device address will returned in the callback.\n    #     If a device is found, the 8 byte address is contained in the callback.\n    #     If no more devices are found, the address returned contains all elements set\n    #     to 0xff.\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_SEARCH=31, 8 byte address, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_search: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SEARCH]\n    #     await self._send_command(command)\n    #\n    # async def onewire_crc8(self, address_list, callback=None):\n    #     \"\"\"\n    #     Compute a CRC check on an array of data.\n    #     :param address_list:\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_CRC8=32, CRC, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_crc8: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_crc8 A Callback must be specified')\n    #\n    #     if type(address_list) is not list:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_crc8: address list must be a list.')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     address_length = len(address_list)\n    #\n    #     command = [PrivateConstants.ONE_WIRE_CRC8, address_length - 1]\n    #\n    #     for data in address_list:\n    #         command.append(data)\n    #\n    #     await self._send_command(command)\n\n    async def _set_pin_mode(self, pin_number, pin_state, differential, callback):\n\"\"\"\n        A private method to set the various pin modes.\n\n        :param pin_number: arduino pin number\n\n        :param pin_state: INPUT/OUTPUT/ANALOG/PWM/PULLUP - for SERVO use\n                          servo_config()\n                          For DHT   use: set_pin_mode_dht\n\n        :param differential: for analog inputs - threshold\n                             value to be achieved for report to\n                             be generated\n\n        :param callback: A reference to an async call back function to be\n                         called when pin data value changes\n\n        \"\"\"\n        if not callback and pin_state != PrivateConstants.AT_OUTPUT:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('_set_pin_mode: A Callback must be specified')\n        else:\n            if pin_state == PrivateConstants.AT_INPUT:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_INPUT, 1]\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_INPUT_PULLUP:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_INPUT_PULLUP, 1]\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_ANALOG:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_ANALOG,\n                           differential &gt;&gt; 8, differential &amp; 0xff, 1]\n                self.analog_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_OUTPUT:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_OUTPUT, 1]\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('Unknown pin state')\n\n        if command:\n            await self._send_command(command)\n\n        await asyncio.sleep(.05)\n\n    async def servo_detach(self, pin_number):\n\"\"\"\n        Detach a servo for reuse\n        :param pin_number: attached pin\n        \"\"\"\n        command = [PrivateConstants.SERVO_DETACH, pin_number]\n        await self._send_command(command)\n\n    async def servo_write(self, pin_number, angle):\n\"\"\"\n\n        Set a servo attached to a pin to a given angle.\n\n        :param pin_number: pin\n\n        :param angle: angle (0-180)\n\n        \"\"\"\n        command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n        await self._send_command(command)\n\n    # async def stepper_move_to(self, motor_id, position):\n    #     \"\"\"\n    #     Set an absolution target position. If position is positive, the movement is\n    #     clockwise, else it is counter-clockwise.\n    #\n    #     The run() function (below) will try to move the motor (at most one step per call)\n    #     from the current position to the target position set by the most\n    #     recent call to this function. Caution: moveTo() also recalculates the\n    #     speed for the next step.\n    #     If you are trying to use constant speed movements, you should call setSpeed()\n    #     after calling moveTo().\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param position: target position. Maximum value is 32 bits.\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_move_to: Invalid motor_id.')\n    #\n    #     if position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #     position = abs(position)\n    #\n    #     position_bytes = list(position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE_TO, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_move(self, motor_id, relative_position):\n    #     \"\"\"\n    #     Set the target position relative to the current position.\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param relative_position: The desired position relative to the current\n    #                               position. Negative is anticlockwise from\n    #                               the current position. Maximum value is 32 bits.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_move: Invalid motor_id.')\n    #\n    #     if relative_position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #     position = abs(relative_position)\n    #\n    #     position_bytes = list(position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #     await self._send_command(command)\n    #\n    # async def stepper_run(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     This method steps the selected motor based on the current speed.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run: A motion complete callback must be '\n    #                            'specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_run_speed(self, motor_id):\n    #     \"\"\"\n    #     This method steps the selected motor based at a constant speed as set by the most\n    #     recent call to stepper_set_max_speed(). The motor will run continuously.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run_speed: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_max_speed(self, motor_id, max_speed):\n    #     \"\"\"\n    #     Sets the maximum permitted speed. The stepper_run() function will accelerate\n    #     up to the speed set by this function.\n    #\n    #     Caution: the maximum speed achievable depends on your processor and clock speed.\n    #     The default maxSpeed is 1 step per second.\n    #\n    #      Caution: Speeds that exceed the maximum speed supported by the processor may\n    #               result in non-linear accelerations and decelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param max_speed: 1 - 1000\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Invalid motor_id.')\n    #\n    #     if not 1 &lt; max_speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Speed range is 1 - 1000.')\n    #\n    #     self.stepper_info_list[motor_id]['max_speed'] = max_speed\n    #     max_speed_msb = (max_speed &amp; 0xff00) &gt;&gt; 8\n    #     max_speed_lsb = max_speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MAX_SPEED, motor_id, max_speed_msb,\n    #                max_speed_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_max_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the maximum speed configured for this stepper\n    #     that was previously set by stepper_set_max_speed()\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :return: The currently configured maximum speed.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_max_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['max_speed']\n    #\n    # async def stepper_set_acceleration(self, motor_id, acceleration):\n    #     \"\"\"\n    #     Sets the acceleration/deceleration rate.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param acceleration: The desired acceleration in steps per second\n    #                          per second. Must be &gt; 0.0. This is an\n    #                          expensive call since it requires a square\n    #                          root to be calculated on the server.\n    #                          Dont call more often than needed.\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Invalid motor_id.')\n    #\n    #     if not 1 &lt; acceleration &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Acceleration range is 1 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['acceleration'] = acceleration\n    #\n    #     max_accel_msb = acceleration &gt;&gt; 8\n    #     max_accel_lsb = acceleration &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_ACCELERATION, motor_id, max_accel_msb,\n    #                max_accel_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_speed(self, motor_id, speed):\n    #     \"\"\"\n    #     Sets the desired constant speed for use with stepper_run_speed().\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param speed: 0 - 1000 The desired constant speed in steps per\n    #                   second. Positive is clockwise. Speeds of more than 1000 steps per\n    #                   second are unreliable. Speed accuracy depends on the Arduino\n    #                   crystal. Jitter depends on how frequently you call the\n    #                   stepper_run_speed() method.\n    #                   The speed will be limited by the current value of\n    #                   stepper_set_max_speed().\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Invalid motor_id.')\n    #\n    #     if not 0 &lt; speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Speed range is 0 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['speed'] = speed\n    #\n    #     speed_msb = speed &gt;&gt; 8\n    #     speed_lsb = speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_SPEED, motor_id, speed_msb, speed_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the  most recently set speed.\n    #     that was previously set by stepper_set_speed();\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['speed']\n    #\n    # async def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback):\n    #     \"\"\"\n    #     Request the distance from the current position to the target position\n    #     from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param distance_to_go_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=15, motor_id, distance in steps, time_stamp]\n    #\n    #     A positive distance is clockwise from the current position.\n    #\n    #     \"\"\"\n    #     if not distance_to_go_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go: Invalid motor_id.')\n    #     self.stepper_info_list[motor_id][\n    #         'distance_to_go_callback'] = distance_to_go_callback\n    #     command = [PrivateConstants.STEPPER_GET_DISTANCE_TO_GO, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_target_position(self, motor_id, target_callback):\n    #     \"\"\"\n    #     Request the most recently set target position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param target_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=16, motor_id, target position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #\n    #     \"\"\"\n    #     if not target_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_target_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_target_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id][\n    #         'target_position_callback'] = target_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_TARGET_POSITION, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_current_position(self, motor_id, current_position_callback):\n    #     \"\"\"\n    #     Request the current motor position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param current_position_callback: required callback function to receive report\n    #\n    #     :return: The current motor position returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=17, motor_id, current position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #     \"\"\"\n    #     if not current_position_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_current_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_current_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['current_position_callback'] = current_position_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_CURRENT_POSITION, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_current_position(self, motor_id, position):\n    #     \"\"\"\n    #     Resets the current position of the motor, so that wherever the motor\n    #     happens to be right now is considered to be the new 0 position. Useful\n    #     for setting a zero position on a stepper after an initial hardware\n    #     positioning move.\n    #\n    #     Has the side effect of setting the current motor speed to 0.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     :param position: Position in steps. This is a 32 bit value\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_current_position: Invalid motor_id.')\n    #     position_bytes = list(position.to_bytes(4, 'big',  signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_SET_CURRENT_POSITION, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     await self._send_command(command)\n    #\n    # async def stepper_run_speed_to_position(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     Runs the motor at the currently selected speed until the target position is\n    #     reached.\n    #\n    #     Does not implement accelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: A motion complete '\n    #                            'callback must be '\n    #                            'specified.')\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED_TO_POSITION, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_stop(self, motor_id):\n    #     \"\"\"\n    #     Sets a new target position that causes the stepper\n    #     to stop as quickly as possible, using the current speed and\n    #     acceleration parameters.\n    #\n    #     :param motor_id:  0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_stop: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_STOP, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_disable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Disable motor pin outputs by setting them all LOW.\n    #\n    #     Depending on the design of your electronics this may turn off\n    #     the power to the motor coils, saving power.\n    #\n    #     This is useful to support Arduino low power modes: disable the outputs\n    #     during sleep and then re-enable with enableOutputs() before stepping\n    #     again.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and clears\n    #     the pin to disabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_disable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_DISABLE_OUTPUTS, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_enable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Enable motor pin outputs by setting the motor pins to OUTPUT\n    #     mode.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and sets\n    #     the pin to enabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_enable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_ENABLE_OUTPUTS, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_min_pulse_width(self, motor_id, minimum_width):\n    #     \"\"\"\n    #     Sets the minimum pulse width allowed by the stepper driver.\n    #\n    #     The minimum practical pulse width is approximately 20 microseconds.\n    #\n    #     Times less than 20 microseconds will usually result in 20 microseconds or so.\n    #\n    #     :param motor_id: 0 -3\n    #\n    #     :param minimum_width: A 16 bit unsigned value expressed in microseconds.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Invalid motor_id.')\n    #\n    #     if not 0 &lt; minimum_width &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Pulse width range = '\n    #                            '0-0xffff.')\n    #\n    #     width_msb = minimum_width &gt;&gt; 8\n    #     width_lsb = minimum_width &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MINIMUM_PULSE_WIDTH, motor_id, width_msb,\n    #                width_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_enable_pin(self, motor_id, pin=0xff):\n    #     \"\"\"\n    #     Sets the enable pin number for stepper drivers.\n    #     0xFF indicates unused (default).\n    #\n    #     Otherwise, if a pin is set, the pin will be turned on when\n    #     enableOutputs() is called and switched off when disableOutputs()\n    #     is called.\n    #\n    #     :param motor_id: 0 - 4\n    #     :param pin: 0-0xff\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Invalid motor_id.')\n    #\n    #     if not 0 &lt; pin &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Pulse width range = '\n    #                            '0-0xff.')\n    #     command = [PrivateConstants.STEPPER_SET_ENABLE_PIN, motor_id, pin]\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False,\n    #                                 enable=False):\n    #     \"\"\"\n    #     Sets the inversion for stepper driver pins.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param direction: True=inverted or False\n    #\n    #     :param step: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_3_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_3_PINS_INVERTED, motor_id, direction,\n    #                step, enable]\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False,\n    #                                   pin2_invert=False,\n    #                                 pin3_invert=False, pin4_invert=False, enable=False):\n    #     \"\"\"\n    #     Sets the inversion for 2, 3 and 4 wire stepper pins\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param pin1_invert: True=inverted or False\n    #\n    #     :param pin2_invert: True=inverted or False\n    #\n    #     :param pin3_invert: True=inverted or False\n    #\n    #     :param pin4_invert: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_4_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_4_PINS_INVERTED, motor_id, pin1_invert,\n    #                pin2_invert, pin3_invert, pin4_invert, enable]\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_is_running(self, motor_id, callback):\n    #     \"\"\"\n    #     Checks to see if the motor is currently running to a target.\n    #\n    #     Callback return True if the speed is not zero or not at the target position.\n    #\n    #     :param motor_id: 0-4\n    #\n    #     :param callback: required callback function to receive report\n    #\n    #     :return: The current running state returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp]\n    #     \"\"\"\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_is_running: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_is_running: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['is_running_callback'] = callback\n    #\n    #     command = [PrivateConstants.STEPPER_IS_RUNNING, motor_id]\n    #     await self._send_command(command)\n\n    async def shutdown(self):\n\"\"\"\n        This method attempts an orderly shutdown\n        If any exceptions are thrown, they are ignored.\n\n        \"\"\"\n        self.shutdown_flag = True\n\n        if self.hard_reset_on_shutdown:\n            await self.r4_hard_reset()\n        # stop all reporting - both analog and digital\n        else:\n            try:\n                command = [PrivateConstants.STOP_ALL_REPORTS]\n                await self._send_command(command)\n\n                await asyncio.sleep(.5)\n                await self.serial_port.reset_input_buffer()\n                await self.serial_port.close()\n                if self.close_loop_on_shutdown:\n                    self.loop.stop()\n            except (RuntimeError, SerialException):\n                pass\n\n    async def r4_hard_reset(self):\n\"\"\"\n        Place the r4 into hard reset\n        \"\"\"\n        command = [PrivateConstants.BOARD_HARD_RESET, 1]\n        await self._send_command(command)\n\n    async def disable_all_reporting(self):\n\"\"\"\n        Disable reporting for all digital and analog input pins\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DISABLE_ALL, 0]\n        await self._send_command(command)\n\n    async def disable_analog_reporting(self, pin):\n\"\"\"\n        Disables analog reporting for a single analog pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n        await self._send_command(command)\n\n    async def disable_digital_reporting(self, pin):\n\"\"\"\n        Disables digital reporting for a single digital pin\n\n\n        :param pin: pin number\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n        await self._send_command(command)\n\n    async def enable_analog_reporting(self, pin):\n\"\"\"\n        Enables analog reporting for the specified pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n        await self._send_command(command)\n\n    async def enable_digital_reporting(self, pin):\n\"\"\"\n        Enable reporting on the specified digital pin.\n\n        :param pin: Pin number.\n        \"\"\"\n\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n        await self._send_command(command)\n\n    async def _arduino_report_dispatcher(self):\n\"\"\"\n        This is a private method.\n        It continually accepts and interprets data coming from Telemetrix4Arduino,and then\n        dispatches the correct handler to process the data.\n\n        It first receives the length of the packet, and then reads in the rest of the\n        packet. A packet consists of a length, report identifier and then the report data.\n        Using the report identifier, the report handler is fetched from report_dispatch.\n\n        :returns: This method never returns\n        \"\"\"\n\n        while True:\n            if self.shutdown_flag:\n                break\n            try:\n                packet_length = await self.serial_port.read()\n            except TypeError:\n                continue\n\n            # get the rest of the packet\n            packet = await self.serial_port.read(packet_length)\n\n            report = packet[0]\n            # print(report)\n            # handle all other messages by looking them up in the\n            # command dictionary\n\n            await self.report_dispatch[report](packet[1:])\n            await asyncio.sleep(self.sleep_tune)\n\n'''\n    Report message handlers\n    '''\n\n    async def _report_loop_data(self, data):\n\"\"\"\n        Print data that was looped back\n\n        :param data: byte of loop back data\n        \"\"\"\n        if self.loop_back_callback:\n            await self.loop_back_callback(data)\n\n    async def _spi_report(self, report):\n\n        cb_list = [PrivateConstants.SPI_REPORT, report[0]] + report[1:]\n\n        cb_list.append(time.time())\n\n        await self.spi_callback(cb_list)\n\n    async def _onewire_report(self, report):\n        cb_list = [PrivateConstants.ONE_WIRE_REPORT, report[0]] + report[1:]\n        cb_list.append(time.time())\n        await self.onewire_callback(cb_list)\n\n    async def _report_debug_data(self, data):\n\"\"\"\n        Print debug data sent from Arduino\n\n        :param data: data[0] is a byte followed by 2\n                     bytes that comprise an integer\n        \"\"\"\n        value = (data[1] &lt;&lt; 8) + data[2]\n        print(f'DEBUG ID: {data[0]} Value: {value}')\n\n    async def _analog_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for analog messages.\n\n        :param data: message data\n\n        \"\"\"\n        pin = data[0]\n        value = (data[1] &lt;&lt; 8) + data[2]\n\n        time_stamp = time.time()\n\n        # append pin number, pin value, and pin type to return value and return as a list\n        message = [PrivateConstants.AT_ANALOG, pin, value, time_stamp]\n\n        await self.analog_callbacks[pin](message)\n\n    async def _dht_report(self, data):\n\"\"\"\n        This is a private message handler for dht reports\n\n        :param data:            data[0] = report error return\n                                    No Errors = 0\n\n                                    Checksum Error = 1\n\n                                    Timeout Error = 2\n\n                                    Invalid Value = 999\n\n                                data[1] = pin number\n\n                                data[2] = dht type 11 or 22\n\n                                data[3] = humidity positivity flag\n\n                                data[4] = temperature positivity value\n\n                                data[5] = humidity integer\n\n                                data[6] = humidity fractional value\n\n                                data[7] = temperature integer\n\n                                data[8] = temperature fractional value\n        \"\"\"\n        if data[0]:  # DHT_ERROR\n            # error report\n            # data[0] = report sub type, data[1] = pin, data[2] = error message\n            if self.dht_callbacks[data[1]]:\n                # Callback 0=DHT REPORT, DHT_ERROR, PIN, Time\n                message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                           time.time()]\n                await self.dht_callbacks[data[1]](message)\n        else:\n            # got valid data DHT_DATA\n            f_humidity = float(data[5] + data[6] / 100)\n            if data[3]:\n                f_humidity *= -1.0\n            f_temperature = float(data[7] + data[8] / 100)\n            if data[4]:\n                f_temperature *= -1.0\n            message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                       f_humidity, f_temperature, time.time()]\n\n            await self.dht_callbacks[data[1]](message)\n\n    async def _digital_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for Digital Messages.\n\n        :param data: digital message\n\n        \"\"\"\n        pin = data[0]\n        value = data[1]\n\n        time_stamp = time.time()\n        if self.digital_callbacks[pin]:\n            message = [PrivateConstants.DIGITAL_REPORT, pin, value, time_stamp]\n            await self.digital_callbacks[pin](message)\n\n    async def _servo_unavailable(self, report):\n\"\"\"\n        Message if no servos are available for use.\n\n        :param report: pin number\n        \"\"\"\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            f'Servo Attach For Pin {report[0]} Failed: No Available Servos')\n\n    async def _i2c_read_report(self, data):\n\"\"\"\n        Execute callback for i2c reads.\n\n        :param data: [I2C_READ_REPORT, i2c_port, number of bytes read, address, register, bytes read..., time-stamp]\n        \"\"\"\n\n        # we receive [# data bytes, address, register, data bytes]\n        # number of bytes of data returned\n\n        # data[0] = number of bytes\n        # data[1] = i2c_port\n        # data[2] = number of bytes returned\n        # data[3] = address\n        # data[4] = register\n        # data[5] ... all the data bytes\n\n        cb_list = [PrivateConstants.I2C_READ_REPORT, data[0], data[1]] + data[2:]\n        cb_list.append(time.time())\n\n        if cb_list[1]:\n            await self.i2c_callback2(cb_list)\n        else:\n            await self.i2c_callback(cb_list)\n\n    async def _i2c_too_few(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            f'i2c too few bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    async def _i2c_too_many(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            f'i2c too many bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    async def _sonar_distance_report(self, report):\n\"\"\"\n\n        :param report: data[0] = trigger pin, data[1] and data[2] = distance\n\n        callback report format: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n        \"\"\"\n\n        # get callback from pin number\n        cb = self.sonar_callbacks[report[0]]\n\n        # build report data\n        cb_list = [PrivateConstants.SONAR_DISTANCE, report[0],\n                   ((report[1] &lt;&lt; 8) + report[2]), time.time()]\n\n        await cb(cb_list)\n\n    async def _stepper_distance_to_go_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper distance to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = steps MSB, data[2] = steps byte 1,\n    #                              data[3] = steps bytes 2, data[4] = steps LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_DISTANCE_TO_GO, motor_id\n    #                              steps, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['distance_to_go_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     steps = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     num_steps = int.from_bytes(steps, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_DISTANCE_TO_GO, report[0], num_steps,\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n    #\n\n    async def _stepper_target_position_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report stepper target position to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = target position MSB,\n    #                    data[2] = target position byte MSB+1\n    #                    data[3] = target position byte MSB+2\n    #                    data[4] = target position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_TARGET_POSITION, motor_id\n    #                              target_position, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['target_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     target = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     target_position = int.from_bytes(target, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_TARGET_POSITION, report[0], target_position,\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n    #\n    async def _stepper_current_position_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report stepper current position.\n    #\n    #     :param report: data[0] = motor_id, data[1] = current position MSB,\n    #                    data[2] = current position byte MSB+1\n    #                    data[3] = current position byte MSB+2\n    #                    data[4] = current position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_CURRENT_POSITION, motor_id\n    #                              current_position, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['current_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     position = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     current_position = int.from_bytes(position, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_CURRENT_POSITION, report[0], current_position,\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n    #\n    async def _stepper_is_running_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report if the motor is currently running\n    #\n    #     :param report: data[0] = motor_id, True if motor is running or False if it is not.\n    #\n    #     callback report format: [18, motor_id,\n    #                              running_state, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['is_running_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUNNING_REPORT, report[0], time.time()]\n    #\n    #     await cb(cb_list)\n    #\n    async def _stepper_run_complete_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     The motor completed it motion\n    #\n    #     :param report: data[0] = motor_id\n    #\n    #     callback report format: [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, motor_id,\n    #                              time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['motion_complete_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, report[0],\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n\n    async def _features_report(self, report):\n        self.reported_features = report[0]\n\n    async def _send_command(self, command):\n\"\"\"\n        This is a private utility method.\n\n\n        :param command:  command data in the form of a list\n\n        :returns: number of bytes sent\n        \"\"\"\n        # the length of the list is added at the head\n        command.insert(0, len(command))\n        # print(command)\n        send_message = bytes(command)\n\n        await self.serial_port.write(send_message)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.__init__","title":"<code>__init__(com_port=None, arduino_instance_id=1, arduino_wait=1, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True, close_loop_on_shutdown=True, hard_reset_on_shutdown=True)</code>","text":"<p>If you have a single Arduino connected to your computer,  then you may accept all the default values.</p> <p>Otherwise, specify a unique arduino_instance id for each board in use.</p> <p>:param com_port: e.g. COM3 or /dev/ttyACM0.</p> <p>:param arduino_instance_id: Must match value in the Telemetrix4Arduino sketch</p> <p>:param arduino_wait: Amount of time to wait for an Arduino to                       fully reset itself.</p> <p>:param sleep_tune: A tuning parameter (typically not changed by user)</p> <p>:param autostart: If you wish to call the start method within                    your application, then set this to False.</p> <p>:param loop: optional user provided event loop</p> <p>:param shutdown_on_exception: call shutdown before raising                                a RunTimeError exception, or                                receiving a KeyboardInterrupt exception</p> <p>:param close_loop_on_shutdown: stop and close the event loop loop                                 when a shutdown is called or a serial                                 error occurs</p> <p>:param hard_reset_on_shutdown: reset the board on shutdown</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>def __init__(self, com_port=None,\n             arduino_instance_id=1, arduino_wait=1,\n             sleep_tune=0.0001, autostart=True,\n             loop=None, shutdown_on_exception=True,\n             close_loop_on_shutdown=True, hard_reset_on_shutdown=True):\n\n\"\"\"\n    If you have a single Arduino connected to your computer,\n    then you may accept all the default values.\n\n    Otherwise, specify a unique arduino_instance id for each board in use.\n\n    :param com_port: e.g. COM3 or /dev/ttyACM0.\n\n    :param arduino_instance_id: Must match value in the Telemetrix4Arduino sketch\n\n    :param arduino_wait: Amount of time to wait for an Arduino to\n                         fully reset itself.\n\n    :param sleep_tune: A tuning parameter (typically not changed by user)\n\n    :param autostart: If you wish to call the start method within\n                      your application, then set this to False.\n\n    :param loop: optional user provided event loop\n\n    :param shutdown_on_exception: call shutdown before raising\n                                  a RunTimeError exception, or\n                                  receiving a KeyboardInterrupt exception\n\n    :param close_loop_on_shutdown: stop and close the event loop loop\n                                   when a shutdown is called or a serial\n                                   error occurs\n\n   :param hard_reset_on_shutdown: reset the board on shutdown\n\n    \"\"\"\n    # check to make sure that Python interpreter is version 3.8.3 or greater\n    python_version = sys.version_info\n    if python_version[0] &gt;= 3:\n        if python_version[1] &gt;= 8:\n            if python_version[2] &gt;= 3:\n                pass\n        else:\n            raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                               \"required for use of this program.\")\n\n    # save input parameters\n    self.com_port = com_port\n    self.arduino_instance_id = arduino_instance_id\n    self.arduino_wait = arduino_wait\n    self.sleep_tune = sleep_tune\n    self.autostart = autostart\n    self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n    # set the event loop\n    if loop is None:\n        self.loop = asyncio.get_event_loop()\n    else:\n        self.loop = loop\n\n    self.shutdown_on_exception = shutdown_on_exception\n    self.close_loop_on_shutdown = close_loop_on_shutdown\n\n    # dictionaries to store the callbacks for each pin\n    self.analog_callbacks = {}\n\n    self.digital_callbacks = {}\n\n    self.i2c_callback = None\n    self.i2c_callback2 = None\n\n    self.i2c_1_active = False\n    self.i2c_2_active = False\n\n    self.spi_callback = None\n\n    self.onewire_callback = None\n\n    # debug loopback callback method\n    self.loop_back_callback = None\n\n    # the trigger pin will be the key to retrieve\n    # the callback for a specific HC-SR04\n    self.sonar_callbacks = {}\n\n    self.sonar_count = 0\n\n    self.dht_callbacks = {}\n\n    self.dht_count = 0\n\n    # serial port in use\n    self.serial_port = None\n\n    # generic asyncio task holder\n    self.the_task = None\n\n    # flag to indicate we are in shutdown mode\n    self.shutdown_flag = False\n\n    self.report_dispatch = {}\n\n    # reported features\n    self.reported_features = 0\n\n    # To add a command to the command dispatch table, append here.\n    self.report_dispatch.update(\n        {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n    self.report_dispatch.update(\n        {PrivateConstants.ANALOG_REPORT: self._analog_message})\n    self.report_dispatch.update(\n        {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n    self.report_dispatch.update(\n        {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n    self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n    self.report_dispatch.update(\n        {PrivateConstants.SPI_REPORT: self._spi_report})\n    self.report_dispatch.update(\n        {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_CURRENT_POSITION:\n             self._stepper_current_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUNNING_REPORT:\n             self._stepper_is_running_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n             self._stepper_run_complete_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.FEATURES:\n             self._features_report})\n\n    # dictionaries to store the callbacks for each pin\n    self.analog_callbacks = {}\n\n    self.digital_callbacks = {}\n\n    self.i2c_callback = None\n    self.i2c_callback2 = None\n\n    self.i2c_1_active = False\n    self.i2c_2_active = False\n\n    self.spi_callback = None\n\n    self.onewire_callback = None\n\n    self.cs_pins_enabled = []\n\n    # flag to indicate if spi is initialized\n    self.spi_enabled = False\n\n    # flag to indicate if onewire is initialized\n    self.onewire_enabled = False\n\n    # the trigger pin will be the key to retrieve\n    # the callback for a specific HC-SR04\n    self.sonar_callbacks = {}\n\n    self.sonar_count = 0\n\n    self.dht_callbacks = {}\n\n    # # stepper motor variables\n    #\n    # # updated when a new motor is added\n    # self.next_stepper_assigned = 0\n    #\n    # # valid list of stepper motor interface types\n    # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n    #\n    # # maximum number of steppers supported\n    # self.max_number_of_steppers = 4\n    #\n    # # number of steppers created - not to exceed the maximum\n    # self.number_of_steppers = 0\n    #\n    # # dictionary to hold stepper motor information\n    # self.stepper_info = {'instance': False, 'is_running': None,\n    #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n    #                      'distance_to_go_callback': None,\n    #                      'target_position_callback': None,\n    #                      'current_position_callback': None,\n    #                      'is_running_callback': None,\n    #                      'motion_complete_callback': None,\n    #                      'acceleration_callback': None}\n    #\n    # # build a list of stepper motor info items\n    # self.stepper_info_list = []\n    # # a list of dictionaries to hold stepper information\n    # for motor in range(self.max_number_of_steppers):\n    #     self.stepper_info_list.append(self.stepper_info.copy())\n\n    print(f'telemetrix_uno_r4_minima_aio Version:'\n          f' {PrivateConstants.TELEMETRIX_AIO_VERSION}')\n    print(f'Copyright (c) 2023 Alan Yorinks All rights reserved.\\n')\n\n    if autostart:\n        self.loop.run_until_complete(self.start_aio())\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.analog_write","title":"<code>analog_write(pin, value)</code>  <code>async</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (maximum 16 bits)</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def analog_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (maximum 16 bits)\n\n    \"\"\"\n    value_msb = value &gt;&gt; 8\n    value_lsb = value &amp; 0xff\n    command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.digital_write","title":"<code>digital_write(pin, value)</code>  <code>async</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (1 or 0)</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def digital_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (1 or 0)\n\n    \"\"\"\n    command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.disable_all_reporting","title":"<code>disable_all_reporting()</code>  <code>async</code>","text":"<p>Disable reporting for all digital and analog input pins</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def disable_all_reporting(self):\n\"\"\"\n    Disable reporting for all digital and analog input pins\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DISABLE_ALL, 0]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.disable_analog_reporting","title":"<code>disable_analog_reporting(pin)</code>  <code>async</code>","text":"<p>Disables analog reporting for a single analog pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def disable_analog_reporting(self, pin):\n\"\"\"\n    Disables analog reporting for a single analog pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.disable_digital_reporting","title":"<code>disable_digital_reporting(pin)</code>  <code>async</code>","text":"<p>Disables digital reporting for a single digital pin</p> <p>:param pin: pin number</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def disable_digital_reporting(self, pin):\n\"\"\"\n    Disables digital reporting for a single digital pin\n\n\n    :param pin: pin number\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.enable_analog_reporting","title":"<code>enable_analog_reporting(pin)</code>  <code>async</code>","text":"<p>Enables analog reporting for the specified pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def enable_analog_reporting(self, pin):\n\"\"\"\n    Enables analog reporting for the specified pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.enable_digital_reporting","title":"<code>enable_digital_reporting(pin)</code>  <code>async</code>","text":"<p>Enable reporting on the specified digital pin.</p> <p>:param pin: Pin number.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def enable_digital_reporting(self, pin):\n\"\"\"\n    Enable reporting on the specified digital pin.\n\n    :param pin: Pin number.\n    \"\"\"\n\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.get_event_loop","title":"<code>get_event_loop()</code>  <code>async</code>","text":"<p>Return the currently active asyncio event loop</p> <p>:return: Active event loop</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def get_event_loop(self):\n\"\"\"\n    Return the currently active asyncio event loop\n\n    :return: Active event loop\n\n    \"\"\"\n    return self.loop\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.i2c_read","title":"<code>i2c_read(address, register, number_of_bytes, callback, i2c_port=0, write_register=True)</code>  <code>async</code>","text":"<p>Read the specified number of bytes from the specified register for the i2c device.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report i2c data as a            result of read command</p> <p>:param i2c_port: select the default port (0) or secondary port (1)</p> <p>:param write_register: If True, the register is written                                before read                       Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,    bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def i2c_read(self, address, register, number_of_bytes,\n                   callback, i2c_port=0,\n                   write_register=True):\n\"\"\"\n    Read the specified number of bytes from the specified register for\n    the i2c device.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report i2c data as a\n               result of read command\n\n    :param i2c_port: select the default port (0) or secondary port (1)\n\n    :param write_register: If True, the register is written\n                                   before read\n                          Else, the write is suppressed\n\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('i2c_read: A Callback must be specified')\n\n    await self._i2c_read_request(address, register, number_of_bytes,\n                                 callback=callback, i2c_port=i2c_port,\n                                 write_register=write_register)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.i2c_read_restart_transmission","title":"<code>i2c_read_restart_transmission(address, register, number_of_bytes, callback, i2c_port=0, write_register=True)</code>  <code>async</code>","text":"<p>Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register                                             selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report i2c data as a            result of read command</p> <p>:param i2c_port: select the default port (0) or secondary port (1)</p> <p>:param write_register: If True, the register is written                                before read                       Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,    bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def i2c_read_restart_transmission(self, address, register,\n                                        number_of_bytes,\n                                        callback, i2c_port=0,\n                                        write_register=True):\n\"\"\"\n    Read the specified number of bytes from the specified register for\n    the i2c device. This restarts the transmission after the read. It is\n    required for some i2c devices such as the MMA8452Q accelerometer.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register\n                                                selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report i2c data as a\n               result of read command\n\n    :param i2c_port: select the default port (0) or secondary port (1)\n\n    :param write_register: If True, the register is written\n                                   before read\n                          Else, the write is suppressed\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            'i2c_read_restart_transmission: A Callback must be specified')\n\n    await self._i2c_read_request(address, register, number_of_bytes,\n                                 stop_transmission=False,\n                                 callback=callback, i2c_port=i2c_port,\n                                 write_register=write_register)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.i2c_write","title":"<code>i2c_write(address, args, i2c_port=0)</code>  <code>async</code>","text":"<p>Write data to an i2c device.</p> <p>:param address: i2c device address</p> <p>:param i2c_port: 0= port 1, 1 = port 2</p> <p>:param args: A variable number of bytes to be sent to the device              passed in as a list</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n    Write data to an i2c device.\n\n    :param address: i2c device address\n\n    :param i2c_port: 0= port 1, 1 = port 2\n\n    :param args: A variable number of bytes to be sent to the device\n                 passed in as a list\n\n    \"\"\"\n    if not i2c_port:\n        if not self.i2c_1_active:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n    if i2c_port:\n        if not self.i2c_2_active:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n    command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n    for item in args:\n        command.append(item)\n\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.loop_back","title":"<code>loop_back(start_character, callback)</code>  <code>async</code>","text":"<p>This is a debugging method to send a character to the Arduino device, and have the device loop it back.</p> <p>:param start_character: The character to loop back. It should be                         an integer.</p> <p>:param callback: Looped back character will appear in the callback method</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def loop_back(self, start_character, callback):\n\"\"\"\n    This is a debugging method to send a character to the\n    Arduino device, and have the device loop it back.\n\n    :param start_character: The character to loop back. It should be\n                            an integer.\n\n    :param callback: Looped back character will appear in the callback method\n\n    \"\"\"\n\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('loop_back: A callback function must be specified.')\n    command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n    self.loop_back_callback = callback\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.r4_hard_reset","title":"<code>r4_hard_reset()</code>  <code>async</code>","text":"<p>Place the r4 into hard reset</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def r4_hard_reset(self):\n\"\"\"\n    Place the r4 into hard reset\n    \"\"\"\n    command = [PrivateConstants.BOARD_HARD_RESET, 1]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.servo_detach","title":"<code>servo_detach(pin_number)</code>  <code>async</code>","text":"<p>Detach a servo for reuse :param pin_number: attached pin</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def servo_detach(self, pin_number):\n\"\"\"\n    Detach a servo for reuse\n    :param pin_number: attached pin\n    \"\"\"\n    command = [PrivateConstants.SERVO_DETACH, pin_number]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.servo_write","title":"<code>servo_write(pin_number, angle)</code>  <code>async</code>","text":"<p>Set a servo attached to a pin to a given angle.</p> <p>:param pin_number: pin</p> <p>:param angle: angle (0-180)</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def servo_write(self, pin_number, angle):\n\"\"\"\n\n    Set a servo attached to a pin to a given angle.\n\n    :param pin_number: pin\n\n    :param angle: angle (0-180)\n\n    \"\"\"\n    command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_analog_scan_interval","title":"<code>set_analog_scan_interval(interval)</code>  <code>async</code>","text":"<p>Set the analog scanning interval.</p> <p>:param interval: value of 0 - 255 - milliseconds</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_analog_scan_interval(self, interval):\n\"\"\"\n    Set the analog scanning interval.\n\n    :param interval: value of 0 - 255 - milliseconds\n    \"\"\"\n\n    if 0 &lt;= interval &lt;= 255:\n        command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n        await self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('Analog interval must be between 0 and 255')\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_analog_input","title":"<code>set_pin_mode_analog_input(pin_number, differential=0, callback=None)</code>  <code>async</code>","text":"<p>Set a pin as an analog input.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: async callback function</p> <p>:param differential: difference in previous to current value before                      report will be generated</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for analog input pins = 3</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n    Set a pin as an analog input.\n\n    :param pin_number: arduino pin number\n\n    :param callback: async callback function\n\n    :param differential: difference in previous to current value before\n                         report will be generated\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for analog input pins = 3\n\n    \"\"\"\n\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            'set_pin_mode_analog_input: A callback function must be specified.')\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG,\n                             differential, callback=callback)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_analog_output","title":"<code>set_pin_mode_analog_output(pin_number)</code>  <code>async</code>","text":"<p>Set a pin as a pwm (analog output) pin.</p> <p>:param pin_number:arduino pin number</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n\n    Set a pin as a pwm (analog output) pin.\n\n    :param pin_number:arduino pin number\n\n    \"\"\"\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                             callback=None)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_dht","title":"<code>set_pin_mode_dht(pin, callback=None, dht_type=22)</code>  <code>async</code>","text":"<p>:param pin: connection pin</p> <p>:param callback: callback function</p> <p>:param dht_type: either 22 for DHT22 or 11 for DHT11</p> <p>Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]</p> <p>Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity, Temperature, Time]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n    :param pin: connection pin\n\n    :param callback: callback function\n\n    :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n    Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n    Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n    Temperature,\n    Time]\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n        if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n            self.dht_callbacks[pin] = callback\n            self.dht_count += 1\n\n            if dht_type != 22 and dht_type != 11:\n                dht_type = 22\n\n            command = [PrivateConstants.DHT_NEW, pin, dht_type]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The DHT feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_digital_input","title":"<code>set_pin_mode_digital_input(pin_number, callback)</code>  <code>async</code>","text":"<p>Set a pin as a digital input.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: async callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_digital_input(self, pin_number, callback):\n\"\"\"\n    Set a pin as a digital input.\n\n    :param pin_number: arduino pin number\n\n    :param callback: async callback function\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n\n    \"\"\"\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, differential=0,\n                             callback=callback)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_digital_input_pullup","title":"<code>set_pin_mode_digital_input_pullup(pin_number, callback)</code>  <code>async</code>","text":"<p>Set a pin as a digital input with pullup enabled.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: async callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_digital_input_pullup(self, pin_number, callback):\n\"\"\"\n    Set a pin as a digital input with pullup enabled.\n\n    :param pin_number: arduino pin number\n\n    :param callback: async callback function\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n\n    \"\"\"\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            'set_pin_mode_digital_input_pullup: A callback function must be specified.')\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                             differential=0, callback=callback)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_digital_output","title":"<code>set_pin_mode_digital_output(pin_number)</code>  <code>async</code>","text":"<p>Set a pin as a digital output pin.</p> <p>:param pin_number: arduino pin number</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n    Set a pin as a digital output pin.\n\n    :param pin_number: arduino pin number\n    \"\"\"\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                             callback=None)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_i2c","title":"<code>set_pin_mode_i2c(i2c_port=0)</code>  <code>async</code>","text":"<p>Establish the standard Arduino i2c pins for i2c utilization.</p> <p>:param i2c_port: 0 = i2c1, 1 = i2c2</p> <ol> <li>THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE</li> </ol> <ol> <li>Callbacks are set within the individual i2c read methods of this</li> </ol> <pre><code>  API.\n\n  See i2c_read, or i2c_read_restart_transmission.\n</code></pre> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n    Establish the standard Arduino i2c pins for i2c utilization.\n\n    :param i2c_port: 0 = i2c1, 1 = i2c2\n\n    NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n           2. Callbacks are set within the individual i2c read methods of this\n          API.\n\n          See i2c_read, or i2c_read_restart_transmission.\n\n    \"\"\"\n    # test for i2c port 2\n    if i2c_port:\n        # if not previously activated set it to activated\n        # and the send a begin message for this port\n        if not self.i2c_2_active:\n            self.i2c_2_active = True\n        else:\n            return\n    # port 1\n    else:\n        if not self.i2c_1_active:\n            self.i2c_1_active = True\n        else:\n            return\n\n    command = [PrivateConstants.I2C_BEGIN, i2c_port]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_servo","title":"<code>set_pin_mode_servo(pin_number, min_pulse=544, max_pulse=2400)</code>  <code>async</code>","text":"<p>Attach a pin to a servo motor</p> <p>:param pin_number: pin</p> <p>:param min_pulse: minimum pulse width</p> <p>:param max_pulse: maximum pulse width</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n    Attach a pin to a servo motor\n\n    :param pin_number: pin\n\n    :param min_pulse: minimum pulse width\n\n    :param max_pulse: maximum pulse width\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n        minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n        maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n        command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                   minv[0], minv[1], maxv[0], maxv[1]]\n        await self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The SERVO feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_sonar","title":"<code>set_pin_mode_sonar(trigger_pin, echo_pin, callback)</code>  <code>async</code>","text":"<p>:param trigger_pin:</p> <p>:param echo_pin:</p> <p>:param callback:  callback</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                             callback):\n\"\"\"\n\n    :param trigger_pin:\n\n    :param echo_pin:\n\n    :param callback:  callback\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n        if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n            self.sonar_callbacks[trigger_pin] = callback\n            self.sonar_count += 1\n\n            command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The SONAR feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.set_pin_mode_spi","title":"<code>set_pin_mode_spi(chip_select_list=None)</code>  <code>async</code>","text":"<p>Specify the list of chip select pins.</p> <p>Standard Arduino MISO, MOSI and CLK pins are used for the board in use.</p> <p>Chip Select is any digital output capable pin.</p> <p>:param chip_select_list: this is a list of pins to be used for chip select.                    The pins will be configured as output, and set to high                    ready to be used for chip select.                    NOTE: You must specify the chips select pins here!</p> <p>command message: [command, number of cs pins, [cs pins...]]</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n    Specify the list of chip select pins.\n\n    Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n    Chip Select is any digital output capable pin.\n\n    :param chip_select_list: this is a list of pins to be used for chip select.\n                       The pins will be configured as output, and set to high\n                       ready to be used for chip select.\n                       NOTE: You must specify the chips select pins here!\n\n\n    command message: [command, number of cs pins, [cs pins...]]\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n\n        if type(chip_select_list) is not list:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('chip_select_list must be in the form of a list')\n        if not chip_select_list:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('Chip select pins were not specified')\n\n        self.spi_enabled = True\n\n        command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n        for pin in chip_select_list:\n            command.append(pin)\n            self.cs_pins_enabled.append(pin)\n        await self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The SPI feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.shutdown","title":"<code>shutdown()</code>  <code>async</code>","text":"<p>This method attempts an orderly shutdown If any exceptions are thrown, they are ignored.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def shutdown(self):\n\"\"\"\n    This method attempts an orderly shutdown\n    If any exceptions are thrown, they are ignored.\n\n    \"\"\"\n    self.shutdown_flag = True\n\n    if self.hard_reset_on_shutdown:\n        await self.r4_hard_reset()\n    # stop all reporting - both analog and digital\n    else:\n        try:\n            command = [PrivateConstants.STOP_ALL_REPORTS]\n            await self._send_command(command)\n\n            await asyncio.sleep(.5)\n            await self.serial_port.reset_input_buffer()\n            await self.serial_port.close()\n            if self.close_loop_on_shutdown:\n                self.loop.stop()\n        except (RuntimeError, SerialException):\n            pass\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.sonar_disable","title":"<code>sonar_disable()</code>  <code>async</code>","text":"<p>Disable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def sonar_disable(self):\n\"\"\"\n    Disable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_DISABLE]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.sonar_enable","title":"<code>sonar_enable()</code>  <code>async</code>","text":"<p>Enable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def sonar_enable(self):\n\"\"\"\n    Enable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_ENABLE]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.spi_cs_control","title":"<code>spi_cs_control(chip_select_pin, select)</code>  <code>async</code>","text":"<p>Control an SPI chip select line :param chip_select_pin: pin connected to CS</p> <p>:param select: 0=select, 1=deselect</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n    Control an SPI chip select line\n    :param chip_select_pin: pin connected to CS\n\n    :param select: 0=select, 1=deselect\n    \"\"\"\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n    if chip_select_pin not in self.cs_pins_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n    command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.spi_read_blocking","title":"<code>spi_read_blocking(chip_select, register_selection, number_of_bytes_to_read, call_back=None)</code>  <code>async</code>","text":"<p>Read the specified number of bytes from the specified SPI port and call the callback function with the reported data.</p> <p>:param chip_select: chip select pin</p> <p>:param register_selection: Register to be selected for read.</p> <p>:param number_of_bytes_to_read: Number of bytes to read</p> <p>:param call_back: Required callback function to report spi data as a            result of read command</p> callback returns a data list <p>[SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,  data bytes, time-stamp]</p> <p>SPI_READ_REPORT = 13</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def spi_read_blocking(self, chip_select, register_selection,\n                            number_of_bytes_to_read,\n                      call_back=None):\n\"\"\"\n    Read the specified number of bytes from the specified SPI port and\n    call the callback function with the reported data.\n\n    :param chip_select: chip select pin\n\n    :param register_selection: Register to be selected for read.\n\n    :param number_of_bytes_to_read: Number of bytes to read\n\n    :param call_back: Required callback function to report spi data as a\n               result of read command\n\n\n    callback returns a data list:\n        [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n         data bytes, time-stamp]\n    SPI_READ_REPORT = 13\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n    if not call_back:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n    self.spi_callback = call_back\n\n    command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n               number_of_bytes_to_read,\n               register_selection]\n\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.spi_set_format","title":"<code>spi_set_format(clock_divisor, bit_order, data_mode)</code>  <code>async</code>","text":"<p>Configure how the SPI serializes and de-serializes data on the wire.</p> <p>See Arduino SPI reference materials for details.</p> <p>:param clock_divisor: 1 - 255</p> <p>:param bit_order:</p> <pre><code>                LSBFIRST = 0\n\n                MSBFIRST = 1 (default)\n</code></pre> <p>:param data_mode:</p> <pre><code>                SPI_MODE0 = 0x00 (default)\n\n                SPI_MODE1  = 1\n\n                SPI_MODE2 = 2\n\n                SPI_MODE3 = 3\n</code></pre> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n    Configure how the SPI serializes and de-serializes data on the wire.\n\n    See Arduino SPI reference materials for details.\n\n    :param clock_divisor: 1 - 255\n\n    :param bit_order:\n\n                        LSBFIRST = 0\n\n                        MSBFIRST = 1 (default)\n\n    :param data_mode:\n\n                        SPI_MODE0 = 0x00 (default)\n\n                        SPI_MODE1  = 1\n\n                        SPI_MODE2 = 2\n\n                        SPI_MODE3 = 3\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n    if not 0 &lt; clock_divisor &lt;= 255:\n        raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n    if bit_order not in [0, 1]:\n        raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n    if data_mode not in [0, 1, 2, 3]:\n        raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n    command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n               data_mode]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.spi_write_blocking","title":"<code>spi_write_blocking(chip_select, bytes_to_write)</code>  <code>async</code>","text":"<p>Write a list of bytes to the SPI device.</p> <p>:param chip_select: chip select pin</p> <p>:param bytes_to_write: A list of bytes to write. This must                         be in the form of a list.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n    Write a list of bytes to the SPI device.\n\n    :param chip_select: chip select pin\n\n    :param bytes_to_write: A list of bytes to write. This must\n                            be in the form of a list.\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n    if type(bytes_to_write) is not list:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n    command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n    for data in bytes_to_write:\n        command.append(data)\n\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_minima_reference_aio/#telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio.start_aio","title":"<code>start_aio()</code>  <code>async</code>","text":"<p>This method may be called directly, if the autostart parameter in init is set to false.</p> <p>This method instantiates the serial interface and then performs auto pin discovery if using a serial interface, or creates and connects to a TCP/IP enabled device running StandardFirmataWiFi.</p> <p>Use this method if you wish to start TelemetrixAIO manually from an asyncio function.</p> Source code in <code>telemetrix_uno_r4/minima/telemetrix_uno_r4_minima_aio/telemetrix_uno_r4_minima_aio.py</code> <pre><code>async def start_aio(self):\n\"\"\"\n    This method may be called directly, if the autostart\n    parameter in __init__ is set to false.\n\n    This method instantiates the serial interface and then performs auto pin\n    discovery if using a serial interface, or creates and connects to\n    a TCP/IP enabled device running StandardFirmataWiFi.\n\n    Use this method if you wish to start TelemetrixAIO manually from\n    an asyncio function.\n     \"\"\"\n\n    if not self.com_port:\n        # user did not specify a com_port\n        try:\n            await self._find_arduino()\n        except KeyboardInterrupt:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n    else:\n        # com_port specified - set com_port and baud rate\n        try:\n            await self._manual_open()\n        except KeyboardInterrupt:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n\n    if self.com_port:\n        print(f'Telemetrix4UnoR4 found and connected to {self.com_port}')\n\n        # no com_port found - raise a runtime exception\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('No Arduino Found or User Aborted Program')\n\n    # get arduino firmware version and print it\n    firmware_version = await self._get_firmware_version()\n    if not firmware_version:\n        print('*** Firmware Version retrieval timed out. ***')\n        print('\\nDo you have Arduino connectivity and do you have the ')\n        print('Telemetrix4UnoR4 sketch uploaded to the board and are connected')\n        print('to the correct serial port.\\n')\n        print('To see a list of serial ports, type: '\n              '\"list_serial_ports\" in your console.')\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError\n    else:\n\n        print(f'Telemetrix4UnoR4 Version Number: {firmware_version[2]}.'\n              f'{firmware_version[3]}.{firmware_version[4]}')\n        # start the command dispatcher loop\n        command = [PrivateConstants.ENABLE_ALL_REPORTS]\n        await self._send_command(command)\n        if not self.loop:\n            self.loop = asyncio.get_event_loop()\n        self.the_task = self.loop.create_task(self._arduino_report_dispatcher())\n\n        # get the features list\n        command = [PrivateConstants.GET_FEATURES]\n        await self._send_command(command)\n        await asyncio.sleep(.5)\n\n        # Have the server reset its data structures\n        command = [PrivateConstants.RESET]\n        await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/","title":"telemetrix_uno_r4_wifi","text":"<p>Copyright (c) 2023, 2024 Alan Yorinks All rights reserved.</p> <p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3 as published by the Free Software Foundation; either or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</p>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi","title":"<code>TelemetrixUnoR4WiFi</code>","text":"<p>             Bases: <code>threading.Thread</code></p> <p>This class exposes and implements the telemetrix API. It uses threading to accommodate concurrency. It includes the public API methods as well as a set of private methods.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>class TelemetrixUnoR4WiFi(threading.Thread):\n\"\"\"\n    This class exposes and implements the telemetrix API.\n    It uses threading to accommodate concurrency.\n    It includes the public API methods as well as\n    a set of private methods.\n\n    \"\"\"\n\n    # noinspection PyPep8,PyPep8,PyPep8\n    def __init__(self, com_port=None, arduino_instance_id=1,\n                 arduino_wait=1, sleep_tune=0.000001,\n                 shutdown_on_exception=True, hard_reset_on_shutdown=True,\n                 transport_address=None, ip_port=31336, transport_type=0):\n\n\"\"\"\n\n        :param com_port: e.g. COM3 or /dev/ttyACM0.\n                         Only use if you wish to bypass auto com port\n                         detection.\n\n        :param arduino_instance_id: Match with the value installed on the\n                                    arduino-telemetrix sketch.\n\n        :param arduino_wait: Amount of time to wait for an Arduino to\n                             fully reset itself.\n\n        :param sleep_tune: A tuning parameter (typically not changed by user)\n\n        :param shutdown_on_exception: call shutdown before raising\n                                      a RunTimeError exception, or\n                                      receiving a KeyboardInterrupt exception\n\n        :param hard_reset_on_shutdown: reset the board on shutdown\n\n        :param transport_address: ip address of tcp/ip connected device.\n\n        :param ip_port: ip port of tcp/ip connected device\n\n        :param transport_type: 0 = WiFI\n                               1 = USBSerial\n                               2 = BLE\n\n\n        \"\"\"\n\n        # initialize threading parent\n        threading.Thread.__init__(self)\n\n        # create the threads and set them as daemons so\n        # that they stop when the program is closed\n\n        # create a thread to interpret received serial data\n        self.the_reporter_thread = threading.Thread(target=self._reporter)\n        self.the_reporter_thread.daemon = True\n\n        self.transport_address = transport_address\n        self.ip_port = ip_port\n\n        if transport_type not in [0, 1, 2]:\n            raise RuntimeError(\"Valid transport_type value is 0, 1, or 2\")\n\n        self.transport_type = transport_type\n\n        if transport_type == 0:\n            if not transport_address:\n                raise RuntimeError(\"An IP address must be specified.\")\n\n        if not self.transport_address:\n            self.the_data_receive_thread = threading.Thread(target=self._serial_receiver)\n        else:\n            self.the_data_receive_thread = threading.Thread(target=self._tcp_receiver)\n\n        self.the_data_receive_thread.daemon = True\n\n        # flag to allow the reporter and receive threads to run.\n        self.run_event = threading.Event()\n\n        # check to make sure that Python interpreter is version 3.7 or greater\n        python_version = sys.version_info\n        if python_version[0] &gt;= 3:\n            if python_version[1] &gt;= 7:\n                pass\n            else:\n                raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                                   \"required for use of this program.\")\n\n        # save input parameters as instance variables\n        self.com_port = com_port\n        self.arduino_instance_id = arduino_instance_id\n        self.arduino_wait = arduino_wait\n        self.sleep_tune = sleep_tune\n        self.shutdown_on_exception = shutdown_on_exception\n        self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n        # create a deque to receive and process data from the arduino\n        self.the_deque = deque()\n\n        # The report_dispatch dictionary is used to process\n        # incoming report messages by looking up the report message\n        # and executing its associated processing method.\n\n        self.report_dispatch = {}\n\n        # To add a command to the command dispatch table, append here.\n        self.report_dispatch.update(\n            {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n        self.report_dispatch.update(\n            {PrivateConstants.ANALOG_REPORT: self._analog_message})\n        self.report_dispatch.update(\n            {PrivateConstants.FIRMWARE_REPORT: self._firmware_message})\n        self.report_dispatch.update({PrivateConstants.I_AM_HERE_REPORT: self._i_am_here})\n        self.report_dispatch.update(\n            {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n        self.report_dispatch.update(\n            {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n        self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n        self.report_dispatch.update(\n            {PrivateConstants.SPI_REPORT: self._spi_report})\n        self.report_dispatch.update(\n            {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_CURRENT_POSITION:\n                 self._stepper_current_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUNNING_REPORT:\n                 self._stepper_is_running_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n                 self._stepper_run_complete_report})\n\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.FEATURES:\n                 self._features_report})\n\n        # dictionaries to store the callbacks for each pin\n        self.analog_callbacks = {}\n\n        self.digital_callbacks = {}\n\n        self.i2c_callback = None\n        self.i2c_callback2 = None\n\n        self.i2c_1_active = False\n        self.i2c_2_active = False\n\n        self.spi_callback = None\n\n        self.onewire_callback = None\n\n        self.cs_pins_enabled = []\n\n        # the trigger pin will be the key to retrieve\n        # the callback for a specific HC-SR04\n        self.sonar_callbacks = {}\n\n        self.sonar_count = 0\n\n        self.dht_callbacks = {}\n\n        self.dht_count = 0\n\n        # serial port in use\n        self.serial_port = None\n\n        # socket for tcp/ip communications\n        self.sock = None\n\n        # flag to indicate we are in shutdown mode\n        self.shutdown_flag = False\n\n        # debug loopback callback method\n        self.loop_back_callback = None\n\n        # flag to indicate the start of a new report\n        # self.new_report_start = True\n\n        # firmware version to be stored here\n        self.firmware_version = []\n\n        # reported arduino instance id\n        self.reported_arduino_id = []\n\n        # reported features\n        self.reported_features = 0\n\n        # flag to indicate if i2c was previously enabled\n        self.i2c_enabled = False\n\n        # flag to indicate if spi is initialized\n        self.spi_enabled = False\n\n        # flag to indicate if onewire is initialized\n        self.onewire_enabled = False\n\n        # stepper motor variables\n\n        # updated when a new motor is added\n        # self.next_stepper_assigned = 0\n        #\n        # # valid list of stepper motor interface types\n        # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n        #\n        # # maximum number of steppers supported\n        # self.max_number_of_steppers = 4\n        #\n        # # number of steppers created - not to exceed the maximum\n        # self.number_of_steppers = 0\n        #\n        # # dictionary to hold stepper motor information\n        # self.stepper_info = {'instance': False, 'is_running': None,\n        #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n        #                      'distance_to_go_callback': None,\n        #                      'target_position_callback': None,\n        #                      'current_position_callback': None,\n        #                      'is_running_callback': None,\n        #                      'motion_complete_callback': None,\n        #                      'acceleration_callback': None}\n        #\n        # # build a list of stepper motor info items\n        # self.stepper_info_list = []\n        # # a list of dictionaries to hold stepper information\n        # for motor in range(self.max_number_of_steppers):\n        #     self.stepper_info_list.append(self.stepper_info.copy())\n\n        self.the_reporter_thread.start()\n        self.the_data_receive_thread.start()\n\n        print(f\"telemetrix_uno_r4_wifi:  Version\"\n              f\" {PrivateConstants.TELEMETRIX_VERSION}\\n\\n\"\n              f\"Copyright (c) 2023 Alan Yorinks All Rights Reserved.\\n\")\n\n        # using the serial link\n        if not self.transport_address:\n            if not self.com_port:\n                # user did not specify a com_port\n                try:\n                    self._find_arduino()\n                except KeyboardInterrupt:\n                    if self.shutdown_on_exception:\n                        self.shutdown()\n            else:\n                # com_port specified - set com_port and baud rate\n                try:\n                    self._manual_open()\n                except KeyboardInterrupt:\n                    if self.shutdown_on_exception:\n                        self.shutdown()\n\n            if self.serial_port:\n                print(\n                    f\"Arduino compatible device found and connected to {self.serial_port.port}\")\n\n                self.serial_port.reset_input_buffer()\n                self.serial_port.reset_output_buffer()\n                self.disable_scroll_message()\n\n            # no com_port found - raise a runtime exception\n            else:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('No Arduino Found or User Aborted Program')\n        else:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect((self.transport_address, self.ip_port))\n            print(f'Successfully connected to: {self.transport_address}:{self.ip_port}')\n\n        # allow the threads to run\n        self._run_threads()\n        print(f'Waiting for Arduino to reset')\n        print(f'Reset Complete')\n\n        # get telemetrix firmware version and print it\n        print('\\nRetrieving Telemetrix4UnoR4WiFi firmware ID...')\n        self._get_firmware_version()\n        if not self.firmware_version:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'Telemetrix4UnoR4WiFi firmware version')\n\n        else:\n\n            print(f'Telemetrix4UnoR4WiFi firmware version: {self.firmware_version[0]}.'\n                  f'{self.firmware_version[1]}.{self.firmware_version[2]}')\n        command = [PrivateConstants.ENABLE_ALL_REPORTS]\n        self._send_command(command)\n\n        # get the features list\n        command = [PrivateConstants.GET_FEATURES]\n        self._send_command(command)\n        time.sleep(.2)\n\n        # Have the server reset its data structures\n        command = [PrivateConstants.RESET]\n        self._send_command(command)\n        time.sleep(.2)\n\n    def _find_arduino(self):\n\"\"\"\n        This method will search all potential serial ports for an Arduino\n        containing a sketch that has a matching arduino_instance_id as\n        specified in the input parameters of this class.\n\n        This is used explicitly with the Telemetrix4Arduino sketch.\n        \"\"\"\n\n        # a list of serial ports to be checked\n        serial_ports = []\n\n        print('Opening all potential serial ports...')\n        the_ports_list = list_ports.comports()\n        for port in the_ports_list:\n            if port.pid is None:\n                continue\n            try:\n                self.serial_port = serial.Serial(port.device, 115200,\n                                                 timeout=1, writeTimeout=0)\n            except SerialException:\n                continue\n            # create a list of serial ports that we opened\n            serial_ports.append(self.serial_port)\n\n            # display to the user\n            print('\\t' + port.device)\n\n            # clear out any possible data in the input buffer\n        # wait for arduino to reset\n        print(\n            f'\\nWaiting {self.arduino_wait} seconds(arduino_wait) for Arduino devices to '\n            'reset...')\n        # temporary for testing\n        time.sleep(self.arduino_wait)\n        self._run_threads()\n\n        for serial_port in serial_ports:\n            self.serial_port = serial_port\n\n            self._get_arduino_id()\n            if self.reported_arduino_id != self.arduino_instance_id:\n                continue\n            else:\n                print('Valid Arduino ID Found.')\n                self.serial_port.reset_input_buffer()\n                self.serial_port.reset_output_buffer()\n                return\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'Incorrect Arduino ID: {self.reported_arduino_id}')\n\n    def _manual_open(self):\n\"\"\"\n        Com port was specified by the user - try to open up that port\n\n        \"\"\"\n        # if port is not found, a serial exception will be thrown\n        try:\n            print(f'Opening {self.com_port}...')\n            self.serial_port = serial.Serial(self.com_port, 115200,\n                                             timeout=1, writeTimeout=0)\n\n            print(\n                f'\\nWaiting {self.arduino_wait} seconds(arduino_wait) for Arduino devices to '\n                'reset...')\n            self._run_threads()\n            time.sleep(self.arduino_wait)\n\n            self._get_arduino_id()\n\n            if self.reported_arduino_id != self.arduino_instance_id:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(f'Incorrect Arduino ID: {self.reported_arduino_id}')\n            print('Valid Arduino ID Found.')\n            # get arduino firmware version and print it\n            print('\\nRetrieving Telemetrix4Arduino firmware ID...')\n            self._get_firmware_version()\n\n            if not self.firmware_version:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    f'Telemetrix4Arduino Sketch Firmware Version Not Found')\n\n            else:\n                print(f'Telemetrix4UnoR4 firmware version: {self.firmware_version[0]}.'\n                      f'{self.firmware_version[1]}')\n        except KeyboardInterrupt:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('User Hit Control-C')\n\n    def analog_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (maximum 16 bits)\n\n        \"\"\"\n        value_msb = value &gt;&gt; 8\n        value_lsb = value &amp; 0xff\n        command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n        self._send_command(command)\n\n    def digital_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (1 or 0)\n\n        \"\"\"\n\n        command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n        self._send_command(command)\n\n    def disable_all_reporting(self):\n\"\"\"\n        Disable reporting for all digital and analog input pins\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DISABLE_ALL, 0]\n        self._send_command(command)\n\n    def disable_analog_reporting(self, pin):\n\"\"\"\n        Disables analog reporting for a single analog pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n        self._send_command(command)\n\n    def disable_digital_reporting(self, pin):\n\"\"\"\n        Disables digital reporting for a single digital input.\n\n        :param pin: Pin number.\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n        self._send_command(command)\n\n    def enable_analog_reporting(self, pin):\n\"\"\"\n        Enables analog reporting for the specified pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n        self._send_command(command)\n\n    def enable_digital_reporting(self, pin):\n\"\"\"\n        Enable reporting on the specified digital pin.\n\n        :param pin: Pin number.\n        \"\"\"\n\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n        self._send_command(command)\n\n    def _get_arduino_id(self):\n\"\"\"\n        Retrieve arduino-telemetrix arduino id\n\n        \"\"\"\n        command = [PrivateConstants.ARE_U_THERE]\n        self._send_command(command)\n        # provide time for the reply\n        time.sleep(.5)\n\n    def _get_firmware_version(self):\n\"\"\"\n        This method retrieves the\n        arduino-telemetrix firmware version\n\n        \"\"\"\n        command = [PrivateConstants.GET_FIRMWARE_VERSION]\n        self._send_command(command)\n        # provide time for the reply\n        time.sleep(.5)\n\n    def i2c_read(self, address, register, number_of_bytes,\n                 callback=None, i2c_port=0,\n                 write_register=True):\n\"\"\"\n        Read the specified number of bytes from the\n        specified register for the i2c device.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register\n                                       selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report\n                         i2c data as a result of read command\n\n       :param i2c_port: 0 = default, 1 = secondary\n\n       :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n\n        self._i2c_read_request(address, register, number_of_bytes,\n                               callback=callback, i2c_port=i2c_port,\n                               write_register=write_register)\n\n    def i2c_read_restart_transmission(self, address, register,\n                                      number_of_bytes,\n                                      callback=None, i2c_port=0,\n                                      write_register=True):\n\"\"\"\n        Read the specified number of bytes from the specified\n        register for the i2c device. This restarts the transmission\n        after the read. It is required for some i2c devices such as the MMA8452Q\n        accelerometer.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register\n                                                    selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report i2c\n                         data as a result of read command\n\n       :param i2c_port: 0 = default 1 = secondary\n\n       :param write_register: If True, the register is written before read\n                              Else, the write is suppressed\n\n\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n\n        self._i2c_read_request(address, register, number_of_bytes,\n                               stop_transmission=False,\n                               callback=callback, i2c_port=i2c_port,\n                               write_register=write_register)\n\n    def _i2c_read_request(self, address, register, number_of_bytes,\n                          stop_transmission=True, callback=None, i2c_port=0,\n                          write_register=True):\n\"\"\"\n        This method requests the read of an i2c device. Results are retrieved\n        via callback.\n\n        :param address: i2c device address\n\n        :param register: register number (or None if no register selection is needed)\n\n        :param number_of_bytes: number of bytes expected to be returned\n\n        :param stop_transmission: stop transmission after read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command.\n\n       :param write_register: If True, the register is written before read\n                              Else, the write is suppressed\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 2.')\n\n        if not callback:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('I2C Read: A callback function must be specified.')\n\n        if not i2c_port:\n            self.i2c_callback = callback\n        else:\n            self.i2c_callback2 = callback\n\n        if not register:\n            register = 0\n\n        if write_register:\n            write_register = 1\n        else:\n            write_register = 0\n\n        # message contains:\n        # 1. address\n        # 2. register\n        # 3. number of bytes\n        # 4. restart_transmission - True or False\n        # 5. i2c port\n        # 6. suppress write flag\n\n        command = [PrivateConstants.I2C_READ, address, register, number_of_bytes,\n                   stop_transmission, i2c_port, write_register]\n        self._send_command(command)\n\n    def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n        Write data to an i2c device.\n\n        :param address: i2c device address\n\n        :param i2c_port: 0= port 1, 1 = port 2\n\n        :param args: A variable number of bytes to be sent to the device\n                     passed in as a list\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n        command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n        for item in args:\n            command.append(item)\n\n        self._send_command(command)\n\n    def loop_back(self, start_character, callback=None):\n\"\"\"\n        This is a debugging method to send a character to the\n        Arduino device, and have the device loop it back.\n\n        :param start_character: The character to loop back. It should be\n                                an integer.\n\n        :param callback: Looped back character will appear in the callback method\n\n        \"\"\"\n        command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n        self.loop_back_callback = callback\n        self._send_command(command)\n\n    def set_analog_scan_interval(self, interval):\n\"\"\"\n        Set the analog scanning interval.\n\n        :param interval: value of 0 - 255 - milliseconds\n        \"\"\"\n\n        if 0 &lt;= interval &lt;= 255:\n            command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('Analog interval must be between 0 and 255')\n\n    def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n        Set a pin as a pwm (analog output) pin.\n\n        :param pin_number:arduino pin number\n\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n\n    def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n        Set a pin as an analog input.\n\n        :param pin_number: arduino pin number\n\n        :param differential: difference in previous to current value before\n                             report will be generated\n\n        :param callback: callback function\n\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for analog input pins = 3\n\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG, differential,\n                           callback)\n\n    def set_pin_mode_digital_input(self, pin_number, callback=None):\n\"\"\"\n        Set a pin as a digital input.\n\n        :param pin_number: arduino pin number\n\n        :param callback: callback function\n\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, callback=callback)\n\n    def set_pin_mode_digital_input_pullup(self, pin_number, callback=None):\n\"\"\"\n        Set a pin as a digital input with pullup enabled.\n\n        :param pin_number: arduino pin number\n\n        :param callback: callback function\n\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n        \"\"\"\n        self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                           callback=callback)\n\n    def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n        Set a pin as a digital output pin.\n\n        :param pin_number: arduino pin number\n        \"\"\"\n\n        self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n\n    def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n        Establish the standard Arduino i2c pins for i2c utilization.\n\n        :param i2c_port: 0 = i2c1, 1 = i2c2\n\n        NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n               2. Callbacks are set within the individual i2c read methods of this\n              API.\n\n              See i2c_read, or i2c_read_restart_transmission.\n\n        \"\"\"\n        # test for i2c port 2\n        if i2c_port:\n            # if not previously activated set it to activated\n            # and the send a begin message for this port\n            if not self.i2c_2_active:\n                self.i2c_2_active = True\n            else:\n                return\n        # port 1\n        else:\n            if not self.i2c_1_active:\n                self.i2c_1_active = True\n            else:\n                return\n\n        command = [PrivateConstants.I2C_BEGIN, i2c_port]\n        self._send_command(command)\n\n    def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n        :param pin: connection pin\n\n        :param callback: callback function\n\n        :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n        Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n        Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n        Temperature,\n        Time]\n\n        DHT_REPORT_TYPE = 12\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n            if not callback:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n            if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n                self.dht_callbacks[pin] = callback\n                self.dht_count += 1\n\n                if dht_type != 22 and dht_type != 11:\n                    dht_type = 22\n\n                command = [PrivateConstants.DHT_NEW, pin, dht_type]\n                self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The DHT feature is disabled in the server.')\n\n    # noinspection PyRedundantParentheses\n    def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n        Attach a pin to a servo motor\n\n        :param pin_number: pin\n\n        :param min_pulse: minimum pulse width\n\n        :param max_pulse: maximum pulse width\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n            minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n            maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n            command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                       minv[0], minv[1], maxv[0], maxv[1]]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The SERVO feature is disabled in the server.')\n\n    def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                           callback=None):\n\"\"\"\n\n        :param trigger_pin:\n\n        :param echo_pin:\n\n        :param callback: callback\n\n        callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n            if not callback:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n            if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n                self.sonar_callbacks[trigger_pin] = callback\n                self.sonar_count += 1\n\n                command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n                self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The SONAR feature is disabled in the server.')\n\n    def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n        Specify the list of chip select pins.\n\n        Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n        Chip Select is any digital output capable pin.\n\n        :param chip_select_list: this is a list of pins to be used for chip select.\n                           The pins will be configured as output, and set to high\n                           ready to be used for chip select.\n                           NOTE: You must specify the chips select pins here!\n\n\n        command message: [command, [cs pins...]]\n        \"\"\"\n\n        if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n            if type(chip_select_list) is not list:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('chip_select_list must be in the form of a list')\n            if not chip_select_list:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('Chip select pins were not specified')\n\n            self.spi_enabled = True\n\n            command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n            for pin in chip_select_list:\n                command.append(pin)\n                self.cs_pins_enabled.append(pin)\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'The SPI feature is disabled in the server.')\n\n    # def set_pin_mode_stepper(self, interface=1, pin1=2, pin2=3, pin3=4,\n    #                          pin4=5, enable=True):\n    #     \"\"\"\n    #     Stepper motor support is implemented as a proxy for the\n    #     the AccelStepper library for the Arduino.\n    #\n    #     This feature is compatible with the TB6600 Motor Driver\n    #\n    #     Note: It may not work for other driver types!\n    #\n    #     https://github.com/waspinator/AccelStepper\n    #\n    #     Instantiate a stepper motor.\n    #\n    #     Initialize the interface and pins for a stepper motor.\n    #\n    #     :param interface: Motor Interface Type:\n    #\n    #             1 = Stepper Driver, 2 driver pins required\n    #\n    #             2 = FULL2WIRE  2 wire stepper, 2 motor pins required\n    #\n    #             3 = FULL3WIRE 3 wire stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             4 = FULL4WIRE, 4 wire full stepper, 4 motor pins\n    #                 required\n    #\n    #             6 = HALF3WIRE, 3 wire half stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             8 = HALF4WIRE, 4 wire half stepper, 4 motor pins required\n    #\n    #     :param pin1: Arduino digital pin number for motor pin 1\n    #\n    #     :param pin2: Arduino digital pin number for motor pin 2\n    #\n    #     :param pin3: Arduino digital pin number for motor pin 3\n    #\n    #     :param pin4: Arduino digital pin number for motor pin 4\n    #\n    #     :param enable: If this is true, the output pins at construction time.\n    #\n    #     :return: Motor Reference number\n    #     \"\"\"\n    #     if self.reported_features &amp; PrivateConstants.STEPPERS_FEATURE:\n    #\n    #         if self.number_of_steppers == self.max_number_of_steppers:\n    #             if self.shutdown_on_exception:\n    #                 self.shutdown()\n    #             raise RuntimeError('Maximum number of steppers has already been assigned')\n    #\n    #         if interface not in self.valid_stepper_interfaces:\n    #             if self.shutdown_on_exception:\n    #                 self.shutdown()\n    #             raise RuntimeError('Invalid stepper interface')\n    #\n    #         self.number_of_steppers += 1\n    #\n    #         motor_id = self.next_stepper_assigned\n    #         self.next_stepper_assigned += 1\n    #         self.stepper_info_list[motor_id]['instance'] = True\n    #\n    #         # build message and send message to server\n    #         command = [PrivateConstants.SET_PIN_MODE_STEPPER, motor_id, interface, pin1,\n    #                    pin2, pin3, pin4, enable]\n    #         self._send_command(command)\n    #\n    #         # return motor id\n    #         return motor_id\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'The Stepper feature is disabled in the server.')\n\n    def servo_write(self, pin_number, angle):\n\"\"\"\n\n        Set a servo attached to a pin to a given angle.\n\n        :param pin_number: pin\n\n        :param angle: angle (0-180)\n\n        \"\"\"\n        command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n        self._send_command(command)\n\n    def servo_detach(self, pin_number):\n\"\"\"\n        Detach a servo for reuse\n\n        :param pin_number: attached pin\n\n        \"\"\"\n        command = [PrivateConstants.SERVO_DETACH, pin_number]\n        self._send_command(command)\n\n    # def stepper_move_to(self, motor_id, position):\n    #     \"\"\"\n    #     Set an absolution target position. If position is positive, the movement is\n    #     clockwise, else it is counter-clockwise.\n    #\n    #     The run() function (below) will try to move the motor (at most one step per call)\n    #     from the current position to the target position set by the most\n    #     recent call to this function. Caution: moveTo() also recalculates the\n    #     speed for the next step.\n    #     If you are trying to use constant speed movements, you should call setSpeed()\n    #     after calling moveTo().\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param position: target position. Maximum value is 32 bits.\n    #     \"\"\"\n    #     if position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #     position = abs(position)\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_move_to: Invalid motor_id.')\n    #\n    #     position_bytes = list(position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE_TO, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #     self._send_command(command)\n    #\n    # def stepper_move(self, motor_id, relative_position):\n    #     \"\"\"\n    #     Set the target position relative to the current position.\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param relative_position: The desired position relative to the current\n    #                               position. Negative is anticlockwise from\n    #                               the current position. Maximum value is 32 bits.\n    #     \"\"\"\n    #     if relative_position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #\n    #     relative_position = abs(relative_position)\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_move: Invalid motor_id.')\n    #\n    #     position_bytes = list(relative_position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #     self._send_command(command)\n    #\n    # def stepper_run(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     This method steps the selected motor based on the current speed.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run: A motion complete callback must be '\n    #                            'specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_run_speed(self, motor_id):\n    #     \"\"\"\n    #     This method steps the selected motor based at a constant speed as set by the most\n    #     recent call to stepper_set_max_speed(). The motor will run continuously.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run_speed: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_set_max_speed(self, motor_id, max_speed):\n    #     \"\"\"\n    #     Sets the maximum permitted speed. The stepper_run() function will accelerate\n    #     up to the speed set by this function.\n    #\n    #     Caution: the maximum speed achievable depends on your processor and clock speed.\n    #     The default maxSpeed is 1 step per second.\n    #\n    #      Caution: Speeds that exceed the maximum speed supported by the processor may\n    #               result in non-linear accelerations and decelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param max_speed: 1 - 1000\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Invalid motor_id.')\n    #\n    #     if not 1 &lt; max_speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Speed range is 1 - 1000.')\n    #\n    #     self.stepper_info_list[motor_id]['max_speed'] = max_speed\n    #     max_speed_msb = (max_speed &amp; 0xff00) &gt;&gt; 8\n    #     max_speed_lsb = max_speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MAX_SPEED, motor_id, max_speed_msb,\n    #                max_speed_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_get_max_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the maximum speed configured for this stepper\n    #     that was previously set by stepper_set_max_speed()\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :return: The currently configured maximum speed.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_max_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['max_speed']\n    #\n    # def stepper_set_acceleration(self, motor_id, acceleration):\n    #     \"\"\"\n    #     Sets the acceleration/deceleration rate.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param acceleration: The desired acceleration in steps per second\n    #                          per second. Must be &gt; 0.0. This is an\n    #                          expensive call since it requires a square\n    #                          root to be calculated on the server.\n    #                          Dont call more often than needed.\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Invalid motor_id.')\n    #\n    #     if not 1 &lt; acceleration &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Acceleration range is 1 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['acceleration'] = acceleration\n    #\n    #     max_accel_msb = acceleration &gt;&gt; 8\n    #     max_accel_lsb = acceleration &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_ACCELERATION, motor_id, max_accel_msb,\n    #                max_accel_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_set_speed(self, motor_id, speed):\n    #     \"\"\"\n    #     Sets the desired constant speed for use with stepper_run_speed().\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param speed: 0 - 1000 The desired constant speed in steps per\n    #                   second. Positive is clockwise. Speeds of more than 1000 steps per\n    #                   second are unreliable. Speed accuracy depends on the Arduino\n    #                   crystal. Jitter depends on how frequently you call the\n    #                   stepper_run_speed() method.\n    #                   The speed will be limited by the current value of\n    #                   stepper_set_max_speed().\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Invalid motor_id.')\n    #\n    #     if not 0 &lt; speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Speed range is 0 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['speed'] = speed\n    #\n    #     speed_msb = speed &gt;&gt; 8\n    #     speed_lsb = speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_SPEED, motor_id, speed_msb, speed_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_get_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the  most recently set speed.\n    #     that was previously set by stepper_set_speed();\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['speed']\n    #\n    # def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback):\n    #     \"\"\"\n    #     Request the distance from the current position to the target position\n    #     from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param distance_to_go_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=15, motor_id, distance in steps, time_stamp]\n    #\n    #     A positive distance is clockwise from the current position.\n    #\n    #     \"\"\"\n    #     if not distance_to_go_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go: Invalid motor_id.')\n    #     self.stepper_info_list[motor_id][\n    #         'distance_to_go_callback'] = distance_to_go_callback\n    #     command = [PrivateConstants.STEPPER_GET_DISTANCE_TO_GO, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_get_target_position(self, motor_id, target_callback):\n    #     \"\"\"\n    #     Request the most recently set target position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param target_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=16, motor_id, target position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #\n    #     \"\"\"\n    #     if not target_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_target_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_target_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id][\n    #         'target_position_callback'] = target_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_TARGET_POSITION, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_get_current_position(self, motor_id, current_position_callback):\n    #     \"\"\"\n    #     Request the current motor position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param current_position_callback: required callback function to receive report\n    #\n    #     :return: The current motor position returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=17, motor_id, current position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #     \"\"\"\n    #     if not current_position_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_current_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_get_current_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['current_position_callback'] = current_position_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_CURRENT_POSITION, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_set_current_position(self, motor_id, position):\n    #     \"\"\"\n    #     Resets the current position of the motor, so that wherever the motor\n    #     happens to be right now is considered to be the new 0 position. Useful\n    #     for setting a zero position on a stepper after an initial hardware\n    #     positioning move.\n    #\n    #     Has the side effect of setting the current motor speed to 0.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     :param position: Position in steps. This is a 32 bit value\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_current_position: Invalid motor_id.')\n    #     position_bytes = list(position.to_bytes(4, 'big',  signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_SET_CURRENT_POSITION, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     self._send_command(command)\n    #\n    # def stepper_run_speed_to_position(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     Runs the motor at the currently selected speed until the target position is\n    #     reached.\n    #\n    #     Does not implement accelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: A motion complete '\n    #                            'callback must be '\n    #                            'specified.')\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED_TO_POSITION, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_stop(self, motor_id):\n    #     \"\"\"\n    #     Sets a new target position that causes the stepper\n    #     to stop as quickly as possible, using the current speed and\n    #     acceleration parameters.\n    #\n    #     :param motor_id:  0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_stop: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_STOP, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_disable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Disable motor pin outputs by setting them all LOW.\n    #\n    #     Depending on the design of your electronics this may turn off\n    #     the power to the motor coils, saving power.\n    #\n    #     This is useful to support Arduino low power modes: disable the outputs\n    #     during sleep and then re-enable with enableOutputs() before stepping\n    #     again.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and clears\n    #     the pin to disabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_disable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_DISABLE_OUTPUTS, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_enable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Enable motor pin outputs by setting the motor pins to OUTPUT\n    #     mode.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and sets\n    #     the pin to enabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_enable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_ENABLE_OUTPUTS, motor_id]\n    #     self._send_command(command)\n    #\n    # def stepper_set_min_pulse_width(self, motor_id, minimum_width):\n    #     \"\"\"\n    #     Sets the minimum pulse width allowed by the stepper driver.\n    #\n    #     The minimum practical pulse width is approximately 20 microseconds.\n    #\n    #     Times less than 20 microseconds will usually result in 20 microseconds or so.\n    #\n    #     :param motor_id: 0 -3\n    #\n    #     :param minimum_width: A 16 bit unsigned value expressed in microseconds.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Invalid motor_id.')\n    #\n    #     if not 0 &lt; minimum_width &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Pulse width range = '\n    #                            '0-0xffff.')\n    #\n    #     width_msb = minimum_width &gt;&gt; 8\n    #     width_lsb = minimum_width &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MINIMUM_PULSE_WIDTH, motor_id, width_msb,\n    #                width_lsb]\n    #     self._send_command(command)\n    #\n    # def stepper_set_enable_pin(self, motor_id, pin=0xff):\n    #     \"\"\"\n    #     Sets the enable pin number for stepper drivers.\n    #     0xFF indicates unused (default).\n    #\n    #     Otherwise, if a pin is set, the pin will be turned on when\n    #     enableOutputs() is called and switched off when disableOutputs()\n    #     is called.\n    #\n    #     :param motor_id: 0 - 4\n    #     :param pin: 0-0xff\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Invalid motor_id.')\n    #\n    #     if not 0 &lt; pin &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Pulse width range = '\n    #                            '0-0xff.')\n    #     command = [PrivateConstants.STEPPER_SET_ENABLE_PIN, motor_id, pin]\n    #\n    #     self._send_command(command)\n    #\n    # def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False,\n    #                                 enable=False):\n    #     \"\"\"\n    #     Sets the inversion for stepper driver pins.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param direction: True=inverted or False\n    #\n    #     :param step: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_3_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_3_PINS_INVERTED, motor_id, direction,\n    #                step, enable]\n    #\n    #     self._send_command(command)\n    #\n    # def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False, pin2_invert=False,\n    #                                 pin3_invert=False, pin4_invert=False, enable=False):\n    #     \"\"\"\n    #     Sets the inversion for 2, 3 and 4 wire stepper pins\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param pin1_invert: True=inverted or False\n    #\n    #     :param pin2_invert: True=inverted or False\n    #\n    #     :param pin3_invert: True=inverted or False\n    #\n    #     :param pin4_invert: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_set_4_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_4_PINS_INVERTED, motor_id, pin1_invert,\n    #                pin2_invert, pin3_invert, pin4_invert, enable]\n    #\n    #     self._send_command(command)\n    #\n    # def stepper_is_running(self, motor_id, callback):\n    #     \"\"\"\n    #     Checks to see if the motor is currently running to a target.\n    #\n    #     Callback return True if the speed is not zero or not at the target position.\n    #\n    #     :param motor_id: 0-4\n    #\n    #     :param callback: required callback function to receive report\n    #\n    #     :return: The current running state returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp]\n    #     \"\"\"\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_is_running: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('stepper_is_running: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['is_running_callback'] = callback\n    #\n    #     command = [PrivateConstants.STEPPER_IS_RUNNING, motor_id]\n    #     self._send_command(command)\n\n    def _set_pin_mode(self, pin_number, pin_state, differential=0, callback=None):\n\"\"\"\n        A private method to set the various pin modes.\n\n        :param pin_number: arduino pin number\n\n        :param pin_state: INPUT/OUTPUT/ANALOG/PWM/PULLUP\n                         For SERVO use: set_pin_mode_servo\n                         For DHT   use: set_pin_mode_dht\n\n        :param differential: for analog inputs - threshold\n                             value to be achieved for report to\n                             be generated\n\n        :param callback: A reference to a call back function to be\n                         called when pin data value changes\n\n        \"\"\"\n        if callback:\n            if pin_state == PrivateConstants.AT_INPUT:\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_INPUT_PULLUP:\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_ANALOG:\n                self.analog_callbacks[pin_number] = callback\n            else:\n                print('{} {}'.format('set_pin_mode: callback ignored for '\n                                     'pin state:', pin_state))\n\n        if pin_state == PrivateConstants.AT_INPUT:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_INPUT, 1]\n\n        elif pin_state == PrivateConstants.AT_INPUT_PULLUP:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_INPUT_PULLUP, 1]\n\n        elif pin_state == PrivateConstants.AT_OUTPUT:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_OUTPUT]\n\n        elif pin_state == PrivateConstants.AT_ANALOG:\n            command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                       PrivateConstants.AT_ANALOG,\n                       differential &gt;&gt; 8, differential &amp; 0xff, 1]\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('Unknown pin state')\n\n        if command:\n            self._send_command(command)\n\n    def shutdown(self):\n\"\"\"\n        This method attempts an orderly shutdown\n        If any exceptions are thrown, they are ignored.\n        \"\"\"\n        self.shutdown_flag = True\n\n        self._stop_threads()\n\n        try:\n            command = [PrivateConstants.STOP_ALL_REPORTS]\n            self._send_command(command)\n            time.sleep(.5)\n\n            if self.hard_reset_on_shutdown:\n                self.r4_hard_reset()\n\n            if self.transport_address:\n                try:\n                    self.sock.shutdown(socket.SHUT_RDWR)\n                    self.sock.close()\n                except Exception:\n                    pass\n            else:\n                try:\n                    self.serial_port.reset_input_buffer()\n                    self.serial_port.reset_output_buffer()\n\n                    self.serial_port.close()\n\n                except (RuntimeError, SerialException, OSError):\n                    # ignore error on shutdown\n                    pass\n        except Exception:\n            # raise RuntimeError('Shutdown failed - could not send stop streaming\n            # message')\n            pass\n\n    def sonar_disable(self):\n\"\"\"\n        Disable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_DISABLE]\n        self._send_command(command)\n\n    def sonar_enable(self):\n\"\"\"\n        Enable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_ENABLE]\n        self._send_command(command)\n\n    def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n        Control an SPI chip select line\n        :param chip_select_pin: pin connected to CS\n\n        :param select: 0=select, 1=deselect\n        \"\"\"\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n        if chip_select_pin not in self.cs_pins_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n        command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n        self._send_command(command)\n\n    def spi_read_blocking(self, chip_select, register_selection, number_of_bytes_to_read,\n                          call_back=None):\n\"\"\"\n        Read the specified number of bytes from the specified SPI port and\n        call the callback function with the reported data.\n\n        :param chip_select: chip select pin\n\n        :param register_selection: Register to be selected for read.\n\n        :param number_of_bytes_to_read: Number of bytes to read\n\n        :param call_back: Required callback function to report spi data as a\n                   result of read command\n\n\n        callback returns a data list:\n        [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n        data bytes, time-stamp]\n\n        SPI_READ_REPORT = 13\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n        if not call_back:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n        self.spi_callback = call_back\n\n        command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n                   number_of_bytes_to_read,\n                   register_selection]\n\n        self._send_command(command)\n\n    def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n        Configure how the SPI serializes and de-serializes data on the wire.\n\n        See Arduino SPI reference materials for details.\n\n        :param clock_divisor: 1 - 255\n\n        :param bit_order:\n\n                            LSBFIRST = 0\n\n                            MSBFIRST = 1 (default)\n\n        :param data_mode:\n\n                            SPI_MODE0 = 0x00 (default)\n\n                            SPI_MODE1  = 1\n\n                            SPI_MODE2 = 2\n\n                            SPI_MODE3 = 3\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n        if not 0 &lt; clock_divisor &lt;= 255:\n            raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n        if bit_order not in [0, 1]:\n            raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n        if data_mode not in [0, 1, 2, 3]:\n            raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n        command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n                   data_mode]\n        self._send_command(command)\n\n    def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n        Write a list of bytes to the SPI device.\n\n        :param chip_select: chip select pin\n\n        :param bytes_to_write: A list of bytes to write. This must\n                                be in the form of a list.\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n        if type(bytes_to_write) is not list:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n        command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n        for data in bytes_to_write:\n            command.append(data)\n\n        self._send_command(command)\n\n    # def set_pin_mode_one_wire(self, pin):\n    #     \"\"\"\n    #     Initialize the one wire serial bus.\n    #\n    #     :param pin: Data pin connected to the OneWire device\n    #     \"\"\"\n    #     if self.reported_features &amp; PrivateConstants.ONEWIRE_FEATURE:\n    #         self.onewire_enabled = True\n    #         command = [PrivateConstants.ONE_WIRE_INIT, pin]\n    #         self._send_command(command)\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'The OneWire feature is disabled in the server.')\n    #\n    # def onewire_reset(self, callback=None):\n    #     \"\"\"\n    #     Reset the onewire device\n    #\n    #     :param callback: required  function to report reset result\n    #\n    #     callback returns a list:\n    #     [ReportType = 14, Report Subtype = 25, reset result byte,\n    #                     timestamp]\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_reset: OneWire interface is not enabled.')\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_reset: A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_RESET]\n    #     self._send_command(command)\n    #\n    # def onewire_select(self, device_address):\n    #     \"\"\"\n    #     Select a device based on its address\n    #     :param device_address: A bytearray of 8 bytes\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_select: OneWire interface is not enabled.')\n    #\n    #     if type(device_address) is not list:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #\n    #     if len(device_address) != 8:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #     command = [PrivateConstants.ONE_WIRE_SELECT]\n    #     for data in device_address:\n    #         command.append(data)\n    #     self._send_command(command)\n    #\n    # def onewire_skip(self):\n    #     \"\"\"\n    #     Skip the device selection. This only works if you have a\n    #     single device, but you can avoid searching and use this to\n    #     immediately access your device.\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_skip: OneWire interface is not enabled.')\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SKIP]\n    #     self._send_command(command)\n    #\n    # def onewire_write(self, data, power=0):\n    #     \"\"\"\n    #     Write a byte to the onewire device. If 'power' is one\n    #     then the wire is held high at the end for\n    #     parasitically powered devices. You\n    #     are responsible for eventually de-powering it by calling\n    #     another read or write.\n    #\n    #     :param data: byte to write.\n    #     :param power: power control (see above)\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_write: OneWire interface is not enabled.')\n    #     if 0 &lt; data &lt; 255:\n    #         command = [PrivateConstants.ONE_WIRE_WRITE, data, power]\n    #         self._send_command(command)\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_write: Data must be no larger than 255')\n    #\n    # def onewire_read(self, callback=None):\n    #     \"\"\"\n    #     Read a byte from the onewire device\n    #     :param callback: required  function to report onewire data as a\n    #                result of read command\n    #\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_READ=29, data byte, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_read: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_READ]\n    #     self._send_command(command)\n    #     time.sleep(.2)\n    #\n    # def onewire_reset_search(self):\n    #     \"\"\"\n    #     Begin a new search. The next use of search will begin at the first device\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_reset_search: OneWire interface is not '\n    #                            f'enabled.')\n    #     else:\n    #         command = [PrivateConstants.ONE_WIRE_RESET_SEARCH]\n    #         self._send_command(command)\n    #\n    # def onewire_search(self, callback=None):\n    #     \"\"\"\n    #     Search for the next device. The device address will returned in the callback.\n    #     If a device is found, the 8 byte address is contained in the callback.\n    #     If no more devices are found, the address returned contains all elements set\n    #     to 0xff.\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_SEARCH=31, 8 byte address, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_search: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SEARCH]\n    #     self._send_command(command)\n    #\n    # def onewire_crc8(self, address_list, callback=None):\n    #     \"\"\"\n    #     Compute a CRC check on an array of data.\n    #     :param address_list:\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_CRC8=32, CRC, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError(f'onewire_crc8: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_crc8 A Callback must be specified')\n    #\n    #     if type(address_list) is not list:\n    #         if self.shutdown_on_exception:\n    #             self.shutdown()\n    #         raise RuntimeError('onewire_crc8: address list must be a list.')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     address_length = len(address_list)\n    #\n    #     command = [PrivateConstants.ONE_WIRE_CRC8, address_length - 1]\n    #\n    #     for data in address_list:\n    #         command.append(data)\n    #\n    #     self._send_command(command)\n\n    def r4_hard_reset(self):\n\"\"\"\n        Place the r4 into hard reset\n        \"\"\"\n        command = [PrivateConstants.RESET, 1]\n        self._send_command(command)\n        time.sleep(.5)\n        command = [PrivateConstants.BOARD_HARD_RESET, 1]\n        self._send_command(command)\n\n    def enable_scroll_message(self, message, scroll_speed=50):\n\"\"\"\n\n        :param message: Message with maximum length of 25\n        :param scroll_speed: in milliseconds (maximum of 255)\n        \"\"\"\n        if len(message) &gt; 25:\n            raise RuntimeError(\"Scroll message size is maximum of 25 characters.\")\n\n        if scroll_speed &gt; 255:\n            raise RuntimeError(\"Scroll speed maximum of 255 milliseconds.\")\n\n        message = message.encode()\n        command = [PrivateConstants.SCROLL_MESSAGE_ON, len(message), scroll_speed]\n        for x in message:\n            command.append(x)\n        self._send_command(command)\n\n    def disable_scroll_message(self):\n\"\"\"\n        Turn off a scrolling message\n        \"\"\"\n\n        command = [PrivateConstants.SCROLL_MESSAGE_OFF]\n        self._send_command(command)\n\n'''\n    report message handlers\n    '''\n\n    def _analog_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for analog messages.\n\n        :param data: message data\n\n        \"\"\"\n        pin = data[0]\n        value = (data[1] &lt;&lt; 8) + data[2]\n        # set the current value in the pin structure\n        time_stamp = time.time()\n        # self.digital_pins[pin].event_time = time_stamp\n        if self.analog_callbacks[pin]:\n            message = [PrivateConstants.ANALOG_REPORT, pin, value, time_stamp]\n            try:\n                self.analog_callbacks[pin](message)\n            except KeyError:\n                pass\n\n    def _dht_report(self, data):\n\"\"\"\n        This is the dht report handler method.\n\n        :param data:            data[0] = report error return\n                                    No Errors = 0\n\n                                    Checksum Error = 1\n\n                                    Timeout Error = 2\n\n                                    Invalid Value = 999\n\n                                data[1] = pin number\n\n                                data[2] = dht type 11 or 22\n\n                                data[3] = humidity positivity flag\n\n                                data[4] = temperature positivity value\n\n                                data[5] = humidity integer\n\n                                data[6] = humidity fractional value\n\n                                data[7] = temperature integer\n\n                                data[8] = temperature fractional value\n\n\n        \"\"\"\n        if data[0]:  # DHT_ERROR\n            # error report\n            # data[0] = report sub type, data[1] = pin, data[2] = error message\n            if self.dht_callbacks[data[1]]:\n                # Callback 0=DHT REPORT, DHT_ERROR, PIN, Time\n                message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                           time.time()]\n                try:\n                    self.dht_callbacks[data[1]](message)\n                except KeyError:\n                    pass\n        else:\n            # got valid data DHT_DATA\n            f_humidity = float(data[5] + data[6] / 100)\n            if data[3]:\n                f_humidity *= -1.0\n            f_temperature = float(data[7] + data[8] / 100)\n            if data[4]:\n                f_temperature *= -1.0\n            message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                       f_humidity, f_temperature, time.time()]\n\n            try:\n                self.dht_callbacks[data[1]](message)\n            except KeyError:\n                pass\n\n    def _digital_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for Digital Messages.\n\n        :param data: digital message\n\n        \"\"\"\n        pin = data[0]\n        value = data[1]\n\n        time_stamp = time.time()\n        if self.digital_callbacks[pin]:\n            message = [PrivateConstants.DIGITAL_REPORT, pin, value, time_stamp]\n            self.digital_callbacks[pin](message)\n\n    def _firmware_message(self, data):\n\"\"\"\n        Telemetrix4Arduino firmware version message\n\n        :param data: data[0] = major number, data[1] = minor number.\n\n                               data[2] = patch number\n        \"\"\"\n\n        self.firmware_version = [data[0], data[1], data[2]]\n\n    def _i2c_read_report(self, data):\n\"\"\"\n        Execute callback for i2c reads.\n\n        :param data: [I2C_READ_REPORT, i2c_port, number of bytes read, address, register, bytes read..., time-stamp]\n        \"\"\"\n\n        # we receive [# data bytes, address, register, data bytes]\n        # number of bytes of data returned\n\n        # data[0] = number of bytes\n        # data[1] = i2c_port\n        # data[2] = number of bytes returned\n        # data[3] = address\n        # data[4] = register\n        # data[5] ... all the data bytes\n\n        cb_list = [PrivateConstants.I2C_READ_REPORT, data[0], data[1]] + data[2:]\n        cb_list.append(time.time())\n\n        if cb_list[1]:\n            self.i2c_callback2(cb_list)\n        else:\n            self.i2c_callback(cb_list)\n\n    def _i2c_too_few(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(\n            f'i2c too few bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    def _i2c_too_many(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(\n            f'i2c too many bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    def _i_am_here(self, data):\n\"\"\"\n        Reply to are_u_there message\n        :param data: arduino id\n        \"\"\"\n        self.reported_arduino_id = data[0]\n\n    def _spi_report(self, report):\n\n        cb_list = [PrivateConstants.SPI_REPORT, report[0]] + report[1:]\n\n        cb_list.append(time.time())\n\n        self.spi_callback(cb_list)\n\n    def _onewire_report(self, report):\n        cb_list = [PrivateConstants.ONE_WIRE_REPORT, report[0]] + report[1:]\n        cb_list.append(time.time())\n        self.onewire_callback(cb_list)\n\n    def _report_debug_data(self, data):\n\"\"\"\n        Print debug data sent from Arduino\n        :param data: data[0] is a byte followed by 2\n                     bytes that comprise an integer\n        :return:\n        \"\"\"\n        value = (data[1] &lt;&lt; 8) + data[2]\n        print(f'DEBUG ID: {data[0]} Value: {value}')\n\n    def _report_loop_data(self, data):\n\"\"\"\n        Print data that was looped back\n        :param data: byte of loop back data\n        :return:\n        \"\"\"\n        if self.loop_back_callback:\n            self.loop_back_callback(data)\n\n    def _send_command(self, command):\n\"\"\"\n        This is a private utility method.\n\n\n        :param command:  command data in the form of a list\n\n        \"\"\"\n        # the length of the list is added at the head\n        command.insert(0, len(command))\n        send_message = bytes(command)\n\n        if self.serial_port:\n            try:\n                self.serial_port.write(send_message)\n            except SerialException:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n                raise RuntimeError('write fail in _send_command')\n        elif self.transport_address:\n            self.sock.sendall(send_message)\n        else:\n            raise RuntimeError('No serial port or ip address set.')\n\n    def _servo_unavailable(self, report):\n\"\"\"\n        Message if no servos are available for use.\n        :param report: pin number\n        \"\"\"\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(\n            f'Servo Attach For Pin {report[0]} Failed: No Available Servos')\n\n    def _sonar_distance_report(self, report):\n\"\"\"\n\n        :param report: data[0] = trigger pin, data[1] and data[2] = distance\n\n        callback report format: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n        \"\"\"\n\n        # get callback from pin number\n        cb = self.sonar_callbacks[report[0]]\n\n        # build report data\n        cb_list = [PrivateConstants.SONAR_DISTANCE, report[0],\n                   ((report[1] &lt;&lt; 8) + report[2]), time.time()]\n\n        cb(cb_list)\n\n    def _stepper_distance_to_go_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper distance to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = steps MSB, data[2] = steps byte 1,\n    #                              data[3] = steps bytes 2, data[4] = steps LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_DISTANCE_TO_GO, motor_id\n    #                              steps, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['distance_to_go_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     steps = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     num_steps = int.from_bytes(steps, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_DISTANCE_TO_GO, report[0], num_steps,\n    #                time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_target_position_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper target position to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = target position MSB,\n    #                    data[2] = target position byte MSB+1\n    #                    data[3] = target position byte MSB+2\n    #                    data[4] = target position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_TARGET_POSITION, motor_id\n    #                              target_position, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['target_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     target = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     target_position = int.from_bytes(target, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_TARGET_POSITION, report[0], target_position,\n    #                time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_current_position_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report stepper current position.\n    #\n    #     :param report: data[0] = motor_id, data[1] = current position MSB,\n    #                    data[2] = current position byte MSB+1\n    #                    data[3] = current position byte MSB+2\n    #                    data[4] = current position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_CURRENT_POSITION, motor_id\n    #                              current_position, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['current_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     position = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     current_position = int.from_bytes(position, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_CURRENT_POSITION, report[0], current_position,\n    #                time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_is_running_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     Report if the motor is currently running\n    #\n    #     :param report: data[0] = motor_id, True if motor is running or False if it is not.\n    #\n    #     callback report format: [18, motor_id,\n    #                              running_state, time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['is_running_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUNNING_REPORT, report[0], time.time()]\n    #\n    #     cb(cb_list)\n    #\n\n    def _stepper_run_complete_report(self, report):\n        return  # for now\n    #     \"\"\"\n    #     The motor completed it motion\n    #\n    #     :param report: data[0] = motor_id\n    #\n    #     callback report format: [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, motor_id,\n    #                              time_stamp]\n    #     \"\"\"\n    #\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['motion_complete_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, report[0],\n    #                time.time()]\n    #\n    #     cb(cb_list)\n\n    def _features_report(self, report):\n        self.reported_features = report[0]\n\n    def _run_threads(self):\n        self.run_event.set()\n\n    def _is_running(self):\n        return self.run_event.is_set()\n\n    def _stop_threads(self):\n        self.run_event.clear()\n\n    def _reporter(self):\n\"\"\"\n        This is the reporter thread. It continuously pulls data from\n        the deque. When a full message is detected, that message is\n        processed.\n        \"\"\"\n        self.run_event.wait()\n\n        while self._is_running() and not self.shutdown_flag:\n            if len(self.the_deque):\n                # response_data will be populated with the received data for the report\n                response_data = []\n                packet_length = self.the_deque.popleft()\n                # print(f'packet_length {packet_length}')\n                if packet_length:\n                    # get all the data for the report and place it into response_data\n                    for i in range(packet_length):\n                        while not len(self.the_deque):\n                            time.sleep(self.sleep_tune)\n                        data = self.the_deque.popleft()\n                        response_data.append(data)\n\n                    # print(f'response_data {response_data}')\n\n                    # get the report type and look up its dispatch method\n                    # here we pop the report type off of response_data\n                    report_type = response_data.pop(0)\n                    # print(f' reported type {report_type}')\n\n                    # retrieve the report handler from the dispatch table\n                    dispatch_entry = self.report_dispatch.get(report_type)\n\n                    # if there is additional data for the report,\n                    # it will be contained in response_data\n                    # noinspection PyArgumentList\n                    dispatch_entry(response_data)\n                    continue\n                else:\n                    if self.shutdown_on_exception:\n                        self.shutdown()\n                    raise RuntimeError(\n                        'A report with a packet length of zero was received.')\n            else:\n                time.sleep(self.sleep_tune)\n\n    def _serial_receiver(self):\n\"\"\"\n        Thread to continuously check for incoming data.\n        When a byte comes in, place it onto the deque.\n        \"\"\"\n        self.run_event.wait()\n\n        # Don't start this thread if using a tcp/ip transport\n        if self.transport_address:\n            return\n\n        while self._is_running() and not self.shutdown_flag:\n            # we can get an OSError: [Errno9] Bad file descriptor when shutting down\n            # just ignore it\n            try:\n                if self.serial_port.inWaiting():\n                    c = self.serial_port.read()\n                    self.the_deque.append(ord(c))\n                    # print(ord(c))\n                else:\n                    time.sleep(self.sleep_tune)\n                    # continue\n            except OSError:\n                pass\n\n    def _tcp_receiver(self):\n\"\"\"\n        Thread to continuously check for incoming data.\n        When a byte comes in, place it onto the deque.\n        \"\"\"\n        self.run_event.wait()\n\n        # Start this thread only if transport_address is set\n\n        if self.transport_address:\n\n            while self._is_running() and not self.shutdown_flag:\n                try:\n                    payload = self.sock.recv(1)\n                    self.the_deque.append(ord(payload))\n                except Exception:\n                    pass\n        else:\n            return\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.__init__","title":"<code>__init__(com_port=None, arduino_instance_id=1, arduino_wait=1, sleep_tune=1e-06, shutdown_on_exception=True, hard_reset_on_shutdown=True, transport_address=None, ip_port=31336, transport_type=0)</code>","text":"<p>:param com_port: e.g. COM3 or /dev/ttyACM0.                  Only use if you wish to bypass auto com port                  detection.</p> <p>:param arduino_instance_id: Match with the value installed on the                             arduino-telemetrix sketch.</p> <p>:param arduino_wait: Amount of time to wait for an Arduino to                      fully reset itself.</p> <p>:param sleep_tune: A tuning parameter (typically not changed by user)</p> <p>:param shutdown_on_exception: call shutdown before raising                               a RunTimeError exception, or                               receiving a KeyboardInterrupt exception</p> <p>:param hard_reset_on_shutdown: reset the board on shutdown</p> <p>:param transport_address: ip address of tcp/ip connected device.</p> <p>:param ip_port: ip port of tcp/ip connected device</p> <p>:param transport_type: 0 = WiFI                        1 = USBSerial                        2 = BLE</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def __init__(self, com_port=None, arduino_instance_id=1,\n             arduino_wait=1, sleep_tune=0.000001,\n             shutdown_on_exception=True, hard_reset_on_shutdown=True,\n             transport_address=None, ip_port=31336, transport_type=0):\n\n\"\"\"\n\n    :param com_port: e.g. COM3 or /dev/ttyACM0.\n                     Only use if you wish to bypass auto com port\n                     detection.\n\n    :param arduino_instance_id: Match with the value installed on the\n                                arduino-telemetrix sketch.\n\n    :param arduino_wait: Amount of time to wait for an Arduino to\n                         fully reset itself.\n\n    :param sleep_tune: A tuning parameter (typically not changed by user)\n\n    :param shutdown_on_exception: call shutdown before raising\n                                  a RunTimeError exception, or\n                                  receiving a KeyboardInterrupt exception\n\n    :param hard_reset_on_shutdown: reset the board on shutdown\n\n    :param transport_address: ip address of tcp/ip connected device.\n\n    :param ip_port: ip port of tcp/ip connected device\n\n    :param transport_type: 0 = WiFI\n                           1 = USBSerial\n                           2 = BLE\n\n\n    \"\"\"\n\n    # initialize threading parent\n    threading.Thread.__init__(self)\n\n    # create the threads and set them as daemons so\n    # that they stop when the program is closed\n\n    # create a thread to interpret received serial data\n    self.the_reporter_thread = threading.Thread(target=self._reporter)\n    self.the_reporter_thread.daemon = True\n\n    self.transport_address = transport_address\n    self.ip_port = ip_port\n\n    if transport_type not in [0, 1, 2]:\n        raise RuntimeError(\"Valid transport_type value is 0, 1, or 2\")\n\n    self.transport_type = transport_type\n\n    if transport_type == 0:\n        if not transport_address:\n            raise RuntimeError(\"An IP address must be specified.\")\n\n    if not self.transport_address:\n        self.the_data_receive_thread = threading.Thread(target=self._serial_receiver)\n    else:\n        self.the_data_receive_thread = threading.Thread(target=self._tcp_receiver)\n\n    self.the_data_receive_thread.daemon = True\n\n    # flag to allow the reporter and receive threads to run.\n    self.run_event = threading.Event()\n\n    # check to make sure that Python interpreter is version 3.7 or greater\n    python_version = sys.version_info\n    if python_version[0] &gt;= 3:\n        if python_version[1] &gt;= 7:\n            pass\n        else:\n            raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                               \"required for use of this program.\")\n\n    # save input parameters as instance variables\n    self.com_port = com_port\n    self.arduino_instance_id = arduino_instance_id\n    self.arduino_wait = arduino_wait\n    self.sleep_tune = sleep_tune\n    self.shutdown_on_exception = shutdown_on_exception\n    self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n    # create a deque to receive and process data from the arduino\n    self.the_deque = deque()\n\n    # The report_dispatch dictionary is used to process\n    # incoming report messages by looking up the report message\n    # and executing its associated processing method.\n\n    self.report_dispatch = {}\n\n    # To add a command to the command dispatch table, append here.\n    self.report_dispatch.update(\n        {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n    self.report_dispatch.update(\n        {PrivateConstants.ANALOG_REPORT: self._analog_message})\n    self.report_dispatch.update(\n        {PrivateConstants.FIRMWARE_REPORT: self._firmware_message})\n    self.report_dispatch.update({PrivateConstants.I_AM_HERE_REPORT: self._i_am_here})\n    self.report_dispatch.update(\n        {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n    self.report_dispatch.update(\n        {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n    self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n    self.report_dispatch.update(\n        {PrivateConstants.SPI_REPORT: self._spi_report})\n    self.report_dispatch.update(\n        {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_CURRENT_POSITION:\n             self._stepper_current_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUNNING_REPORT:\n             self._stepper_is_running_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n             self._stepper_run_complete_report})\n\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.FEATURES:\n             self._features_report})\n\n    # dictionaries to store the callbacks for each pin\n    self.analog_callbacks = {}\n\n    self.digital_callbacks = {}\n\n    self.i2c_callback = None\n    self.i2c_callback2 = None\n\n    self.i2c_1_active = False\n    self.i2c_2_active = False\n\n    self.spi_callback = None\n\n    self.onewire_callback = None\n\n    self.cs_pins_enabled = []\n\n    # the trigger pin will be the key to retrieve\n    # the callback for a specific HC-SR04\n    self.sonar_callbacks = {}\n\n    self.sonar_count = 0\n\n    self.dht_callbacks = {}\n\n    self.dht_count = 0\n\n    # serial port in use\n    self.serial_port = None\n\n    # socket for tcp/ip communications\n    self.sock = None\n\n    # flag to indicate we are in shutdown mode\n    self.shutdown_flag = False\n\n    # debug loopback callback method\n    self.loop_back_callback = None\n\n    # flag to indicate the start of a new report\n    # self.new_report_start = True\n\n    # firmware version to be stored here\n    self.firmware_version = []\n\n    # reported arduino instance id\n    self.reported_arduino_id = []\n\n    # reported features\n    self.reported_features = 0\n\n    # flag to indicate if i2c was previously enabled\n    self.i2c_enabled = False\n\n    # flag to indicate if spi is initialized\n    self.spi_enabled = False\n\n    # flag to indicate if onewire is initialized\n    self.onewire_enabled = False\n\n    # stepper motor variables\n\n    # updated when a new motor is added\n    # self.next_stepper_assigned = 0\n    #\n    # # valid list of stepper motor interface types\n    # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n    #\n    # # maximum number of steppers supported\n    # self.max_number_of_steppers = 4\n    #\n    # # number of steppers created - not to exceed the maximum\n    # self.number_of_steppers = 0\n    #\n    # # dictionary to hold stepper motor information\n    # self.stepper_info = {'instance': False, 'is_running': None,\n    #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n    #                      'distance_to_go_callback': None,\n    #                      'target_position_callback': None,\n    #                      'current_position_callback': None,\n    #                      'is_running_callback': None,\n    #                      'motion_complete_callback': None,\n    #                      'acceleration_callback': None}\n    #\n    # # build a list of stepper motor info items\n    # self.stepper_info_list = []\n    # # a list of dictionaries to hold stepper information\n    # for motor in range(self.max_number_of_steppers):\n    #     self.stepper_info_list.append(self.stepper_info.copy())\n\n    self.the_reporter_thread.start()\n    self.the_data_receive_thread.start()\n\n    print(f\"telemetrix_uno_r4_wifi:  Version\"\n          f\" {PrivateConstants.TELEMETRIX_VERSION}\\n\\n\"\n          f\"Copyright (c) 2023 Alan Yorinks All Rights Reserved.\\n\")\n\n    # using the serial link\n    if not self.transport_address:\n        if not self.com_port:\n            # user did not specify a com_port\n            try:\n                self._find_arduino()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n        else:\n            # com_port specified - set com_port and baud rate\n            try:\n                self._manual_open()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    self.shutdown()\n\n        if self.serial_port:\n            print(\n                f\"Arduino compatible device found and connected to {self.serial_port.port}\")\n\n            self.serial_port.reset_input_buffer()\n            self.serial_port.reset_output_buffer()\n            self.disable_scroll_message()\n\n        # no com_port found - raise a runtime exception\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('No Arduino Found or User Aborted Program')\n    else:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((self.transport_address, self.ip_port))\n        print(f'Successfully connected to: {self.transport_address}:{self.ip_port}')\n\n    # allow the threads to run\n    self._run_threads()\n    print(f'Waiting for Arduino to reset')\n    print(f'Reset Complete')\n\n    # get telemetrix firmware version and print it\n    print('\\nRetrieving Telemetrix4UnoR4WiFi firmware ID...')\n    self._get_firmware_version()\n    if not self.firmware_version:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'Telemetrix4UnoR4WiFi firmware version')\n\n    else:\n\n        print(f'Telemetrix4UnoR4WiFi firmware version: {self.firmware_version[0]}.'\n              f'{self.firmware_version[1]}.{self.firmware_version[2]}')\n    command = [PrivateConstants.ENABLE_ALL_REPORTS]\n    self._send_command(command)\n\n    # get the features list\n    command = [PrivateConstants.GET_FEATURES]\n    self._send_command(command)\n    time.sleep(.2)\n\n    # Have the server reset its data structures\n    command = [PrivateConstants.RESET]\n    self._send_command(command)\n    time.sleep(.2)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.analog_write","title":"<code>analog_write(pin, value)</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (maximum 16 bits)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def analog_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (maximum 16 bits)\n\n    \"\"\"\n    value_msb = value &gt;&gt; 8\n    value_lsb = value &amp; 0xff\n    command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.digital_write","title":"<code>digital_write(pin, value)</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (1 or 0)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def digital_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (1 or 0)\n\n    \"\"\"\n\n    command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.disable_all_reporting","title":"<code>disable_all_reporting()</code>","text":"<p>Disable reporting for all digital and analog input pins</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def disable_all_reporting(self):\n\"\"\"\n    Disable reporting for all digital and analog input pins\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DISABLE_ALL, 0]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.disable_analog_reporting","title":"<code>disable_analog_reporting(pin)</code>","text":"<p>Disables analog reporting for a single analog pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def disable_analog_reporting(self, pin):\n\"\"\"\n    Disables analog reporting for a single analog pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.disable_digital_reporting","title":"<code>disable_digital_reporting(pin)</code>","text":"<p>Disables digital reporting for a single digital input.</p> <p>:param pin: Pin number.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def disable_digital_reporting(self, pin):\n\"\"\"\n    Disables digital reporting for a single digital input.\n\n    :param pin: Pin number.\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.disable_scroll_message","title":"<code>disable_scroll_message()</code>","text":"<p>Turn off a scrolling message</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def disable_scroll_message(self):\n\"\"\"\n    Turn off a scrolling message\n    \"\"\"\n\n    command = [PrivateConstants.SCROLL_MESSAGE_OFF]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.enable_analog_reporting","title":"<code>enable_analog_reporting(pin)</code>","text":"<p>Enables analog reporting for the specified pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def enable_analog_reporting(self, pin):\n\"\"\"\n    Enables analog reporting for the specified pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.enable_digital_reporting","title":"<code>enable_digital_reporting(pin)</code>","text":"<p>Enable reporting on the specified digital pin.</p> <p>:param pin: Pin number.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def enable_digital_reporting(self, pin):\n\"\"\"\n    Enable reporting on the specified digital pin.\n\n    :param pin: Pin number.\n    \"\"\"\n\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.enable_scroll_message","title":"<code>enable_scroll_message(message, scroll_speed=50)</code>","text":"<p>:param message: Message with maximum length of 25 :param scroll_speed: in milliseconds (maximum of 255)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def enable_scroll_message(self, message, scroll_speed=50):\n\"\"\"\n\n    :param message: Message with maximum length of 25\n    :param scroll_speed: in milliseconds (maximum of 255)\n    \"\"\"\n    if len(message) &gt; 25:\n        raise RuntimeError(\"Scroll message size is maximum of 25 characters.\")\n\n    if scroll_speed &gt; 255:\n        raise RuntimeError(\"Scroll speed maximum of 255 milliseconds.\")\n\n    message = message.encode()\n    command = [PrivateConstants.SCROLL_MESSAGE_ON, len(message), scroll_speed]\n    for x in message:\n        command.append(x)\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.i2c_read","title":"<code>i2c_read(address, register, number_of_bytes, callback=None, i2c_port=0, write_register=True)</code>","text":"<p>Read the specified number of bytes from the  specified register for the i2c device.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register                                 selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report                   i2c data as a result of read command</p> <p>:param i2c_port: 0 = default, 1 = secondary</p> <p>:param write_register: If True, the register is written                                 before read                        Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,     bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def i2c_read(self, address, register, number_of_bytes,\n             callback=None, i2c_port=0,\n             write_register=True):\n\"\"\"\n    Read the specified number of bytes from the\n    specified register for the i2c device.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register\n                                   selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report\n                     i2c data as a result of read command\n\n   :param i2c_port: 0 = default, 1 = secondary\n\n   :param write_register: If True, the register is written\n                                   before read\n                          Else, the write is suppressed\n\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n\n    self._i2c_read_request(address, register, number_of_bytes,\n                           callback=callback, i2c_port=i2c_port,\n                           write_register=write_register)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.i2c_read_restart_transmission","title":"<code>i2c_read_restart_transmission(address, register, number_of_bytes, callback=None, i2c_port=0, write_register=True)</code>","text":"<p>Read the specified number of bytes from the specified  register for the i2c device. This restarts the transmission  after the read. It is required for some i2c devices such as the MMA8452Q  accelerometer.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register                                              selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report i2c                   data as a result of read command</p> <p>:param i2c_port: 0 = default 1 = secondary</p> <p>:param write_register: If True, the register is written before read                        Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,     bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def i2c_read_restart_transmission(self, address, register,\n                                  number_of_bytes,\n                                  callback=None, i2c_port=0,\n                                  write_register=True):\n\"\"\"\n    Read the specified number of bytes from the specified\n    register for the i2c device. This restarts the transmission\n    after the read. It is required for some i2c devices such as the MMA8452Q\n    accelerometer.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register\n                                                selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report i2c\n                     data as a result of read command\n\n   :param i2c_port: 0 = default 1 = secondary\n\n   :param write_register: If True, the register is written before read\n                          Else, the write is suppressed\n\n\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n\n    self._i2c_read_request(address, register, number_of_bytes,\n                           stop_transmission=False,\n                           callback=callback, i2c_port=i2c_port,\n                           write_register=write_register)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.i2c_write","title":"<code>i2c_write(address, args, i2c_port=0)</code>","text":"<p>Write data to an i2c device.</p> <p>:param address: i2c device address</p> <p>:param i2c_port: 0= port 1, 1 = port 2</p> <p>:param args: A variable number of bytes to be sent to the device              passed in as a list</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n    Write data to an i2c device.\n\n    :param address: i2c device address\n\n    :param i2c_port: 0= port 1, 1 = port 2\n\n    :param args: A variable number of bytes to be sent to the device\n                 passed in as a list\n\n    \"\"\"\n    if not i2c_port:\n        if not self.i2c_1_active:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n    if i2c_port:\n        if not self.i2c_2_active:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n    command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n    for item in args:\n        command.append(item)\n\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.loop_back","title":"<code>loop_back(start_character, callback=None)</code>","text":"<p>This is a debugging method to send a character to the Arduino device, and have the device loop it back.</p> <p>:param start_character: The character to loop back. It should be                         an integer.</p> <p>:param callback: Looped back character will appear in the callback method</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def loop_back(self, start_character, callback=None):\n\"\"\"\n    This is a debugging method to send a character to the\n    Arduino device, and have the device loop it back.\n\n    :param start_character: The character to loop back. It should be\n                            an integer.\n\n    :param callback: Looped back character will appear in the callback method\n\n    \"\"\"\n    command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n    self.loop_back_callback = callback\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.r4_hard_reset","title":"<code>r4_hard_reset()</code>","text":"<p>Place the r4 into hard reset</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def r4_hard_reset(self):\n\"\"\"\n    Place the r4 into hard reset\n    \"\"\"\n    command = [PrivateConstants.RESET, 1]\n    self._send_command(command)\n    time.sleep(.5)\n    command = [PrivateConstants.BOARD_HARD_RESET, 1]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.servo_detach","title":"<code>servo_detach(pin_number)</code>","text":"<p>Detach a servo for reuse</p> <p>:param pin_number: attached pin</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def servo_detach(self, pin_number):\n\"\"\"\n    Detach a servo for reuse\n\n    :param pin_number: attached pin\n\n    \"\"\"\n    command = [PrivateConstants.SERVO_DETACH, pin_number]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.servo_write","title":"<code>servo_write(pin_number, angle)</code>","text":"<p>Set a servo attached to a pin to a given angle.</p> <p>:param pin_number: pin</p> <p>:param angle: angle (0-180)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def servo_write(self, pin_number, angle):\n\"\"\"\n\n    Set a servo attached to a pin to a given angle.\n\n    :param pin_number: pin\n\n    :param angle: angle (0-180)\n\n    \"\"\"\n    command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_analog_scan_interval","title":"<code>set_analog_scan_interval(interval)</code>","text":"<p>Set the analog scanning interval.</p> <p>:param interval: value of 0 - 255 - milliseconds</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_analog_scan_interval(self, interval):\n\"\"\"\n    Set the analog scanning interval.\n\n    :param interval: value of 0 - 255 - milliseconds\n    \"\"\"\n\n    if 0 &lt;= interval &lt;= 255:\n        command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n        self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('Analog interval must be between 0 and 255')\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_analog_input","title":"<code>set_pin_mode_analog_input(pin_number, differential=0, callback=None)</code>","text":"<p>Set a pin as an analog input.</p> <p>:param pin_number: arduino pin number</p> <p>:param differential: difference in previous to current value before                      report will be generated</p> <p>:param callback: callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for analog input pins = 3</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n    Set a pin as an analog input.\n\n    :param pin_number: arduino pin number\n\n    :param differential: difference in previous to current value before\n                         report will be generated\n\n    :param callback: callback function\n\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for analog input pins = 3\n\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG, differential,\n                       callback)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_analog_output","title":"<code>set_pin_mode_analog_output(pin_number)</code>","text":"<p>Set a pin as a pwm (analog output) pin.</p> <p>:param pin_number:arduino pin number</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n    Set a pin as a pwm (analog output) pin.\n\n    :param pin_number:arduino pin number\n\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_dht","title":"<code>set_pin_mode_dht(pin, callback=None, dht_type=22)</code>","text":"<p>:param pin: connection pin</p> <p>:param callback: callback function</p> <p>:param dht_type: either 22 for DHT22 or 11 for DHT11</p> <p>Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]</p> <p>Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity, Temperature, Time]</p> <p>DHT_REPORT_TYPE = 12</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n    :param pin: connection pin\n\n    :param callback: callback function\n\n    :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n    Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n    Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n    Temperature,\n    Time]\n\n    DHT_REPORT_TYPE = 12\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n        if not callback:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n        if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n            self.dht_callbacks[pin] = callback\n            self.dht_count += 1\n\n            if dht_type != 22 and dht_type != 11:\n                dht_type = 22\n\n            command = [PrivateConstants.DHT_NEW, pin, dht_type]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The DHT feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_digital_input","title":"<code>set_pin_mode_digital_input(pin_number, callback=None)</code>","text":"<p>Set a pin as a digital input.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_digital_input(self, pin_number, callback=None):\n\"\"\"\n    Set a pin as a digital input.\n\n    :param pin_number: arduino pin number\n\n    :param callback: callback function\n\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, callback=callback)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_digital_input_pullup","title":"<code>set_pin_mode_digital_input_pullup(pin_number, callback=None)</code>","text":"<p>Set a pin as a digital input with pullup enabled.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_digital_input_pullup(self, pin_number, callback=None):\n\"\"\"\n    Set a pin as a digital input with pullup enabled.\n\n    :param pin_number: arduino pin number\n\n    :param callback: callback function\n\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n    \"\"\"\n    self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                       callback=callback)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_digital_output","title":"<code>set_pin_mode_digital_output(pin_number)</code>","text":"<p>Set a pin as a digital output pin.</p> <p>:param pin_number: arduino pin number</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n    Set a pin as a digital output pin.\n\n    :param pin_number: arduino pin number\n    \"\"\"\n\n    self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_i2c","title":"<code>set_pin_mode_i2c(i2c_port=0)</code>","text":"<p>Establish the standard Arduino i2c pins for i2c utilization.</p> <p>:param i2c_port: 0 = i2c1, 1 = i2c2</p> <ol> <li>THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE</li> </ol> <ol> <li>Callbacks are set within the individual i2c read methods of this</li> </ol> <pre><code>  API.\n\n  See i2c_read, or i2c_read_restart_transmission.\n</code></pre> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n    Establish the standard Arduino i2c pins for i2c utilization.\n\n    :param i2c_port: 0 = i2c1, 1 = i2c2\n\n    NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n           2. Callbacks are set within the individual i2c read methods of this\n          API.\n\n          See i2c_read, or i2c_read_restart_transmission.\n\n    \"\"\"\n    # test for i2c port 2\n    if i2c_port:\n        # if not previously activated set it to activated\n        # and the send a begin message for this port\n        if not self.i2c_2_active:\n            self.i2c_2_active = True\n        else:\n            return\n    # port 1\n    else:\n        if not self.i2c_1_active:\n            self.i2c_1_active = True\n        else:\n            return\n\n    command = [PrivateConstants.I2C_BEGIN, i2c_port]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_servo","title":"<code>set_pin_mode_servo(pin_number, min_pulse=544, max_pulse=2400)</code>","text":"<p>Attach a pin to a servo motor</p> <p>:param pin_number: pin</p> <p>:param min_pulse: minimum pulse width</p> <p>:param max_pulse: maximum pulse width</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n    Attach a pin to a servo motor\n\n    :param pin_number: pin\n\n    :param min_pulse: minimum pulse width\n\n    :param max_pulse: maximum pulse width\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n        minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n        maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n        command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                   minv[0], minv[1], maxv[0], maxv[1]]\n        self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The SERVO feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_sonar","title":"<code>set_pin_mode_sonar(trigger_pin, echo_pin, callback=None)</code>","text":"<p>:param trigger_pin:</p> <p>:param echo_pin:</p> <p>:param callback: callback</p> <p>callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                       callback=None):\n\"\"\"\n\n    :param trigger_pin:\n\n    :param echo_pin:\n\n    :param callback: callback\n\n    callback data: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n        if not callback:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n        if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n            self.sonar_callbacks[trigger_pin] = callback\n            self.sonar_count += 1\n\n            command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n            self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The SONAR feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.set_pin_mode_spi","title":"<code>set_pin_mode_spi(chip_select_list=None)</code>","text":"<p>Specify the list of chip select pins.</p> <p>Standard Arduino MISO, MOSI and CLK pins are used for the board in use.</p> <p>Chip Select is any digital output capable pin.</p> <p>:param chip_select_list: this is a list of pins to be used for chip select.                    The pins will be configured as output, and set to high                    ready to be used for chip select.                    NOTE: You must specify the chips select pins here!</p> <p>command message: [command, [cs pins...]]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n    Specify the list of chip select pins.\n\n    Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n    Chip Select is any digital output capable pin.\n\n    :param chip_select_list: this is a list of pins to be used for chip select.\n                       The pins will be configured as output, and set to high\n                       ready to be used for chip select.\n                       NOTE: You must specify the chips select pins here!\n\n\n    command message: [command, [cs pins...]]\n    \"\"\"\n\n    if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n        if type(chip_select_list) is not list:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('chip_select_list must be in the form of a list')\n        if not chip_select_list:\n            if self.shutdown_on_exception:\n                self.shutdown()\n            raise RuntimeError('Chip select pins were not specified')\n\n        self.spi_enabled = True\n\n        command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n        for pin in chip_select_list:\n            command.append(pin)\n            self.cs_pins_enabled.append(pin)\n        self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'The SPI feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.shutdown","title":"<code>shutdown()</code>","text":"<p>This method attempts an orderly shutdown If any exceptions are thrown, they are ignored.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def shutdown(self):\n\"\"\"\n    This method attempts an orderly shutdown\n    If any exceptions are thrown, they are ignored.\n    \"\"\"\n    self.shutdown_flag = True\n\n    self._stop_threads()\n\n    try:\n        command = [PrivateConstants.STOP_ALL_REPORTS]\n        self._send_command(command)\n        time.sleep(.5)\n\n        if self.hard_reset_on_shutdown:\n            self.r4_hard_reset()\n\n        if self.transport_address:\n            try:\n                self.sock.shutdown(socket.SHUT_RDWR)\n                self.sock.close()\n            except Exception:\n                pass\n        else:\n            try:\n                self.serial_port.reset_input_buffer()\n                self.serial_port.reset_output_buffer()\n\n                self.serial_port.close()\n\n            except (RuntimeError, SerialException, OSError):\n                # ignore error on shutdown\n                pass\n    except Exception:\n        # raise RuntimeError('Shutdown failed - could not send stop streaming\n        # message')\n        pass\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.sonar_disable","title":"<code>sonar_disable()</code>","text":"<p>Disable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def sonar_disable(self):\n\"\"\"\n    Disable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_DISABLE]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.sonar_enable","title":"<code>sonar_enable()</code>","text":"<p>Enable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def sonar_enable(self):\n\"\"\"\n    Enable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_ENABLE]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.spi_cs_control","title":"<code>spi_cs_control(chip_select_pin, select)</code>","text":"<p>Control an SPI chip select line :param chip_select_pin: pin connected to CS</p> <p>:param select: 0=select, 1=deselect</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n    Control an SPI chip select line\n    :param chip_select_pin: pin connected to CS\n\n    :param select: 0=select, 1=deselect\n    \"\"\"\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n    if chip_select_pin not in self.cs_pins_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n    command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.spi_read_blocking","title":"<code>spi_read_blocking(chip_select, register_selection, number_of_bytes_to_read, call_back=None)</code>","text":"<p>Read the specified number of bytes from the specified SPI port and call the callback function with the reported data.</p> <p>:param chip_select: chip select pin</p> <p>:param register_selection: Register to be selected for read.</p> <p>:param number_of_bytes_to_read: Number of bytes to read</p> <p>:param call_back: Required callback function to report spi data as a            result of read command</p> <p>callback returns a data list: [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read, data bytes, time-stamp]</p> <p>SPI_READ_REPORT = 13</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def spi_read_blocking(self, chip_select, register_selection, number_of_bytes_to_read,\n                      call_back=None):\n\"\"\"\n    Read the specified number of bytes from the specified SPI port and\n    call the callback function with the reported data.\n\n    :param chip_select: chip select pin\n\n    :param register_selection: Register to be selected for read.\n\n    :param number_of_bytes_to_read: Number of bytes to read\n\n    :param call_back: Required callback function to report spi data as a\n               result of read command\n\n\n    callback returns a data list:\n    [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n    data bytes, time-stamp]\n\n    SPI_READ_REPORT = 13\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n    if not call_back:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n    self.spi_callback = call_back\n\n    command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n               number_of_bytes_to_read,\n               register_selection]\n\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.spi_set_format","title":"<code>spi_set_format(clock_divisor, bit_order, data_mode)</code>","text":"<p>Configure how the SPI serializes and de-serializes data on the wire.</p> <p>See Arduino SPI reference materials for details.</p> <p>:param clock_divisor: 1 - 255</p> <p>:param bit_order:</p> <pre><code>                LSBFIRST = 0\n\n                MSBFIRST = 1 (default)\n</code></pre> <p>:param data_mode:</p> <pre><code>                SPI_MODE0 = 0x00 (default)\n\n                SPI_MODE1  = 1\n\n                SPI_MODE2 = 2\n\n                SPI_MODE3 = 3\n</code></pre> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n    Configure how the SPI serializes and de-serializes data on the wire.\n\n    See Arduino SPI reference materials for details.\n\n    :param clock_divisor: 1 - 255\n\n    :param bit_order:\n\n                        LSBFIRST = 0\n\n                        MSBFIRST = 1 (default)\n\n    :param data_mode:\n\n                        SPI_MODE0 = 0x00 (default)\n\n                        SPI_MODE1  = 1\n\n                        SPI_MODE2 = 2\n\n                        SPI_MODE3 = 3\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n    if not 0 &lt; clock_divisor &lt;= 255:\n        raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n    if bit_order not in [0, 1]:\n        raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n    if data_mode not in [0, 1, 2, 3]:\n        raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n    command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n               data_mode]\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference/#telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi.spi_write_blocking","title":"<code>spi_write_blocking(chip_select, bytes_to_write)</code>","text":"<p>Write a list of bytes to the SPI device.</p> <p>:param chip_select: chip select pin</p> <p>:param bytes_to_write: A list of bytes to write. This must                         be in the form of a list.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi/telemetrix_uno_r4_wifi.py</code> <pre><code>def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n    Write a list of bytes to the SPI device.\n\n    :param chip_select: chip select pin\n\n    :param bytes_to_write: A list of bytes to write. This must\n                            be in the form of a list.\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n    if type(bytes_to_write) is not list:\n        if self.shutdown_on_exception:\n            self.shutdown()\n        raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n    command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n    for data in bytes_to_write:\n        command.append(data)\n\n    self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/","title":"telemetrix_uno_r4_wifi_aio","text":"<p>Copyright (c) 2023, 2024 Alan Yorinks All rights reserved.</p> <p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE Version 3 as published by the Free Software Foundation; either or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p> <p>You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</p>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio","title":"<code>TelemetrixUnoR4WiFiAio</code>","text":"<p>This class exposes and implements the TelemetrixUnoR4WifiAio API. It includes the public API methods as well as a set of private methods. This is an asyncio API.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>class TelemetrixUnoR4WiFiAio:\n\"\"\"\n    This class exposes and implements the TelemetrixUnoR4WifiAio API.\n    It includes the public API methods as well as\n    a set of private methods. This is an asyncio API.\n\n    \"\"\"\n\n    # noinspection PyPep8,PyPep8\n    def __init__(self, com_port=None,\n                 arduino_instance_id=1, arduino_wait=1,\n                 sleep_tune=0.0001, autostart=True,\n                 loop=None, shutdown_on_exception=True,\n                 close_loop_on_shutdown=True, hard_reset_on_shutdown=True,\n                 transport_address=None, ip_port=31336, transport_type=0,\n                 ble_device_name='Telemetrix4UnoR4 BLE'):\n\n\"\"\"\n        If you have a single Arduino connected to your computer,\n        then you may accept all the default values.\n\n        Otherwise, specify a unique arduino_instance id for each board in use.\n\n        :param com_port: e.g. COM3 or /dev/ttyACM0.\n\n        :param arduino_instance_id: Must match value in the Telemetrix4Arduino sketch\n\n        :param arduino_wait: Amount of time to wait for an Arduino to\n                             fully reset itself.\n\n        :param sleep_tune: A tuning parameter (typically not changed by user)\n\n        :param autostart: If you wish to call the start method within\n                          your application, then set this to False.\n\n        :param loop: optional user provided event loop\n\n        :param shutdown_on_exception: call shutdown before raising\n                                      a RunTimeError exception, or\n                                      receiving a KeyboardInterrupt exception\n\n        :param close_loop_on_shutdown: stop and close the event loop loop\n                                       when a shutdown is called or a serial\n                                       error occurs\n\n       :param hard_reset_on_shutdown: reset the board on shutdown\n\n       :param transport_address: ip address of tcp/ip connected device.\n\n        :param ip_port: ip port of tcp/ip connected device\n\n        :param transport_type: 0 = WiFi\n                               1 = SerialUSB\n                               2 = BLE\n\n       :param ble_device_name: name of Arduino UNO R4 WIFI BLE device.\n                               It must match that of Telemetrix4UnoR4BLE.ino\n\n        \"\"\"\n        # check to make sure that Python interpreter is version 3.8.3 or greater\n        python_version = sys.version_info\n        if python_version[0] &gt;= 3:\n            if python_version[1] &gt;= 8:\n                if python_version[2] &gt;= 3:\n                    pass\n            else:\n                raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                                   \"required for use of this program.\")\n\n        # save input parameters\n        self.com_port = com_port\n        self.arduino_instance_id = arduino_instance_id\n        self.arduino_wait = arduino_wait\n        self.sleep_tune = sleep_tune\n        self.autostart = autostart\n        self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n        self.transport_address = transport_address\n        self.ip_port = ip_port\n        if transport_type not in [0, 1, 2]:\n            raise RuntimeError('Invalid transport type')\n        self.transport_type = transport_type\n        self.firmware_version = None\n        # if tcp, this variable is set to the connected socket\n        self.sock = None\n\n        self.ble_device_name = ble_device_name\n\n        # instance of telemetrix_aio_ble\n        self.ble_instance = None\n\n        # set the event loop\n        if loop is None:\n            self.loop = asyncio.get_event_loop()\n        else:\n            self.loop = loop\n\n        self.shutdown_on_exception = shutdown_on_exception\n        self.close_loop_on_shutdown = close_loop_on_shutdown\n\n        # dictionaries to store the callbacks for each pin\n        self.analog_callbacks = {}\n\n        self.digital_callbacks = {}\n\n        self.i2c_callback = None\n        self.i2c_callback2 = None\n\n        self.i2c_1_active = False\n        self.i2c_2_active = False\n\n        self.spi_callback = None\n\n        self.onewire_callback = None\n\n        # debug loopback callback method\n        self.loop_back_callback = None\n\n        # the trigger pin will be the key to retrieve\n        # the callback for a specific HC-SR04\n        self.sonar_callbacks = {}\n\n        self.sonar_count = 0\n\n        self.dht_callbacks = {}\n\n        self.dht_count = 0\n\n        # serial port in use\n        self.serial_port = None\n\n        # generic asyncio task holder\n        self.the_task = None\n\n        # flag to indicate we are in shutdown mode\n        self.shutdown_flag = False\n\n        self.report_dispatch = {}\n\n        # reported features\n        self.reported_features = 0\n\n        # To add a command to the command dispatch table, append here.\n        self.report_dispatch.update(\n            {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n        self.report_dispatch.update(\n            {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n        self.report_dispatch.update(\n            {PrivateConstants.ANALOG_REPORT: self._analog_message})\n        self.report_dispatch.update(\n            {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n        self.report_dispatch.update(\n            {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n        self.report_dispatch.update(\n            {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n        self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n        self.report_dispatch.update(\n            {PrivateConstants.SPI_REPORT: self._spi_report})\n        self.report_dispatch.update(\n            {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_CURRENT_POSITION:\n                 self._stepper_current_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUNNING_REPORT:\n                 self._stepper_is_running_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n                 self._stepper_run_complete_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n                 self._stepper_distance_to_go_report})\n        self.report_dispatch.update(\n            {PrivateConstants.STEPPER_TARGET_POSITION:\n                 self._stepper_target_position_report})\n        self.report_dispatch.update(\n            {PrivateConstants.FEATURES:\n                 self._features_report})\n\n        # dictionaries to store the callbacks for each pin\n        self.analog_callbacks = {}\n\n        self.digital_callbacks = {}\n\n        self.i2c_callback = None\n        self.i2c_callback2 = None\n\n        self.i2c_1_active = False\n        self.i2c_2_active = False\n\n        self.spi_callback = None\n\n        self.onewire_callback = None\n\n        self.cs_pins_enabled = []\n\n        # flag to indicate if spi is initialized\n        self.spi_enabled = False\n\n        # flag to indicate if onewire is initialized\n        self.onewire_enabled = False\n\n        # the trigger pin will be the key to retrieve\n        # the callback for a specific HC-SR04\n        self.sonar_callbacks = {}\n\n        self.sonar_count = 0\n\n        self.dht_callbacks = {}\n\n        # # stepper motor variables\n        #\n        # # updated when a new motor is added\n        # self.next_stepper_assigned = 0\n        #\n        # # valid list of stepper motor interface types\n        # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n        #\n        # # maximum number of steppers supported\n        # self.max_number_of_steppers = 4\n        #\n        # # number of steppers created - not to exceed the maximum\n        # self.number_of_steppers = 0\n        #\n        # # dictionary to hold stepper motor information\n        # self.stepper_info = {'instance': False, 'is_running': None,\n        #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n        #                      'distance_to_go_callback': None,\n        #                      'target_position_callback': None,\n        #                      'current_position_callback': None,\n        #                      'is_running_callback': None,\n        #                      'motion_complete_callback': None,\n        #                      'acceleration_callback': None}\n        #\n        # # build a list of stepper motor info items\n        # self.stepper_info_list = []\n        # # a list of dictionaries to hold stepper information\n        # for motor in range(self.max_number_of_steppers):\n        #     self.stepper_info_list.append(self.stepper_info.copy())\n\n        print(f'telemetrix_uno_r4_wifi_aio Version:'\n              f' {PrivateConstants.TELEMETRIX_VERSION}')\n        print(f'Copyright (c) 2023 Alan Yorinks All rights reserved.\\n')\n\n        if autostart:\n            self.loop.run_until_complete(self.start_aio())\n\n    async def start_aio(self):\n\"\"\"\n        This method may be called directly, if the autostart\n        parameter in __init__ is set to false.\n\n        This method instantiates the serial interface and then performs auto pin\n        discovery if using a serial interface, or creates and connects to\n        a TCP/IP enabled device running StandardFirmataWiFi.\n\n        Use this method if you wish to start TelemetrixAIO manually from\n        an asyncio function.\n         \"\"\"\n\n        if self.transport_type == PrivateConstants.SERIAL_TRANSPORT:\n            if not self.com_port:\n                # user did not specify a com_port\n                try:\n                    await self._find_arduino()\n                except KeyboardInterrupt:\n                    if self.shutdown_on_exception:\n                        await self.shutdown()\n            else:\n                # com_port specified - set com_port and baud rate\n                try:\n                    await self._manual_open()\n                except KeyboardInterrupt:\n                    if self.shutdown_on_exception:\n                        await self.shutdown()\n\n            if self.com_port:\n                print(f'Telemetrix4UnoR4WIFI found and connected to {self.com_port}')\n\n                # no com_port found - raise a runtime exception\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('No Arduino Found or User Aborted Program')\n            await self.disable_scroll_message()\n            # using tcp/ip\n        elif self.transport_type == PrivateConstants.WIFI_TRANSPORT:\n            self.sock = TelemetrixAioSocket(self.transport_address, self.ip_port,\n                                            self.loop)\n            try:\n                await self.sock.start()\n            except OSError:\n                raise RuntimeError('Could not connect to this address')\n        else:  # ble\n            self.ble_instance = TelemetrixAioBle(self.ble_device_name,\n                                                 self._ble_report_dispatcher)\n            await self.ble_instance.connect()\n\n        # get arduino firmware version and print it\n        firmware_version = await self._get_firmware_version()\n        if not firmware_version:\n            print('*** Firmware Version retrieval timed out. ***')\n            print('\\nDo you have Arduino connectivity and do you have the ')\n            print('Telemetrix4UnoR4 sketch uploaded to the board and are connected')\n            print('to the correct serial port.\\n')\n            print('To see a list of serial ports, type: '\n                  '\"list_serial_ports\" in your console.')\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError\n        else:\n\n            print(f'Telemetrix4UnoR4 Version Number: {firmware_version[2]}.'\n                  f'{firmware_version[3]}.{firmware_version[4]}')\n            # start the command dispatcher loop\n            command = [PrivateConstants.ENABLE_ALL_REPORTS]\n            await self._send_command(command)\n            if not self.loop:\n                self.loop = asyncio.get_event_loop()\n            self.the_task = self.loop.create_task(self._arduino_report_dispatcher())\n\n            # get the features list\n            command = [PrivateConstants.GET_FEATURES]\n            await self._send_command(command)\n            await asyncio.sleep(.5)\n\n            # Have the server reset its data structures\n            command = [PrivateConstants.RESET]\n            await self._send_command(command)\n            await asyncio.sleep(.1)\n\n    async def get_event_loop(self):\n\"\"\"\n        Return the currently active asyncio event loop\n\n        :return: Active event loop\n\n        \"\"\"\n        return self.loop\n\n    async def _find_arduino(self):\n\"\"\"\n        This method will search all potential serial ports for an Arduino\n        containing a sketch that has a matching arduino_instance_id as\n        specified in the input parameters of this class.\n\n        This is used explicitly with the FirmataExpress sketch.\n        \"\"\"\n\n        # a list of serial ports to be checked\n        serial_ports = []\n\n        print('Opening all potential serial ports...')\n        the_ports_list = list_ports.comports()\n        for port in the_ports_list:\n            if port.pid is None:\n                continue\n            print('\\nChecking {}'.format(port.device))\n            try:\n                self.serial_port = TelemetrixAioSerial(port.device, 115200,\n                                                       telemetrix_aio_instance=self,\n                                                       close_loop_on_error=self.close_loop_on_shutdown)\n            except SerialException:\n                continue\n            # create a list of serial ports that we opened\n            serial_ports.append(self.serial_port)\n\n            # display to the user\n            print('\\t' + port.device)\n\n            # clear out any possible data in the input buffer\n            await self.serial_port.reset_input_buffer()\n\n        # wait for arduino to reset\n        print('\\nWaiting {} seconds(arduino_wait) for Arduino devices to '\n              'reset...'.format(self.arduino_wait))\n        await asyncio.sleep(self.arduino_wait)\n\n        print('\\nSearching for an Arduino configured with an arduino_instance = ',\n              self.arduino_instance_id)\n\n        for serial_port in serial_ports:\n            self.serial_port = serial_port\n\n            command = [PrivateConstants.ARE_U_THERE]\n            await self._send_command(command)\n            # provide time for the reply\n            await asyncio.sleep(.1)\n\n            i_am_here = await self.serial_port.read(3)\n\n            if not i_am_here:\n                continue\n\n            # got an I am here message - is it the correct ID?\n            if i_am_here[2] == self.arduino_instance_id:\n                self.com_port = serial_port.com_port\n                return\n\n    async def _manual_open(self):\n\"\"\"\n        Com port was specified by the user - try to open up that port\n\n        \"\"\"\n        # if port is not found, a serial exception will be thrown\n        print('Opening {} ...'.format(self.com_port))\n        self.serial_port = TelemetrixAioSerial(self.com_port, 115200,\n                                               telemetrix_aio_instance=self,\n                                               close_loop_on_error=self.close_loop_on_shutdown)\n\n        print('Waiting {} seconds for the Arduino To Reset.'\n              .format(self.arduino_wait))\n        await asyncio.sleep(self.arduino_wait)\n        command = [PrivateConstants.ARE_U_THERE]\n        await self._send_command(command)\n        # provide time for the reply\n        await asyncio.sleep(.1)\n\n        print(f'Searching for correct arduino_instance_id: {self.arduino_instance_id}')\n        i_am_here = await self.serial_port.read(3)\n\n        if not i_am_here:\n            print(f'ERROR: correct arduino_instance_id not found')\n\n        print('Correct arduino_instance_id found')\n\n    async def _get_firmware_version(self):\n\"\"\"\n        This method retrieves the Arduino4Telemetrix firmware version\n\n        :returns: Firmata firmware version\n        \"\"\"\n        self.firmware_version = None\n        command = [PrivateConstants.GET_FIRMWARE_VERSION]\n        await self._send_command(command)\n        # provide time for the reply\n        await asyncio.sleep(.3)\n        if self.transport_type == PrivateConstants.SERIAL_TRANSPORT:\n            self.firmware_version = await self.serial_port.read(5)\n        elif self.transport_type == PrivateConstants.WIFI_TRANSPORT:\n            self.firmware_version = list(await self.sock.read(5))\n        else:\n            pass\n        return self.firmware_version\n\n    async def analog_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (maximum 16 bits)\n\n        \"\"\"\n        value_msb = value &gt;&gt; 8\n        value_lsb = value &amp; 0xff\n        command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n        await self._send_command(command)\n\n    async def digital_write(self, pin, value):\n\"\"\"\n        Set the specified pin to the specified value.\n\n        :param pin: arduino pin number\n\n        :param value: pin value (1 or 0)\n\n        \"\"\"\n        command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n        await self._send_command(command)\n\n    async def i2c_read(self, address, register, number_of_bytes,\n                       callback, i2c_port=0,\n                       write_register=True):\n\"\"\"\n        Read the specified number of bytes from the specified register for\n        the i2c device.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command\n\n        :param i2c_port: select the default port (0) or secondary port (1)\n\n        :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('i2c_read: A Callback must be specified')\n\n        await self._i2c_read_request(address, register, number_of_bytes,\n                                     callback=callback, i2c_port=i2c_port,\n                                     write_register=write_register)\n\n    async def i2c_read_restart_transmission(self, address, register,\n                                            number_of_bytes,\n                                            callback, i2c_port=0,\n                                            write_register=True):\n\"\"\"\n        Read the specified number of bytes from the specified register for\n        the i2c device. This restarts the transmission after the read. It is\n        required for some i2c devices such as the MMA8452Q accelerometer.\n\n\n        :param address: i2c device address\n\n        :param register: i2c register (or None if no register\n                                                    selection is needed)\n\n        :param number_of_bytes: number of bytes to be read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command\n\n        :param i2c_port: select the default port (0) or secondary port (1)\n\n        :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n        callback returns a data list:\n\n        [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n           bytes read..., time-stamp]\n\n        \"\"\"\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'i2c_read_restart_transmission: A Callback must be specified')\n\n        await self._i2c_read_request(address, register, number_of_bytes,\n                                     stop_transmission=False,\n                                     callback=callback, i2c_port=i2c_port,\n                                     write_register=write_register)\n\n    async def _i2c_read_request(self, address, register, number_of_bytes,\n                                stop_transmission=True, callback=None,\n                                i2c_port=0, write_register=True):\n\"\"\"\n        This method requests the read of an i2c device. Results are retrieved\n        via callback.\n\n        :param address: i2c device address\n\n        :param register: register number (or None if no register selection is needed)\n\n        :param number_of_bytes: number of bytes expected to be returned\n\n        :param stop_transmission: stop transmission after read\n\n        :param callback: Required callback function to report i2c data as a\n                   result of read command.\n\n       :param i2c_port: select the default port (0) or secondary port (1)\n\n       :param write_register: If True, the register is written\n                                       before read\n                              Else, the write is suppressed\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Read: set_pin_mode i2c never called for i2c port 2.')\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('I2C Read: A callback function must be specified.')\n\n        if not i2c_port:\n            self.i2c_callback = callback\n        else:\n            self.i2c_callback2 = callback\n\n        if not register:\n            register = 0\n\n        if write_register:\n            write_register = 1\n        else:\n            write_register = 0\n\n        # message contains:\n        # 1. address\n        # 2. register\n        # 3. number of bytes\n        # 4. restart_transmission - True or False\n        # 5. i2c port\n        # 6. suppress write flag\n\n        command = [PrivateConstants.I2C_READ, address, register, number_of_bytes,\n                   stop_transmission, i2c_port, write_register]\n        await self._send_command(command)\n\n    async def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n        Write data to an i2c device.\n\n        :param address: i2c device address\n\n        :param i2c_port: 0= port 1, 1 = port 2\n\n        :param args: A variable number of bytes to be sent to the device\n                     passed in as a list\n\n        \"\"\"\n        if not i2c_port:\n            if not self.i2c_1_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n        if i2c_port:\n            if not self.i2c_2_active:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n        command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n        for item in args:\n            command.append(item)\n\n        await self._send_command(command)\n\n    async def loop_back(self, start_character, callback):\n\"\"\"\n        This is a debugging method to send a character to the\n        Arduino device, and have the device loop it back.\n\n        :param start_character: The character to loop back. It should be\n                                an integer.\n\n        :param callback: Looped back character will appear in the callback method\n\n        \"\"\"\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('loop_back: A callback function must be specified.')\n        command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n        self.loop_back_callback = callback\n        await self._send_command(command)\n\n    async def set_analog_scan_interval(self, interval):\n\"\"\"\n        Set the analog scanning interval.\n\n        :param interval: value of 0 - 255 - milliseconds\n        \"\"\"\n\n        if 0 &lt;= interval &lt;= 255:\n            command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('Analog interval must be between 0 and 255')\n\n    async def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n        Set a pin as an analog input.\n\n        :param pin_number: arduino pin number\n\n        :param callback: async callback function\n\n        :param differential: difference in previous to current value before\n                             report will be generated\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for analog input pins = 3\n\n        \"\"\"\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'set_pin_mode_analog_input: A callback function must be specified.')\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG,\n                                 differential, callback=callback)\n\n    async def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n\n        Set a pin as a pwm (analog output) pin.\n\n        :param pin_number:arduino pin number\n\n        \"\"\"\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                                 callback=None)\n\n    async def set_pin_mode_digital_input(self, pin_number, callback):\n\"\"\"\n        Set a pin as a digital input.\n\n        :param pin_number: arduino pin number\n\n        :param callback: async callback function\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n\n        \"\"\"\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, differential=0,\n                                 callback=callback)\n\n    async def set_pin_mode_digital_input_pullup(self, pin_number, callback):\n\"\"\"\n        Set a pin as a digital input with pullup enabled.\n\n        :param pin_number: arduino pin number\n\n        :param callback: async callback function\n\n        callback returns a data list:\n\n        [pin_type, pin_number, pin_value, raw_time_stamp]\n\n        The pin_type for all digital input pins = 2\n\n        \"\"\"\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'set_pin_mode_digital_input_pullup: A callback function must be specified.')\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                                 differential=0, callback=callback)\n\n    async def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n        Set a pin as a digital output pin.\n\n        :param pin_number: arduino pin number\n        \"\"\"\n\n        await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                                 callback=None)\n\n    # noinspection PyIncorrectDocstring\n    async def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n        Establish the standard Arduino i2c pins for i2c utilization.\n\n        :param i2c_port: 0 = i2c1, 1 = i2c2\n\n        NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n               2. Callbacks are set within the individual i2c read methods of this\n              API.\n\n              See i2c_read, or i2c_read_restart_transmission.\n\n        \"\"\"\n        # test for i2c port 2\n        if i2c_port:\n            # if not previously activated set it to activated\n            # and the send a begin message for this port\n            if not self.i2c_2_active:\n                self.i2c_2_active = True\n            else:\n                return\n        # port 1\n        else:\n            if not self.i2c_1_active:\n                self.i2c_1_active = True\n            else:\n                return\n\n        command = [PrivateConstants.I2C_BEGIN, i2c_port]\n        await self._send_command(command)\n\n    async def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n        :param pin: connection pin\n\n        :param callback: callback function\n\n        :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n        Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n        Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n        Temperature,\n        Time]\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n\n            if not callback:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n            if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n                self.dht_callbacks[pin] = callback\n                self.dht_count += 1\n\n                if dht_type != 22 and dht_type != 11:\n                    dht_type = 22\n\n                command = [PrivateConstants.DHT_NEW, pin, dht_type]\n                await self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The DHT feature is disabled in the server.')\n\n    async def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n        Attach a pin to a servo motor\n\n        :param pin_number: pin\n\n        :param min_pulse: minimum pulse width\n\n        :param max_pulse: maximum pulse width\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n            minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n            maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n            command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                       minv[0], minv[1], maxv[0], maxv[1]]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The SERVO feature is disabled in the server.')\n\n    async def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                                 callback):\n\"\"\"\n\n        :param trigger_pin:\n\n        :param echo_pin:\n\n        :param callback:  callback\n\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n            if not callback:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n            if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n                self.sonar_callbacks[trigger_pin] = callback\n                self.sonar_count += 1\n\n                command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n                await self._send_command(command)\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError(\n                    f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The SONAR feature is disabled in the server.')\n\n    async def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n        Specify the list of chip select pins.\n\n        Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n        Chip Select is any digital output capable pin.\n\n        :param chip_select_list: this is a list of pins to be used for chip select.\n                           The pins will be configured as output, and set to high\n                           ready to be used for chip select.\n                           NOTE: You must specify the chips select pins here!\n\n\n        command message: [command, number of cs pins, [cs pins...]]\n        \"\"\"\n        if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n\n            if type(chip_select_list) is not list:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('chip_select_list must be in the form of a list')\n            if not chip_select_list:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('Chip select pins were not specified')\n\n            self.spi_enabled = True\n\n            command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n            for pin in chip_select_list:\n                command.append(pin)\n                self.cs_pins_enabled.append(pin)\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'The SPI feature is disabled in the server.')\n\n    # async def set_pin_mode_stepper(self, interface=1, pin1=2, pin2=3, pin3=4,\n    #                          pin4=5, enable=True):\n    #     \"\"\"\n    #     Stepper motor support is implemented as a proxy for the\n    #     the AccelStepper library for the Arduino.\n    #\n    #     This feature is compatible with the TB6600 Motor Driver\n    #\n    #     Note: It may not work for other driver types!\n    #\n    #     https://github.com/waspinator/AccelStepper\n    #\n    #     Instantiate a stepper motor.\n    #\n    #     Initialize the interface and pins for a stepper motor.\n    #\n    #     :param interface: Motor Interface Type:\n    #\n    #             1 = Stepper Driver, 2 driver pins required\n    #\n    #             2 = FULL2WIRE  2 wire stepper, 2 motor pins required\n    #\n    #             3 = FULL3WIRE 3 wire stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             4 = FULL4WIRE, 4 wire full stepper, 4 motor pins\n    #                 required\n    #\n    #             6 = HALF3WIRE, 3 wire half stepper, such as HDD spindle,\n    #                 3 motor pins required\n    #\n    #             8 = HALF4WIRE, 4 wire half stepper, 4 motor pins required\n    #\n    #     :param pin1: Arduino digital pin number for motor pin 1\n    #\n    #     :param pin2: Arduino digital pin number for motor pin 2\n    #\n    #     :param pin3: Arduino digital pin number for motor pin 3\n    #\n    #     :param pin4: Arduino digital pin number for motor pin 4\n    #\n    #     :param enable: If this is true, the output pins at construction time.\n    #\n    #     :return: Motor Reference number\n    #     \"\"\"\n    #     if self.reported_features &amp; PrivateConstants.STEPPERS_FEATURE:\n    #\n    #         if self.number_of_steppers == self.max_number_of_steppers:\n    #             if self.shutdown_on_exception:\n    #                 await self.shutdown()\n    #             raise RuntimeError('Maximum number of steppers has already been assigned')\n    #\n    #         if interface not in self.valid_stepper_interfaces:\n    #             if self.shutdown_on_exception:\n    #                 await self.shutdown()\n    #             raise RuntimeError('Invalid stepper interface')\n    #\n    #         self.number_of_steppers += 1\n    #\n    #         motor_id = self.next_stepper_assigned\n    #         self.next_stepper_assigned += 1\n    #         self.stepper_info_list[motor_id]['instance'] = True\n    #\n    #         # build message and send message to server\n    #         command = [PrivateConstants.SET_PIN_MODE_STEPPER, motor_id, interface, pin1,\n    #                    pin2, pin3, pin4, enable]\n    #         await self._send_command(command)\n    #\n    #         # return motor id\n    #         return motor_id\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'The Stepper feature is disabled in the server.')\n\n    async def sonar_disable(self):\n\"\"\"\n        Disable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_DISABLE]\n        await self._send_command(command)\n\n    async def sonar_enable(self):\n\"\"\"\n        Enable sonar scanning for all sonar sensors\n        \"\"\"\n        command = [PrivateConstants.SONAR_ENABLE]\n        await self._send_command(command)\n\n    async def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n        Control an SPI chip select line\n        :param chip_select_pin: pin connected to CS\n\n        :param select: 0=select, 1=deselect\n        \"\"\"\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n        if chip_select_pin not in self.cs_pins_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n        command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n        await self._send_command(command)\n\n    async def spi_read_blocking(self, chip_select, register_selection,\n                                number_of_bytes_to_read,\n                                call_back=None):\n\"\"\"\n        Read the specified number of bytes from the specified SPI port and\n        call the callback function with the reported data.\n\n        :param chip_select: chip select pin\n\n        :param register_selection: Register to be selected for read.\n\n        :param number_of_bytes_to_read: Number of bytes to read\n\n        :param call_back: Required callback function to report spi data as a\n                   result of read command\n\n\n        callback returns a data list:\n            [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n             data bytes, time-stamp]\n        SPI_READ_REPORT = 13\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n        if not call_back:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n        self.spi_callback = call_back\n\n        command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n                   number_of_bytes_to_read,\n                   register_selection]\n\n        await self._send_command(command)\n\n    async def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n        Configure how the SPI serializes and de-serializes data on the wire.\n\n        See Arduino SPI reference materials for details.\n\n        :param clock_divisor: 1 - 255\n\n        :param bit_order:\n\n                            LSBFIRST = 0\n\n                            MSBFIRST = 1 (default)\n\n        :param data_mode:\n\n                            SPI_MODE0 = 0x00 (default)\n\n                            SPI_MODE1  = 1\n\n                            SPI_MODE2 = 2\n\n                            SPI_MODE3 = 3\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n        if not 0 &lt; clock_divisor &lt;= 255:\n            raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n        if bit_order not in [0, 1]:\n            raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n        if data_mode not in [0, 1, 2, 3]:\n            raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n        command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n                   data_mode]\n        await self._send_command(command)\n\n    async def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n        Write a list of bytes to the SPI device.\n\n        :param chip_select: chip select pin\n\n        :param bytes_to_write: A list of bytes to write. This must\n                                be in the form of a list.\n\n        \"\"\"\n\n        if not self.spi_enabled:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n        if type(bytes_to_write) is not list:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n        command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n        for data in bytes_to_write:\n            command.append(data)\n\n        await self._send_command(command)\n\n    # async def set_pin_mode_one_wire(self, pin):\n    #     \"\"\"\n    #     Initialize the one wire serial bus.\n    #\n    #     :param pin: Data pin connected to the OneWire device\n    #     \"\"\"\n    #     self.onewire_enabled = True\n    #     command = [PrivateConstants.ONE_WIRE_INIT, pin]\n    #     await self._send_command(command)\n    #\n    # async def onewire_reset(self, callback=None):\n    #     \"\"\"\n    #     Reset the onewire device\n    #\n    #     :param callback: required  function to report reset result\n    #\n    #     callback returns a list:\n    #     [ReportType = 14, Report Subtype = 25, reset result byte,\n    #                     timestamp]\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_reset: OneWire interface is not enabled.')\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_reset: A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_RESET]\n    #     await self._send_command(command)\n    #\n    # async def onewire_select(self, device_address):\n    #     \"\"\"\n    #     Select a device based on its address\n    #     :param device_address: A bytearray of 8 bytes\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_select: OneWire interface is not enabled.')\n    #\n    #     if type(device_address) is not list:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #\n    #     if len(device_address) != 8:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_select: device address must be an array of 8 '\n    #                            'bytes.')\n    #     command = [PrivateConstants.ONE_WIRE_SELECT]\n    #     for data in device_address:\n    #         command.append(data)\n    #     await self._send_command(command)\n    #\n    # async def onewire_skip(self):\n    #     \"\"\"\n    #     Skip the device selection. This only works if you have a\n    #     single device, but you can avoid searching and use this to\n    #     immediately access your device.\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_skip: OneWire interface is not enabled.')\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SKIP]\n    #     await self._send_command(command)\n    #\n    # async def onewire_write(self, data, power=0):\n    #     \"\"\"\n    #     Write a byte to the onewire device. If 'power' is one\n    #     then the wire is held high at the end for\n    #     parasitically powered devices. You\n    #     are responsible for eventually de-powering it by calling\n    #     another read or write.\n    #\n    #     :param data: byte to write.\n    #     :param power: power control (see above)\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_write: OneWire interface is not enabled.')\n    #     if 0 &lt; data &lt; 255:\n    #         command = [PrivateConstants.ONE_WIRE_WRITE, data, power]\n    #         await self._send_command(command)\n    #     else:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_write: Data must be no larger than 255')\n    #\n    # async def onewire_read(self, callback=None):\n    #     \"\"\"\n    #     Read a byte from the onewire device\n    #     :param callback: required  function to report onewire data as a\n    #                result of read command\n    #\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_READ=29, data byte, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_read: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_READ]\n    #     await self._send_command(command)\n    #     await asyncio.sleep(.2)\n    #\n    # async def onewire_reset_search(self):\n    #     \"\"\"\n    #     Begin a new search. The next use of search will begin at the first device\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_reset_search: OneWire interface is not '\n    #                            f'enabled.')\n    #     else:\n    #         command = [PrivateConstants.ONE_WIRE_RESET_SEARCH]\n    #         await self._send_command(command)\n    #\n    # async def onewire_search(self, callback=None):\n    #     \"\"\"\n    #     Search for the next device. The device address will returned in the callback.\n    #     If a device is found, the 8 byte address is contained in the callback.\n    #     If no more devices are found, the address returned contains all elements set\n    #     to 0xff.\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_SEARCH=31, 8 byte address, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #     \"\"\"\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_search: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_read A Callback must be specified')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     command = [PrivateConstants.ONE_WIRE_SEARCH]\n    #     await self._send_command(command)\n    #\n    # async def onewire_crc8(self, address_list, callback=None):\n    #     \"\"\"\n    #     Compute a CRC check on an array of data.\n    #     :param address_list:\n    #\n    #     :param callback: required  function to report a onewire device address\n    #\n    #     callback returns a data list:\n    #     [ONEWIRE_REPORT, ONEWIRE_CRC8=32, CRC, time-stamp]\n    #\n    #     ONEWIRE_REPORT = 14\n    #\n    #     \"\"\"\n    #\n    #     if not self.onewire_enabled:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(f'onewire_crc8: OneWire interface is not enabled.')\n    #\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_crc8 A Callback must be specified')\n    #\n    #     if type(address_list) is not list:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('onewire_crc8: address list must be a list.')\n    #\n    #     self.onewire_callback = callback\n    #\n    #     address_length = len(address_list)\n    #\n    #     command = [PrivateConstants.ONE_WIRE_CRC8, address_length - 1]\n    #\n    #     for data in address_list:\n    #         command.append(data)\n    #\n    #     await self._send_command(command)\n\n    async def _set_pin_mode(self, pin_number, pin_state, differential, callback):\n\"\"\"\n        A private method to set the various pin modes.\n\n        :param pin_number: arduino pin number\n\n        :param pin_state: INPUT/OUTPUT/ANALOG/PWM/PULLUP - for SERVO use\n                          servo_config()\n                          For DHT   use: set_pin_mode_dht\n\n        :param differential: for analog inputs - threshold\n                             value to be achieved for report to\n                             be generated\n\n        :param callback: A reference to an async call back function to be\n                         called when pin data value changes\n\n        \"\"\"\n        if not callback and pin_state != PrivateConstants.AT_OUTPUT:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('_set_pin_mode: A Callback must be specified')\n        else:\n            if pin_state == PrivateConstants.AT_INPUT:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_INPUT, 1]\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_INPUT_PULLUP:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_INPUT_PULLUP, 1]\n                self.digital_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_ANALOG:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_ANALOG,\n                           differential &gt;&gt; 8, differential &amp; 0xff, 1]\n                self.analog_callbacks[pin_number] = callback\n            elif pin_state == PrivateConstants.AT_OUTPUT:\n                command = [PrivateConstants.SET_PIN_MODE, pin_number,\n                           PrivateConstants.AT_OUTPUT, 1]\n            else:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('Unknown pin state')\n\n        if command:\n            await self._send_command(command)\n\n        await asyncio.sleep(.05)\n\n    async def servo_detach(self, pin_number):\n\"\"\"\n        Detach a servo for reuse\n        :param pin_number: attached pin\n        \"\"\"\n        command = [PrivateConstants.SERVO_DETACH, pin_number]\n        await self._send_command(command)\n\n    async def servo_write(self, pin_number, angle):\n\"\"\"\n\n        Set a servo attached to a pin to a given angle.\n\n        :param pin_number: pin\n\n        :param angle: angle (0-180)\n\n        \"\"\"\n        command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n        await self._send_command(command)\n\n    # async def stepper_move_to(self, motor_id, position):\n    #     \"\"\"\n    #     Set an absolution target position. If position is positive, the movement is\n    #     clockwise, else it is counter-clockwise.\n    #\n    #     The run() function (below) will try to move the motor (at most one step per call)\n    #     from the current position to the target position set by the most\n    #     recent call to this function. Caution: moveTo() also recalculates the\n    #     speed for the next step.\n    #     If you are trying to use constant speed movements, you should call setSpeed()\n    #     after calling moveTo().\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param position: target position. Maximum value is 32 bits.\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_move_to: Invalid motor_id.')\n    #\n    #     if position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #     position = abs(position)\n    #\n    #     position_bytes = list(position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE_TO, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_move(self, motor_id, relative_position):\n    #     \"\"\"\n    #     Set the target position relative to the current position.\n    #\n    #     :param motor_id: motor id: 0 - 3\n    #\n    #     :param relative_position: The desired position relative to the current\n    #                               position. Negative is anticlockwise from\n    #                               the current position. Maximum value is 32 bits.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_move: Invalid motor_id.')\n    #\n    #     if relative_position &lt; 0:\n    #         polarity = 1\n    #     else:\n    #         polarity = 0\n    #     position = abs(relative_position)\n    #\n    #     position_bytes = list(position.to_bytes(4, 'big', signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_MOVE, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     command.append(polarity)\n    #     await self._send_command(command)\n    #\n    # async def stepper_run(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     This method steps the selected motor based on the current speed.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run: A motion complete callback must be '\n    #                            'specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_run_speed(self, motor_id):\n    #     \"\"\"\n    #     This method steps the selected motor based at a constant speed as set by the most\n    #     recent call to stepper_set_max_speed(). The motor will run continuously.\n    #\n    #     Once called, the server will continuously attempt to step the motor.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run_speed: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_max_speed(self, motor_id, max_speed):\n    #     \"\"\"\n    #     Sets the maximum permitted speed. The stepper_run() function will accelerate\n    #     up to the speed set by this function.\n    #\n    #     Caution: the maximum speed achievable depends on your processor and clock speed.\n    #     The default maxSpeed is 1 step per second.\n    #\n    #      Caution: Speeds that exceed the maximum speed supported by the processor may\n    #               result in non-linear accelerations and decelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param max_speed: 1 - 1000\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Invalid motor_id.')\n    #\n    #     if not 1 &lt; max_speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_max_speed: Speed range is 1 - 1000.')\n    #\n    #     self.stepper_info_list[motor_id]['max_speed'] = max_speed\n    #     max_speed_msb = (max_speed &amp; 0xff00) &gt;&gt; 8\n    #     max_speed_lsb = max_speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MAX_SPEED, motor_id, max_speed_msb,\n    #                max_speed_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_max_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the maximum speed configured for this stepper\n    #     that was previously set by stepper_set_max_speed()\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :return: The currently configured maximum speed.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_max_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['max_speed']\n    #\n    # async def stepper_set_acceleration(self, motor_id, acceleration):\n    #     \"\"\"\n    #     Sets the acceleration/deceleration rate.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param acceleration: The desired acceleration in steps per second\n    #                          per second. Must be &gt; 0.0. This is an\n    #                          expensive call since it requires a square\n    #                          root to be calculated on the server.\n    #                          Dont call more often than needed.\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Invalid motor_id.')\n    #\n    #     if not 1 &lt; acceleration &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_acceleration: Acceleration range is 1 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['acceleration'] = acceleration\n    #\n    #     max_accel_msb = acceleration &gt;&gt; 8\n    #     max_accel_lsb = acceleration &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_ACCELERATION, motor_id, max_accel_msb,\n    #                max_accel_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_speed(self, motor_id, speed):\n    #     \"\"\"\n    #     Sets the desired constant speed for use with stepper_run_speed().\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param speed: 0 - 1000 The desired constant speed in steps per\n    #                   second. Positive is clockwise. Speeds of more than 1000 steps per\n    #                   second are unreliable. Speed accuracy depends on the Arduino\n    #                   crystal. Jitter depends on how frequently you call the\n    #                   stepper_run_speed() method.\n    #                   The speed will be limited by the current value of\n    #                   stepper_set_max_speed().\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Invalid motor_id.')\n    #\n    #     if not 0 &lt; speed &lt;= 1000:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_speed: Speed range is 0 - '\n    #                            '1000.')\n    #\n    #     self.stepper_info_list[motor_id]['speed'] = speed\n    #\n    #     speed_msb = speed &gt;&gt; 8\n    #     speed_lsb = speed &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_SPEED, motor_id, speed_msb, speed_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_speed(self, motor_id):\n    #     \"\"\"\n    #     Returns the  most recently set speed.\n    #     that was previously set by stepper_set_speed();\n    #\n    #     Value is stored in the client, so no callback is required.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_speed: Invalid motor_id.')\n    #\n    #     return self.stepper_info_list[motor_id]['speed']\n    #\n    # async def stepper_get_distance_to_go(self, motor_id, distance_to_go_callback):\n    #     \"\"\"\n    #     Request the distance from the current position to the target position\n    #     from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param distance_to_go_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=15, motor_id, distance in steps, time_stamp]\n    #\n    #     A positive distance is clockwise from the current position.\n    #\n    #     \"\"\"\n    #     if not distance_to_go_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_distance_to_go: Invalid motor_id.')\n    #     self.stepper_info_list[motor_id][\n    #         'distance_to_go_callback'] = distance_to_go_callback\n    #     command = [PrivateConstants.STEPPER_GET_DISTANCE_TO_GO, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_target_position(self, motor_id, target_callback):\n    #     \"\"\"\n    #     Request the most recently set target position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param target_callback: required callback function to receive report\n    #\n    #     :return: The distance to go is returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=16, motor_id, target position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #\n    #     \"\"\"\n    #     if not target_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_target_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_target_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id][\n    #         'target_position_callback'] = target_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_TARGET_POSITION, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_get_current_position(self, motor_id, current_position_callback):\n    #     \"\"\"\n    #     Request the current motor position from the server.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param current_position_callback: required callback function to receive report\n    #\n    #     :return: The current motor position returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=17, motor_id, current position in steps, time_stamp]\n    #\n    #     Positive is clockwise from the 0 position.\n    #     \"\"\"\n    #     if not current_position_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_get_current_position Read: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_get_current_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['current_position_callback'] = current_position_callback\n    #\n    #     command = [PrivateConstants.STEPPER_GET_CURRENT_POSITION, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_current_position(self, motor_id, position):\n    #     \"\"\"\n    #     Resets the current position of the motor, so that wherever the motor\n    #     happens to be right now is considered to be the new 0 position. Useful\n    #     for setting a zero position on a stepper after an initial hardware\n    #     positioning move.\n    #\n    #     Has the side effect of setting the current motor speed to 0.\n    #\n    #     :param motor_id:  0 - 3\n    #\n    #     :param position: Position in steps. This is a 32 bit value\n    #     \"\"\"\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_current_position: Invalid motor_id.')\n    #     position_bytes = list(position.to_bytes(4, 'big',  signed=True))\n    #\n    #     command = [PrivateConstants.STEPPER_SET_CURRENT_POSITION, motor_id]\n    #     for value in position_bytes:\n    #         command.append(value)\n    #     await self._send_command(command)\n    #\n    # async def stepper_run_speed_to_position(self, motor_id, completion_callback=None):\n    #     \"\"\"\n    #     Runs the motor at the currently selected speed until the target position is\n    #     reached.\n    #\n    #     Does not implement accelerations.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param completion_callback: call back function to receive motion complete\n    #                                 notification\n    #\n    #     callback returns a data list:\n    #\n    #     [report_type, motor_id, raw_time_stamp]\n    #\n    #     The report_type = 19\n    #     \"\"\"\n    #     if not completion_callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: A motion complete '\n    #                            'callback must be '\n    #                            'specified.')\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_run_speed_to_position: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['motion_complete_callback'] = completion_callback\n    #     command = [PrivateConstants.STEPPER_RUN_SPEED_TO_POSITION, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_stop(self, motor_id):\n    #     \"\"\"\n    #     Sets a new target position that causes the stepper\n    #     to stop as quickly as possible, using the current speed and\n    #     acceleration parameters.\n    #\n    #     :param motor_id:  0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_stop: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_STOP, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_disable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Disable motor pin outputs by setting them all LOW.\n    #\n    #     Depending on the design of your electronics this may turn off\n    #     the power to the motor coils, saving power.\n    #\n    #     This is useful to support Arduino low power modes: disable the outputs\n    #     during sleep and then re-enable with enableOutputs() before stepping\n    #     again.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and clears\n    #     the pin to disabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_disable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_DISABLE_OUTPUTS, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_enable_outputs(self, motor_id):\n    #     \"\"\"\n    #     Enable motor pin outputs by setting the motor pins to OUTPUT\n    #     mode.\n    #\n    #     If the enable Pin is defined, sets it to OUTPUT mode and sets\n    #     the pin to enabled.\n    #\n    #     :param motor_id: 0 - 3\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_enable_outputs: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_ENABLE_OUTPUTS, motor_id]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_min_pulse_width(self, motor_id, minimum_width):\n    #     \"\"\"\n    #     Sets the minimum pulse width allowed by the stepper driver.\n    #\n    #     The minimum practical pulse width is approximately 20 microseconds.\n    #\n    #     Times less than 20 microseconds will usually result in 20 microseconds or so.\n    #\n    #     :param motor_id: 0 -3\n    #\n    #     :param minimum_width: A 16 bit unsigned value expressed in microseconds.\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Invalid motor_id.')\n    #\n    #     if not 0 &lt; minimum_width &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_min_pulse_width: Pulse width range = '\n    #                            '0-0xffff.')\n    #\n    #     width_msb = minimum_width &gt;&gt; 8\n    #     width_lsb = minimum_width &amp; 0xff\n    #\n    #     command = [PrivateConstants.STEPPER_SET_MINIMUM_PULSE_WIDTH, motor_id, width_msb,\n    #                width_lsb]\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_enable_pin(self, motor_id, pin=0xff):\n    #     \"\"\"\n    #     Sets the enable pin number for stepper drivers.\n    #     0xFF indicates unused (default).\n    #\n    #     Otherwise, if a pin is set, the pin will be turned on when\n    #     enableOutputs() is called and switched off when disableOutputs()\n    #     is called.\n    #\n    #     :param motor_id: 0 - 4\n    #     :param pin: 0-0xff\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Invalid motor_id.')\n    #\n    #     if not 0 &lt; pin &lt;= 0xff:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_enable_pin: Pulse width range = '\n    #                            '0-0xff.')\n    #     command = [PrivateConstants.STEPPER_SET_ENABLE_PIN, motor_id, pin]\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_3_pins_inverted(self, motor_id, direction=False, step=False,\n    #                                 enable=False):\n    #     \"\"\"\n    #     Sets the inversion for stepper driver pins.\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param direction: True=inverted or False\n    #\n    #     :param step: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_3_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_3_PINS_INVERTED, motor_id, direction,\n    #                step, enable]\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_set_4_pins_inverted(self, motor_id, pin1_invert=False,\n    #                                   pin2_invert=False,\n    #                                 pin3_invert=False, pin4_invert=False, enable=False):\n    #     \"\"\"\n    #     Sets the inversion for 2, 3 and 4 wire stepper pins\n    #\n    #     :param motor_id: 0 - 3\n    #\n    #     :param pin1_invert: True=inverted or False\n    #\n    #     :param pin2_invert: True=inverted or False\n    #\n    #     :param pin3_invert: True=inverted or False\n    #\n    #     :param pin4_invert: True=inverted or False\n    #\n    #     :param enable: True=inverted or False\n    #     \"\"\"\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_set_4_pins_inverted: Invalid motor_id.')\n    #\n    #     command = [PrivateConstants.STEPPER_SET_4_PINS_INVERTED, motor_id, pin1_invert,\n    #                pin2_invert, pin3_invert, pin4_invert, enable]\n    #\n    #     await self._send_command(command)\n    #\n    # async def stepper_is_running(self, motor_id, callback):\n    #     \"\"\"\n    #     Checks to see if the motor is currently running to a target.\n    #\n    #     Callback return True if the speed is not zero or not at the target position.\n    #\n    #     :param motor_id: 0-4\n    #\n    #     :param callback: required callback function to receive report\n    #\n    #     :return: The current running state returned via the callback as a list:\n    #\n    #     [REPORT_TYPE=18, motor_id, True or False for running state, time_stamp]\n    #     \"\"\"\n    #     if not callback:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError(\n    #             'stepper_is_running: A callback function must be specified.')\n    #\n    #     if not self.stepper_info_list[motor_id]['instance']:\n    #         if self.shutdown_on_exception:\n    #             await self.shutdown()\n    #         raise RuntimeError('stepper_is_running: Invalid motor_id.')\n    #\n    #     self.stepper_info_list[motor_id]['is_running_callback'] = callback\n    #\n    #     command = [PrivateConstants.STEPPER_IS_RUNNING, motor_id]\n    #     await self._send_command(command)\n\n    async def shutdown(self):\n\"\"\"\n        This method attempts an orderly shutdown\n        If any exceptions are thrown, they are ignored.\n\n        \"\"\"\n        self.shutdown_flag = True\n\n        if self.hard_reset_on_shutdown:\n            await self.r4_hard_reset()\n        # stop all reporting - both analog and digital\n        try:\n            if self.serial_port:\n                command = [PrivateConstants.STOP_ALL_REPORTS]\n                await self._send_command(command)\n\n                await asyncio.sleep(.5)\n\n                await self.serial_port.reset_input_buffer()\n                await self.serial_port.close()\n                if self.close_loop_on_shutdown:\n                    self.loop.stop()\n            elif self.sock:\n                command = [PrivateConstants.STOP_ALL_REPORTS]\n                await self._send_command(command)\n                self.the_task.cancel()\n                await asyncio.sleep(.5)\n                if self.close_loop_on_shutdown:\n                    self.loop.stop()\n        except (RuntimeError, SerialException):\n            pass\n\n    async def r4_hard_reset(self):\n\"\"\"\n        Place the r4 into hard reset\n        \"\"\"\n        command = [PrivateConstants.BOARD_HARD_RESET, 1]\n        await self._send_command(command)\n\n    async def disable_all_reporting(self):\n\"\"\"\n        Disable reporting for all digital and analog input pins\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DISABLE_ALL, 0]\n        await self._send_command(command)\n\n    async def disable_analog_reporting(self, pin):\n\"\"\"\n        Disables analog reporting for a single analog pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n        await self._send_command(command)\n\n    async def disable_digital_reporting(self, pin):\n\"\"\"\n        Disables digital reporting for a single digital pin\n\n\n        :param pin: pin number\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n        await self._send_command(command)\n\n    async def enable_analog_reporting(self, pin):\n\"\"\"\n        Enables analog reporting for the specified pin.\n\n        :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n        \"\"\"\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n        await self._send_command(command)\n\n    async def enable_digital_reporting(self, pin):\n\"\"\"\n        Enable reporting on the specified digital pin.\n\n        :param pin: Pin number.\n        \"\"\"\n\n        command = [PrivateConstants.MODIFY_REPORTING,\n                   PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n        await self._send_command(command)\n\n    async def enable_scroll_message(self, message, scroll_speed=50):\n\"\"\"\n\n        :param message: Message with maximum length of 25\n        :param scroll_speed: in milliseconds (maximum of 255)\n        \"\"\"\n        if len(message) &gt; 25:\n            raise RuntimeError(\"Scroll message size is maximum of 25 characters.\")\n\n        if scroll_speed &gt; 255:\n            raise RuntimeError(\"Scroll speed maximum of 255 milliseconds.\")\n\n        message = message.encode()\n        command = [PrivateConstants.SCROLL_MESSAGE_ON, len(message), scroll_speed]\n        for x in message:\n            command.append(x)\n        await self._send_command(command)\n\n    async def disable_scroll_message(self):\n\"\"\"\n        Turn off a scrolling message\n        \"\"\"\n\n        command = [PrivateConstants.SCROLL_MESSAGE_OFF]\n        await self._send_command(command)\n\n    async def _arduino_report_dispatcher(self):\n\"\"\"\n        This is a private method.\n        It continually accepts and interprets data coming from Telemetrix4Arduino,and then\n        dispatches the correct handler to process the data.\n\n        It first receives the length of the packet, and then reads in the rest of the\n        packet. A packet consists of a length, report identifier and then the report data.\n        Using the report identifier, the report handler is fetched from report_dispatch.\n\n        :returns: This method never returns\n        \"\"\"\n\n        while True:\n            if self.shutdown_flag:\n                break\n            try:\n                if not self.transport_address:\n                    packet_length = await self.serial_port.read()\n                else:\n\n                    packet_length = ord(await self.sock.read())\n            except TypeError:\n                continue\n\n            # get the rest of the packet\n            if not self.transport_address:\n                packet = await self.serial_port.read(packet_length)\n            else:\n                packet = list(await self.sock.read(packet_length))\n                if len(packet) != packet_length:\n                    continue\n                # print(f'packet.len() {}')\n                # await asyncio.sleep(.1)\n\n            report = packet[0]\n            # print(report)\n            # handle all other messages by looking them up in the\n            # command dictionary\n\n            await self.report_dispatch[report](packet[1:])\n            await asyncio.sleep(self.sleep_tune)\n\n    async def _ble_report_dispatcher(self, sender=None, data=None):\n\"\"\"\n        This is a private method called by the incoming data notifier\n\n        Using the report identifier, the report handler is fetched from report_dispatch.\n\n        :param sender: BLE sender ID\n        :param data: data received over the ble link\n\n        \"\"\"\n        self.the_sender = sender\n        data = list(data)\n        report = data[1]\n\n        if report == 5:  # get firmware data reply\n            self.firmware_version = list(data)\n            print()\n        # noinspection PyArgumentList\n        else:\n            await self.report_dispatch[report](data[2:])\n\n'''\n    Report message handlers\n    '''\n\n    async def _report_loop_data(self, data):\n\"\"\"\n        Print data that was looped back\n\n        :param data: byte of loop back data\n        \"\"\"\n        if self.loop_back_callback:\n            await self.loop_back_callback(data)\n\n    async def _spi_report(self, report):\n        report = list(report)\n        cb_list = [PrivateConstants.SPI_REPORT, report[0]] + report[1:]\n\n        cb_list.append(time.time())\n\n        await self.spi_callback(cb_list)\n\n    async def _onewire_report(self, report):\n        report = list(report)\n\n        cb_list = [PrivateConstants.ONE_WIRE_REPORT, report[0]] + report[1:]\n        cb_list.append(time.time())\n        await self.onewire_callback(cb_list)\n\n    async def _report_debug_data(self, data):\n\"\"\"\n        Print debug data sent from Arduino\n\n        :param data: data[0] is a byte followed by 2\n                     bytes that comprise an integer\n        \"\"\"\n        value = (data[1] &lt;&lt; 8) + data[2]\n        print(f'DEBUG ID: {data[0]} Value: {value}')\n\n    async def _analog_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for analog messages.\n\n        :param data: message data\n\n        \"\"\"\n        pin = data[0]\n        value = (data[1] &lt;&lt; 8) + data[2]\n\n        time_stamp = time.time()\n\n        # append pin number, pin value, and pin type to return value and return as a list\n        message = [PrivateConstants.AT_ANALOG, pin, value, time_stamp]\n\n        await self.analog_callbacks[pin](message)\n\n    async def _dht_report(self, data):\n\"\"\"\n        This is a private message handler for dht reports\n\n        :param data:            data[0] = report error return\n                                    No Errors = 0\n\n                                    Checksum Error = 1\n\n                                    Timeout Error = 2\n\n                                    Invalid Value = 999\n\n                                data[1] = pin number\n\n                                data[2] = dht type 11 or 22\n\n                                data[3] = humidity positivity flag\n\n                                data[4] = temperature positivity value\n\n                                data[5] = humidity integer\n\n                                data[6] = humidity fractional value\n\n                                data[7] = temperature integer\n\n                                data[8] = temperature fractional value\n        \"\"\"\n        data = list(data)\n        if data[0]:  # DHT_ERROR\n            # error report\n            # data[0] = report sub type, data[1] = pin, data[2] = error message\n            if self.dht_callbacks[data[1]]:\n                # Callback 0=DHT REPORT, DHT_ERROR, PIN, Time\n                message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                           time.time()]\n                await self.dht_callbacks[data[1]](message)\n        else:\n            # got valid data DHT_DATA\n            f_humidity = float(data[5] + data[6] / 100)\n            if data[3]:\n                f_humidity *= -1.0\n            f_temperature = float(data[7] + data[8] / 100)\n            if data[4]:\n                f_temperature *= -1.0\n            message = [PrivateConstants.DHT_REPORT, data[0], data[1], data[2],\n                       f_humidity, f_temperature, time.time()]\n\n            await self.dht_callbacks[data[1]](message)\n\n    async def _digital_message(self, data):\n\"\"\"\n        This is a private message handler method.\n        It is a message handler for Digital Messages.\n\n        :param data: digital message\n\n        \"\"\"\n        pin = data[0]\n        value = data[1]\n\n        time_stamp = time.time()\n        if self.digital_callbacks[pin]:\n            message = [PrivateConstants.DIGITAL_REPORT, pin, value, time_stamp]\n            await self.digital_callbacks[pin](message)\n\n    async def _servo_unavailable(self, report):\n\"\"\"\n        Message if no servos are available for use.\n\n        :param report: pin number\n        \"\"\"\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            f'Servo Attach For Pin {report[0]} Failed: No Available Servos')\n\n    async def _i2c_read_report(self, data):\n\"\"\"\n        Execute callback for i2c reads.\n\n        :param data: [I2C_READ_REPORT, i2c_port, number of bytes read, address, register, bytes read..., time-stamp]\n        \"\"\"\n\n        # we receive [# data bytes, address, register, data bytes]\n        # number of bytes of data returned\n\n        # data[0] = number of bytes\n        # data[1] = i2c_port\n        # data[2] = number of bytes returned\n        # data[3] = address\n        # data[4] = register\n        # data[5] ... all the data bytes\n        data = list(data)\n        cb_list = [PrivateConstants.I2C_READ_REPORT, data[0], data[1]] + data[2:]\n        cb_list.append(time.time())\n\n        if cb_list[1]:\n            await self.i2c_callback2(cb_list)\n        else:\n            await self.i2c_callback(cb_list)\n\n    async def _i2c_too_few(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            f'i2c too few bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    async def _i2c_too_many(self, data):\n\"\"\"\n        I2c reports too few bytes received\n\n        :param data: data[0] = device address\n        \"\"\"\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            f'i2c too many bytes received from i2c port {data[0]} i2c address {data[1]}')\n\n    async def _sonar_distance_report(self, report):\n\"\"\"\n\n        :param report: data[0] = trigger pin, data[1] and data[2] = distance\n\n        callback report format: [PrivateConstants.SONAR_DISTANCE, trigger_pin, distance_value, time_stamp]\n        \"\"\"\n        report = list(report)\n        # get callback from pin number\n        cb = self.sonar_callbacks[report[0]]\n\n        # build report data\n        cb_list = [PrivateConstants.SONAR_DISTANCE, report[0],\n                   ((report[1] &lt;&lt; 8) + report[2]), time.time()]\n\n        await cb(cb_list)\n\n    async def _stepper_distance_to_go_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report stepper distance to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = steps MSB, data[2] = steps byte 1,\n    #                              data[3] = steps bytes 2, data[4] = steps LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_DISTANCE_TO_GO, motor_id\n    #                              steps, time_stamp]\n    #     \"\"\"\n    #     report = list(report)\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['distance_to_go_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     steps = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     num_steps = int.from_bytes(steps, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_DISTANCE_TO_GO, report[0], num_steps,\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n    #\n\n    async def _stepper_target_position_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report stepper target position to go.\n    #\n    #     :param report: data[0] = motor_id, data[1] = target position MSB,\n    #                    data[2] = target position byte MSB+1\n    #                    data[3] = target position byte MSB+2\n    #                    data[4] = target position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_TARGET_POSITION, motor_id\n    #                              target_position, time_stamp]\n    #     \"\"\"\n    #     report = list(report)\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['target_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     target = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     target_position = int.from_bytes(target, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_TARGET_POSITION, report[0], target_position,\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n    #\n\n    async def _stepper_current_position_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report stepper current position.\n    #\n    #     :param report: data[0] = motor_id, data[1] = current position MSB,\n    #                    data[2] = current position byte MSB+1\n    #                    data[3] = current position byte MSB+2\n    #                    data[4] = current position LSB\n    #\n    #     callback report format: [PrivateConstants.STEPPER_CURRENT_POSITION, motor_id\n    #                              current_position, time_stamp]\n    #     \"\"\"\n    #     report = list(report)\n\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['current_position_callback']\n    #\n    #     # isolate the steps bytes and covert list to bytes\n    #     position = bytes(report[1:])\n    #\n    #     # get value from steps\n    #     current_position = int.from_bytes(position, byteorder='big', signed=True)\n    #\n    #     cb_list = [PrivateConstants.STEPPER_CURRENT_POSITION, report[0], current_position,\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n    #\n\n    async def _stepper_is_running_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     Report if the motor is currently running\n    #\n    #     :param report: data[0] = motor_id, True if motor is running or False if it is not.\n    #\n    #     callback report format: [18, motor_id,\n    #                              running_state, time_stamp]\n    #     \"\"\"\n    #     report = list(report)\n\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['is_running_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUNNING_REPORT, report[0], time.time()]\n    #\n    #     await cb(cb_list)\n    #\n\n    async def _stepper_run_complete_report(self, report):\n        return  # for now\n\n    #     \"\"\"\n    #     The motor completed it motion\n    #\n    #     :param report: data[0] = motor_id\n    #\n    #     callback report format: [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, motor_id,\n    #                              time_stamp]\n    #     \"\"\"\n    #     report = list(report)\n    #     # get callback\n    #     cb = self.stepper_info_list[report[0]]['motion_complete_callback']\n    #\n    #     cb_list = [PrivateConstants.STEPPER_RUN_COMPLETE_REPORT, report[0],\n    #                time.time()]\n    #\n    #     await cb(cb_list)\n\n    async def _features_report(self, report):\n        self.reported_features = report[0]\n\n    async def _send_command(self, command):\n\"\"\"\n        This is a private utility method.\n\n\n        :param command:  command data in the form of a list\n\n        :returns: number of bytes sent\n        \"\"\"\n        # the length of the list is added at the head\n        # the length of the list is added at the head\n        command.insert(0, len(command))\n        send_message = bytes(command)\n\n        if self.transport_type == 1:\n            try:\n                await self.serial_port.write(send_message)\n            except SerialException:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n                raise RuntimeError('write fail in _send_command')\n        elif self.transport_type == 0:\n            await self.sock.write(send_message)\n        else:\n            await self.ble_instance.write(send_message)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.__init__","title":"<code>__init__(com_port=None, arduino_instance_id=1, arduino_wait=1, sleep_tune=0.0001, autostart=True, loop=None, shutdown_on_exception=True, close_loop_on_shutdown=True, hard_reset_on_shutdown=True, transport_address=None, ip_port=31336, transport_type=0, ble_device_name='Telemetrix4UnoR4 BLE')</code>","text":"<p>If you have a single Arduino connected to your computer,  then you may accept all the default values.</p> <p>Otherwise, specify a unique arduino_instance id for each board in use.</p> <p>:param com_port: e.g. COM3 or /dev/ttyACM0.</p> <p>:param arduino_instance_id: Must match value in the Telemetrix4Arduino sketch</p> <p>:param arduino_wait: Amount of time to wait for an Arduino to                       fully reset itself.</p> <p>:param sleep_tune: A tuning parameter (typically not changed by user)</p> <p>:param autostart: If you wish to call the start method within                    your application, then set this to False.</p> <p>:param loop: optional user provided event loop</p> <p>:param shutdown_on_exception: call shutdown before raising                                a RunTimeError exception, or                                receiving a KeyboardInterrupt exception</p> <p>:param close_loop_on_shutdown: stop and close the event loop loop                                 when a shutdown is called or a serial                                 error occurs</p> <p>:param hard_reset_on_shutdown: reset the board on shutdown</p> <p>:param transport_address: ip address of tcp/ip connected device.</p> <p>:param ip_port: ip port of tcp/ip connected device</p> <p>:param transport_type: 0 = WiFi                         1 = SerialUSB                         2 = BLE</p> <p>:param ble_device_name: name of Arduino UNO R4 WIFI BLE device.                         It must match that of Telemetrix4UnoR4BLE.ino</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>def __init__(self, com_port=None,\n             arduino_instance_id=1, arduino_wait=1,\n             sleep_tune=0.0001, autostart=True,\n             loop=None, shutdown_on_exception=True,\n             close_loop_on_shutdown=True, hard_reset_on_shutdown=True,\n             transport_address=None, ip_port=31336, transport_type=0,\n             ble_device_name='Telemetrix4UnoR4 BLE'):\n\n\"\"\"\n    If you have a single Arduino connected to your computer,\n    then you may accept all the default values.\n\n    Otherwise, specify a unique arduino_instance id for each board in use.\n\n    :param com_port: e.g. COM3 or /dev/ttyACM0.\n\n    :param arduino_instance_id: Must match value in the Telemetrix4Arduino sketch\n\n    :param arduino_wait: Amount of time to wait for an Arduino to\n                         fully reset itself.\n\n    :param sleep_tune: A tuning parameter (typically not changed by user)\n\n    :param autostart: If you wish to call the start method within\n                      your application, then set this to False.\n\n    :param loop: optional user provided event loop\n\n    :param shutdown_on_exception: call shutdown before raising\n                                  a RunTimeError exception, or\n                                  receiving a KeyboardInterrupt exception\n\n    :param close_loop_on_shutdown: stop and close the event loop loop\n                                   when a shutdown is called or a serial\n                                   error occurs\n\n   :param hard_reset_on_shutdown: reset the board on shutdown\n\n   :param transport_address: ip address of tcp/ip connected device.\n\n    :param ip_port: ip port of tcp/ip connected device\n\n    :param transport_type: 0 = WiFi\n                           1 = SerialUSB\n                           2 = BLE\n\n   :param ble_device_name: name of Arduino UNO R4 WIFI BLE device.\n                           It must match that of Telemetrix4UnoR4BLE.ino\n\n    \"\"\"\n    # check to make sure that Python interpreter is version 3.8.3 or greater\n    python_version = sys.version_info\n    if python_version[0] &gt;= 3:\n        if python_version[1] &gt;= 8:\n            if python_version[2] &gt;= 3:\n                pass\n        else:\n            raise RuntimeError(\"ERROR: Python 3.7 or greater is \"\n                               \"required for use of this program.\")\n\n    # save input parameters\n    self.com_port = com_port\n    self.arduino_instance_id = arduino_instance_id\n    self.arduino_wait = arduino_wait\n    self.sleep_tune = sleep_tune\n    self.autostart = autostart\n    self.hard_reset_on_shutdown = hard_reset_on_shutdown\n\n    self.transport_address = transport_address\n    self.ip_port = ip_port\n    if transport_type not in [0, 1, 2]:\n        raise RuntimeError('Invalid transport type')\n    self.transport_type = transport_type\n    self.firmware_version = None\n    # if tcp, this variable is set to the connected socket\n    self.sock = None\n\n    self.ble_device_name = ble_device_name\n\n    # instance of telemetrix_aio_ble\n    self.ble_instance = None\n\n    # set the event loop\n    if loop is None:\n        self.loop = asyncio.get_event_loop()\n    else:\n        self.loop = loop\n\n    self.shutdown_on_exception = shutdown_on_exception\n    self.close_loop_on_shutdown = close_loop_on_shutdown\n\n    # dictionaries to store the callbacks for each pin\n    self.analog_callbacks = {}\n\n    self.digital_callbacks = {}\n\n    self.i2c_callback = None\n    self.i2c_callback2 = None\n\n    self.i2c_1_active = False\n    self.i2c_2_active = False\n\n    self.spi_callback = None\n\n    self.onewire_callback = None\n\n    # debug loopback callback method\n    self.loop_back_callback = None\n\n    # the trigger pin will be the key to retrieve\n    # the callback for a specific HC-SR04\n    self.sonar_callbacks = {}\n\n    self.sonar_count = 0\n\n    self.dht_callbacks = {}\n\n    self.dht_count = 0\n\n    # serial port in use\n    self.serial_port = None\n\n    # generic asyncio task holder\n    self.the_task = None\n\n    # flag to indicate we are in shutdown mode\n    self.shutdown_flag = False\n\n    self.report_dispatch = {}\n\n    # reported features\n    self.reported_features = 0\n\n    # To add a command to the command dispatch table, append here.\n    self.report_dispatch.update(\n        {PrivateConstants.LOOP_COMMAND: self._report_loop_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DEBUG_PRINT: self._report_debug_data})\n    self.report_dispatch.update(\n        {PrivateConstants.DIGITAL_REPORT: self._digital_message})\n    self.report_dispatch.update(\n        {PrivateConstants.ANALOG_REPORT: self._analog_message})\n    self.report_dispatch.update(\n        {PrivateConstants.SERVO_UNAVAILABLE: self._servo_unavailable})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_READ_REPORT: self._i2c_read_report})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_FEW_BYTES_RCVD: self._i2c_too_few})\n    self.report_dispatch.update(\n        {PrivateConstants.I2C_TOO_MANY_BYTES_RCVD: self._i2c_too_many})\n    self.report_dispatch.update(\n        {PrivateConstants.SONAR_DISTANCE: self._sonar_distance_report})\n    self.report_dispatch.update({PrivateConstants.DHT_REPORT: self._dht_report})\n    self.report_dispatch.update(\n        {PrivateConstants.SPI_REPORT: self._spi_report})\n    self.report_dispatch.update(\n        {PrivateConstants.ONE_WIRE_REPORT: self._onewire_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_CURRENT_POSITION:\n             self._stepper_current_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUNNING_REPORT:\n             self._stepper_is_running_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_RUN_COMPLETE_REPORT:\n             self._stepper_run_complete_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_DISTANCE_TO_GO:\n             self._stepper_distance_to_go_report})\n    self.report_dispatch.update(\n        {PrivateConstants.STEPPER_TARGET_POSITION:\n             self._stepper_target_position_report})\n    self.report_dispatch.update(\n        {PrivateConstants.FEATURES:\n             self._features_report})\n\n    # dictionaries to store the callbacks for each pin\n    self.analog_callbacks = {}\n\n    self.digital_callbacks = {}\n\n    self.i2c_callback = None\n    self.i2c_callback2 = None\n\n    self.i2c_1_active = False\n    self.i2c_2_active = False\n\n    self.spi_callback = None\n\n    self.onewire_callback = None\n\n    self.cs_pins_enabled = []\n\n    # flag to indicate if spi is initialized\n    self.spi_enabled = False\n\n    # flag to indicate if onewire is initialized\n    self.onewire_enabled = False\n\n    # the trigger pin will be the key to retrieve\n    # the callback for a specific HC-SR04\n    self.sonar_callbacks = {}\n\n    self.sonar_count = 0\n\n    self.dht_callbacks = {}\n\n    # # stepper motor variables\n    #\n    # # updated when a new motor is added\n    # self.next_stepper_assigned = 0\n    #\n    # # valid list of stepper motor interface types\n    # self.valid_stepper_interfaces = [1, 2, 3, 4, 6, 8]\n    #\n    # # maximum number of steppers supported\n    # self.max_number_of_steppers = 4\n    #\n    # # number of steppers created - not to exceed the maximum\n    # self.number_of_steppers = 0\n    #\n    # # dictionary to hold stepper motor information\n    # self.stepper_info = {'instance': False, 'is_running': None,\n    #                      'maximum_speed': 1, 'speed': 0, 'acceleration': 0,\n    #                      'distance_to_go_callback': None,\n    #                      'target_position_callback': None,\n    #                      'current_position_callback': None,\n    #                      'is_running_callback': None,\n    #                      'motion_complete_callback': None,\n    #                      'acceleration_callback': None}\n    #\n    # # build a list of stepper motor info items\n    # self.stepper_info_list = []\n    # # a list of dictionaries to hold stepper information\n    # for motor in range(self.max_number_of_steppers):\n    #     self.stepper_info_list.append(self.stepper_info.copy())\n\n    print(f'telemetrix_uno_r4_wifi_aio Version:'\n          f' {PrivateConstants.TELEMETRIX_VERSION}')\n    print(f'Copyright (c) 2023 Alan Yorinks All rights reserved.\\n')\n\n    if autostart:\n        self.loop.run_until_complete(self.start_aio())\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.analog_write","title":"<code>analog_write(pin, value)</code>  <code>async</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (maximum 16 bits)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def analog_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (maximum 16 bits)\n\n    \"\"\"\n    value_msb = value &gt;&gt; 8\n    value_lsb = value &amp; 0xff\n    command = [PrivateConstants.ANALOG_WRITE, pin, value_msb, value_lsb]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.digital_write","title":"<code>digital_write(pin, value)</code>  <code>async</code>","text":"<p>Set the specified pin to the specified value.</p> <p>:param pin: arduino pin number</p> <p>:param value: pin value (1 or 0)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def digital_write(self, pin, value):\n\"\"\"\n    Set the specified pin to the specified value.\n\n    :param pin: arduino pin number\n\n    :param value: pin value (1 or 0)\n\n    \"\"\"\n    command = [PrivateConstants.DIGITAL_WRITE, pin, value]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.disable_all_reporting","title":"<code>disable_all_reporting()</code>  <code>async</code>","text":"<p>Disable reporting for all digital and analog input pins</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def disable_all_reporting(self):\n\"\"\"\n    Disable reporting for all digital and analog input pins\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DISABLE_ALL, 0]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.disable_analog_reporting","title":"<code>disable_analog_reporting(pin)</code>  <code>async</code>","text":"<p>Disables analog reporting for a single analog pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def disable_analog_reporting(self, pin):\n\"\"\"\n    Disables analog reporting for a single analog pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_DISABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.disable_digital_reporting","title":"<code>disable_digital_reporting(pin)</code>  <code>async</code>","text":"<p>Disables digital reporting for a single digital pin</p> <p>:param pin: pin number</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def disable_digital_reporting(self, pin):\n\"\"\"\n    Disables digital reporting for a single digital pin\n\n\n    :param pin: pin number\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_DISABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.disable_scroll_message","title":"<code>disable_scroll_message()</code>  <code>async</code>","text":"<p>Turn off a scrolling message</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def disable_scroll_message(self):\n\"\"\"\n    Turn off a scrolling message\n    \"\"\"\n\n    command = [PrivateConstants.SCROLL_MESSAGE_OFF]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.enable_analog_reporting","title":"<code>enable_analog_reporting(pin)</code>  <code>async</code>","text":"<p>Enables analog reporting for the specified pin.</p> <p>:param pin: Analog pin number. For example for A0, the number is 0.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def enable_analog_reporting(self, pin):\n\"\"\"\n    Enables analog reporting for the specified pin.\n\n    :param pin: Analog pin number. For example for A0, the number is 0.\n\n\n    \"\"\"\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_ANALOG_ENABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.enable_digital_reporting","title":"<code>enable_digital_reporting(pin)</code>  <code>async</code>","text":"<p>Enable reporting on the specified digital pin.</p> <p>:param pin: Pin number.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def enable_digital_reporting(self, pin):\n\"\"\"\n    Enable reporting on the specified digital pin.\n\n    :param pin: Pin number.\n    \"\"\"\n\n    command = [PrivateConstants.MODIFY_REPORTING,\n               PrivateConstants.REPORTING_DIGITAL_ENABLE, pin]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.enable_scroll_message","title":"<code>enable_scroll_message(message, scroll_speed=50)</code>  <code>async</code>","text":"<p>:param message: Message with maximum length of 25 :param scroll_speed: in milliseconds (maximum of 255)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def enable_scroll_message(self, message, scroll_speed=50):\n\"\"\"\n\n    :param message: Message with maximum length of 25\n    :param scroll_speed: in milliseconds (maximum of 255)\n    \"\"\"\n    if len(message) &gt; 25:\n        raise RuntimeError(\"Scroll message size is maximum of 25 characters.\")\n\n    if scroll_speed &gt; 255:\n        raise RuntimeError(\"Scroll speed maximum of 255 milliseconds.\")\n\n    message = message.encode()\n    command = [PrivateConstants.SCROLL_MESSAGE_ON, len(message), scroll_speed]\n    for x in message:\n        command.append(x)\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.get_event_loop","title":"<code>get_event_loop()</code>  <code>async</code>","text":"<p>Return the currently active asyncio event loop</p> <p>:return: Active event loop</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def get_event_loop(self):\n\"\"\"\n    Return the currently active asyncio event loop\n\n    :return: Active event loop\n\n    \"\"\"\n    return self.loop\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.i2c_read","title":"<code>i2c_read(address, register, number_of_bytes, callback, i2c_port=0, write_register=True)</code>  <code>async</code>","text":"<p>Read the specified number of bytes from the specified register for the i2c device.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report i2c data as a            result of read command</p> <p>:param i2c_port: select the default port (0) or secondary port (1)</p> <p>:param write_register: If True, the register is written                                before read                       Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,    bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def i2c_read(self, address, register, number_of_bytes,\n                   callback, i2c_port=0,\n                   write_register=True):\n\"\"\"\n    Read the specified number of bytes from the specified register for\n    the i2c device.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report i2c data as a\n               result of read command\n\n    :param i2c_port: select the default port (0) or secondary port (1)\n\n    :param write_register: If True, the register is written\n                                   before read\n                          Else, the write is suppressed\n\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('i2c_read: A Callback must be specified')\n\n    await self._i2c_read_request(address, register, number_of_bytes,\n                                 callback=callback, i2c_port=i2c_port,\n                                 write_register=write_register)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.i2c_read_restart_transmission","title":"<code>i2c_read_restart_transmission(address, register, number_of_bytes, callback, i2c_port=0, write_register=True)</code>  <code>async</code>","text":"<p>Read the specified number of bytes from the specified register for the i2c device. This restarts the transmission after the read. It is required for some i2c devices such as the MMA8452Q accelerometer.</p> <p>:param address: i2c device address</p> <p>:param register: i2c register (or None if no register                                             selection is needed)</p> <p>:param number_of_bytes: number of bytes to be read</p> <p>:param callback: Required callback function to report i2c data as a            result of read command</p> <p>:param i2c_port: select the default port (0) or secondary port (1)</p> <p>:param write_register: If True, the register is written                                before read                       Else, the write is suppressed</p> <p>callback returns a data list:</p> <p>[I2C_READ_REPORT, i2c_port, number of bytes read, address, register,    bytes read..., time-stamp]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def i2c_read_restart_transmission(self, address, register,\n                                        number_of_bytes,\n                                        callback, i2c_port=0,\n                                        write_register=True):\n\"\"\"\n    Read the specified number of bytes from the specified register for\n    the i2c device. This restarts the transmission after the read. It is\n    required for some i2c devices such as the MMA8452Q accelerometer.\n\n\n    :param address: i2c device address\n\n    :param register: i2c register (or None if no register\n                                                selection is needed)\n\n    :param number_of_bytes: number of bytes to be read\n\n    :param callback: Required callback function to report i2c data as a\n               result of read command\n\n    :param i2c_port: select the default port (0) or secondary port (1)\n\n    :param write_register: If True, the register is written\n                                   before read\n                          Else, the write is suppressed\n\n    callback returns a data list:\n\n    [I2C_READ_REPORT, i2c_port, number of bytes read, address, register,\n       bytes read..., time-stamp]\n\n    \"\"\"\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            'i2c_read_restart_transmission: A Callback must be specified')\n\n    await self._i2c_read_request(address, register, number_of_bytes,\n                                 stop_transmission=False,\n                                 callback=callback, i2c_port=i2c_port,\n                                 write_register=write_register)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.i2c_write","title":"<code>i2c_write(address, args, i2c_port=0)</code>  <code>async</code>","text":"<p>Write data to an i2c device.</p> <p>:param address: i2c device address</p> <p>:param i2c_port: 0= port 1, 1 = port 2</p> <p>:param args: A variable number of bytes to be sent to the device              passed in as a list</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def i2c_write(self, address, args, i2c_port=0):\n\"\"\"\n    Write data to an i2c device.\n\n    :param address: i2c device address\n\n    :param i2c_port: 0= port 1, 1 = port 2\n\n    :param args: A variable number of bytes to be sent to the device\n                 passed in as a list\n\n    \"\"\"\n    if not i2c_port:\n        if not self.i2c_1_active:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 1.')\n\n    if i2c_port:\n        if not self.i2c_2_active:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                'I2C Write: set_pin_mode i2c never called for i2c port 2.')\n\n    command = [PrivateConstants.I2C_WRITE, len(args), address, i2c_port]\n\n    for item in args:\n        command.append(item)\n\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.loop_back","title":"<code>loop_back(start_character, callback)</code>  <code>async</code>","text":"<p>This is a debugging method to send a character to the Arduino device, and have the device loop it back.</p> <p>:param start_character: The character to loop back. It should be                         an integer.</p> <p>:param callback: Looped back character will appear in the callback method</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def loop_back(self, start_character, callback):\n\"\"\"\n    This is a debugging method to send a character to the\n    Arduino device, and have the device loop it back.\n\n    :param start_character: The character to loop back. It should be\n                            an integer.\n\n    :param callback: Looped back character will appear in the callback method\n\n    \"\"\"\n\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('loop_back: A callback function must be specified.')\n    command = [PrivateConstants.LOOP_COMMAND, ord(start_character)]\n    self.loop_back_callback = callback\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.r4_hard_reset","title":"<code>r4_hard_reset()</code>  <code>async</code>","text":"<p>Place the r4 into hard reset</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def r4_hard_reset(self):\n\"\"\"\n    Place the r4 into hard reset\n    \"\"\"\n    command = [PrivateConstants.BOARD_HARD_RESET, 1]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.servo_detach","title":"<code>servo_detach(pin_number)</code>  <code>async</code>","text":"<p>Detach a servo for reuse :param pin_number: attached pin</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def servo_detach(self, pin_number):\n\"\"\"\n    Detach a servo for reuse\n    :param pin_number: attached pin\n    \"\"\"\n    command = [PrivateConstants.SERVO_DETACH, pin_number]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.servo_write","title":"<code>servo_write(pin_number, angle)</code>  <code>async</code>","text":"<p>Set a servo attached to a pin to a given angle.</p> <p>:param pin_number: pin</p> <p>:param angle: angle (0-180)</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def servo_write(self, pin_number, angle):\n\"\"\"\n\n    Set a servo attached to a pin to a given angle.\n\n    :param pin_number: pin\n\n    :param angle: angle (0-180)\n\n    \"\"\"\n    command = [PrivateConstants.SERVO_WRITE, pin_number, angle]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_analog_scan_interval","title":"<code>set_analog_scan_interval(interval)</code>  <code>async</code>","text":"<p>Set the analog scanning interval.</p> <p>:param interval: value of 0 - 255 - milliseconds</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_analog_scan_interval(self, interval):\n\"\"\"\n    Set the analog scanning interval.\n\n    :param interval: value of 0 - 255 - milliseconds\n    \"\"\"\n\n    if 0 &lt;= interval &lt;= 255:\n        command = [PrivateConstants.SET_ANALOG_SCANNING_INTERVAL, interval]\n        await self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('Analog interval must be between 0 and 255')\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_analog_input","title":"<code>set_pin_mode_analog_input(pin_number, differential=0, callback=None)</code>  <code>async</code>","text":"<p>Set a pin as an analog input.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: async callback function</p> <p>:param differential: difference in previous to current value before                      report will be generated</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for analog input pins = 3</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_analog_input(self, pin_number, differential=0, callback=None):\n\"\"\"\n    Set a pin as an analog input.\n\n    :param pin_number: arduino pin number\n\n    :param callback: async callback function\n\n    :param differential: difference in previous to current value before\n                         report will be generated\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for analog input pins = 3\n\n    \"\"\"\n\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            'set_pin_mode_analog_input: A callback function must be specified.')\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_ANALOG,\n                             differential, callback=callback)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_analog_output","title":"<code>set_pin_mode_analog_output(pin_number)</code>  <code>async</code>","text":"<p>Set a pin as a pwm (analog output) pin.</p> <p>:param pin_number:arduino pin number</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_analog_output(self, pin_number):\n\"\"\"\n\n    Set a pin as a pwm (analog output) pin.\n\n    :param pin_number:arduino pin number\n\n    \"\"\"\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                             callback=None)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_dht","title":"<code>set_pin_mode_dht(pin, callback=None, dht_type=22)</code>  <code>async</code>","text":"<p>:param pin: connection pin</p> <p>:param callback: callback function</p> <p>:param dht_type: either 22 for DHT22 or 11 for DHT11</p> <p>Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]</p> <p>Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity, Temperature, Time]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_dht(self, pin, callback=None, dht_type=22):\n\"\"\"\n\n    :param pin: connection pin\n\n    :param callback: callback function\n\n    :param dht_type: either 22 for DHT22 or 11 for DHT11\n\n    Error Callback: [DHT REPORT Type, DHT_ERROR_NUMBER, PIN, DHT_TYPE, Time]\n\n    Valid Data Callback: DHT REPORT Type, DHT_DATA=, PIN, DHT_TYPE, Humidity,\n    Temperature,\n    Time]\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.DHT_FEATURE:\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('set_pin_mode_dht: A Callback must be specified')\n\n        if self.dht_count &lt; PrivateConstants.MAX_DHTS - 1:\n            self.dht_callbacks[pin] = callback\n            self.dht_count += 1\n\n            if dht_type != 22 and dht_type != 11:\n                dht_type = 22\n\n            command = [PrivateConstants.DHT_NEW, pin, dht_type]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of DHTs Exceeded - set_pin_mode_dht fails for pin {pin}')\n\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The DHT feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_digital_input","title":"<code>set_pin_mode_digital_input(pin_number, callback)</code>  <code>async</code>","text":"<p>Set a pin as a digital input.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: async callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_digital_input(self, pin_number, callback):\n\"\"\"\n    Set a pin as a digital input.\n\n    :param pin_number: arduino pin number\n\n    :param callback: async callback function\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n\n    \"\"\"\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT, differential=0,\n                             callback=callback)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_digital_input_pullup","title":"<code>set_pin_mode_digital_input_pullup(pin_number, callback)</code>  <code>async</code>","text":"<p>Set a pin as a digital input with pullup enabled.</p> <p>:param pin_number: arduino pin number</p> <p>:param callback: async callback function</p> <p>callback returns a data list:</p> <p>[pin_type, pin_number, pin_value, raw_time_stamp]</p> <p>The pin_type for all digital input pins = 2</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_digital_input_pullup(self, pin_number, callback):\n\"\"\"\n    Set a pin as a digital input with pullup enabled.\n\n    :param pin_number: arduino pin number\n\n    :param callback: async callback function\n\n    callback returns a data list:\n\n    [pin_type, pin_number, pin_value, raw_time_stamp]\n\n    The pin_type for all digital input pins = 2\n\n    \"\"\"\n    if not callback:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(\n            'set_pin_mode_digital_input_pullup: A callback function must be specified.')\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_INPUT_PULLUP,\n                             differential=0, callback=callback)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_digital_output","title":"<code>set_pin_mode_digital_output(pin_number)</code>  <code>async</code>","text":"<p>Set a pin as a digital output pin.</p> <p>:param pin_number: arduino pin number</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_digital_output(self, pin_number):\n\"\"\"\n    Set a pin as a digital output pin.\n\n    :param pin_number: arduino pin number\n    \"\"\"\n\n    await self._set_pin_mode(pin_number, PrivateConstants.AT_OUTPUT, differential=0,\n                             callback=None)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_i2c","title":"<code>set_pin_mode_i2c(i2c_port=0)</code>  <code>async</code>","text":"<p>Establish the standard Arduino i2c pins for i2c utilization.</p> <p>:param i2c_port: 0 = i2c1, 1 = i2c2</p> <ol> <li>THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE</li> </ol> <ol> <li>Callbacks are set within the individual i2c read methods of this</li> </ol> <pre><code>  API.\n\n  See i2c_read, or i2c_read_restart_transmission.\n</code></pre> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_i2c(self, i2c_port=0):\n\"\"\"\n    Establish the standard Arduino i2c pins for i2c utilization.\n\n    :param i2c_port: 0 = i2c1, 1 = i2c2\n\n    NOTES: 1. THIS METHOD MUST BE CALLED BEFORE ANY I2C REQUEST IS MADE\n           2. Callbacks are set within the individual i2c read methods of this\n          API.\n\n          See i2c_read, or i2c_read_restart_transmission.\n\n    \"\"\"\n    # test for i2c port 2\n    if i2c_port:\n        # if not previously activated set it to activated\n        # and the send a begin message for this port\n        if not self.i2c_2_active:\n            self.i2c_2_active = True\n        else:\n            return\n    # port 1\n    else:\n        if not self.i2c_1_active:\n            self.i2c_1_active = True\n        else:\n            return\n\n    command = [PrivateConstants.I2C_BEGIN, i2c_port]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_servo","title":"<code>set_pin_mode_servo(pin_number, min_pulse=544, max_pulse=2400)</code>  <code>async</code>","text":"<p>Attach a pin to a servo motor</p> <p>:param pin_number: pin</p> <p>:param min_pulse: minimum pulse width</p> <p>:param max_pulse: maximum pulse width</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_servo(self, pin_number, min_pulse=544, max_pulse=2400):\n\"\"\"\n\n    Attach a pin to a servo motor\n\n    :param pin_number: pin\n\n    :param min_pulse: minimum pulse width\n\n    :param max_pulse: maximum pulse width\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SERVO_FEATURE:\n\n        minv = (min_pulse).to_bytes(2, byteorder=\"big\")\n        maxv = (max_pulse).to_bytes(2, byteorder=\"big\")\n\n        command = [PrivateConstants.SERVO_ATTACH, pin_number,\n                   minv[0], minv[1], maxv[0], maxv[1]]\n        await self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The SERVO feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_sonar","title":"<code>set_pin_mode_sonar(trigger_pin, echo_pin, callback)</code>  <code>async</code>","text":"<p>:param trigger_pin:</p> <p>:param echo_pin:</p> <p>:param callback:  callback</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_sonar(self, trigger_pin, echo_pin,\n                             callback):\n\"\"\"\n\n    :param trigger_pin:\n\n    :param echo_pin:\n\n    :param callback:  callback\n\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SONAR_FEATURE:\n\n        if not callback:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('set_pin_mode_sonar: A Callback must be specified')\n\n        if self.sonar_count &lt; PrivateConstants.MAX_SONARS - 1:\n            self.sonar_callbacks[trigger_pin] = callback\n            self.sonar_count += 1\n\n            command = [PrivateConstants.SONAR_NEW, trigger_pin, echo_pin]\n            await self._send_command(command)\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError(\n                f'Maximum Number Of Sonars Exceeded - set_pin_mode_sonar fails for pin {trigger_pin}')\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The SONAR feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.set_pin_mode_spi","title":"<code>set_pin_mode_spi(chip_select_list=None)</code>  <code>async</code>","text":"<p>Specify the list of chip select pins.</p> <p>Standard Arduino MISO, MOSI and CLK pins are used for the board in use.</p> <p>Chip Select is any digital output capable pin.</p> <p>:param chip_select_list: this is a list of pins to be used for chip select.                    The pins will be configured as output, and set to high                    ready to be used for chip select.                    NOTE: You must specify the chips select pins here!</p> <p>command message: [command, number of cs pins, [cs pins...]]</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def set_pin_mode_spi(self, chip_select_list=None):\n\"\"\"\n    Specify the list of chip select pins.\n\n    Standard Arduino MISO, MOSI and CLK pins are used for the board in use.\n\n    Chip Select is any digital output capable pin.\n\n    :param chip_select_list: this is a list of pins to be used for chip select.\n                       The pins will be configured as output, and set to high\n                       ready to be used for chip select.\n                       NOTE: You must specify the chips select pins here!\n\n\n    command message: [command, number of cs pins, [cs pins...]]\n    \"\"\"\n    if self.reported_features &amp; PrivateConstants.SPI_FEATURE:\n\n        if type(chip_select_list) is not list:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('chip_select_list must be in the form of a list')\n        if not chip_select_list:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('Chip select pins were not specified')\n\n        self.spi_enabled = True\n\n        command = [PrivateConstants.SPI_INIT, len(chip_select_list)]\n\n        for pin in chip_select_list:\n            command.append(pin)\n            self.cs_pins_enabled.append(pin)\n        await self._send_command(command)\n    else:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'The SPI feature is disabled in the server.')\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.shutdown","title":"<code>shutdown()</code>  <code>async</code>","text":"<p>This method attempts an orderly shutdown If any exceptions are thrown, they are ignored.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def shutdown(self):\n\"\"\"\n    This method attempts an orderly shutdown\n    If any exceptions are thrown, they are ignored.\n\n    \"\"\"\n    self.shutdown_flag = True\n\n    if self.hard_reset_on_shutdown:\n        await self.r4_hard_reset()\n    # stop all reporting - both analog and digital\n    try:\n        if self.serial_port:\n            command = [PrivateConstants.STOP_ALL_REPORTS]\n            await self._send_command(command)\n\n            await asyncio.sleep(.5)\n\n            await self.serial_port.reset_input_buffer()\n            await self.serial_port.close()\n            if self.close_loop_on_shutdown:\n                self.loop.stop()\n        elif self.sock:\n            command = [PrivateConstants.STOP_ALL_REPORTS]\n            await self._send_command(command)\n            self.the_task.cancel()\n            await asyncio.sleep(.5)\n            if self.close_loop_on_shutdown:\n                self.loop.stop()\n    except (RuntimeError, SerialException):\n        pass\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.sonar_disable","title":"<code>sonar_disable()</code>  <code>async</code>","text":"<p>Disable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def sonar_disable(self):\n\"\"\"\n    Disable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_DISABLE]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.sonar_enable","title":"<code>sonar_enable()</code>  <code>async</code>","text":"<p>Enable sonar scanning for all sonar sensors</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def sonar_enable(self):\n\"\"\"\n    Enable sonar scanning for all sonar sensors\n    \"\"\"\n    command = [PrivateConstants.SONAR_ENABLE]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.spi_cs_control","title":"<code>spi_cs_control(chip_select_pin, select)</code>  <code>async</code>","text":"<p>Control an SPI chip select line :param chip_select_pin: pin connected to CS</p> <p>:param select: 0=select, 1=deselect</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def spi_cs_control(self, chip_select_pin, select):\n\"\"\"\n    Control an SPI chip select line\n    :param chip_select_pin: pin connected to CS\n\n    :param select: 0=select, 1=deselect\n    \"\"\"\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_cs_control: SPI interface is not enabled.')\n\n    if chip_select_pin not in self.cs_pins_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_cs_control: chip select pin never enabled.')\n    command = [PrivateConstants.SPI_CS_CONTROL, chip_select_pin, select]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.spi_read_blocking","title":"<code>spi_read_blocking(chip_select, register_selection, number_of_bytes_to_read, call_back=None)</code>  <code>async</code>","text":"<p>Read the specified number of bytes from the specified SPI port and call the callback function with the reported data.</p> <p>:param chip_select: chip select pin</p> <p>:param register_selection: Register to be selected for read.</p> <p>:param number_of_bytes_to_read: Number of bytes to read</p> <p>:param call_back: Required callback function to report spi data as a            result of read command</p> callback returns a data list <p>[SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,  data bytes, time-stamp]</p> <p>SPI_READ_REPORT = 13</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def spi_read_blocking(self, chip_select, register_selection,\n                            number_of_bytes_to_read,\n                            call_back=None):\n\"\"\"\n    Read the specified number of bytes from the specified SPI port and\n    call the callback function with the reported data.\n\n    :param chip_select: chip select pin\n\n    :param register_selection: Register to be selected for read.\n\n    :param number_of_bytes_to_read: Number of bytes to read\n\n    :param call_back: Required callback function to report spi data as a\n               result of read command\n\n\n    callback returns a data list:\n        [SPI_READ_REPORT, chip select pin, SPI Register, count of data bytes read,\n         data bytes, time-stamp]\n    SPI_READ_REPORT = 13\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_read_blocking: SPI interface is not enabled.')\n\n    if not call_back:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('spi_read_blocking: A Callback must be specified')\n\n    self.spi_callback = call_back\n\n    command = [PrivateConstants.SPI_READ_BLOCKING, chip_select,\n               number_of_bytes_to_read,\n               register_selection]\n\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.spi_set_format","title":"<code>spi_set_format(clock_divisor, bit_order, data_mode)</code>  <code>async</code>","text":"<p>Configure how the SPI serializes and de-serializes data on the wire.</p> <p>See Arduino SPI reference materials for details.</p> <p>:param clock_divisor: 1 - 255</p> <p>:param bit_order:</p> <pre><code>                LSBFIRST = 0\n\n                MSBFIRST = 1 (default)\n</code></pre> <p>:param data_mode:</p> <pre><code>                SPI_MODE0 = 0x00 (default)\n\n                SPI_MODE1  = 1\n\n                SPI_MODE2 = 2\n\n                SPI_MODE3 = 3\n</code></pre> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def spi_set_format(self, clock_divisor, bit_order, data_mode):\n\"\"\"\n    Configure how the SPI serializes and de-serializes data on the wire.\n\n    See Arduino SPI reference materials for details.\n\n    :param clock_divisor: 1 - 255\n\n    :param bit_order:\n\n                        LSBFIRST = 0\n\n                        MSBFIRST = 1 (default)\n\n    :param data_mode:\n\n                        SPI_MODE0 = 0x00 (default)\n\n                        SPI_MODE1  = 1\n\n                        SPI_MODE2 = 2\n\n                        SPI_MODE3 = 3\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_set_format: SPI interface is not enabled.')\n\n    if not 0 &lt; clock_divisor &lt;= 255:\n        raise RuntimeError(f'spi_set_format: illegal clock divisor selected.')\n    if bit_order not in [0, 1]:\n        raise RuntimeError(f'spi_set_format: illegal bit_order selected.')\n    if data_mode not in [0, 1, 2, 3]:\n        raise RuntimeError(f'spi_set_format: illegal data_order selected.')\n\n    command = [PrivateConstants.SPI_SET_FORMAT, clock_divisor, bit_order,\n               data_mode]\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.spi_write_blocking","title":"<code>spi_write_blocking(chip_select, bytes_to_write)</code>  <code>async</code>","text":"<p>Write a list of bytes to the SPI device.</p> <p>:param chip_select: chip select pin</p> <p>:param bytes_to_write: A list of bytes to write. This must                         be in the form of a list.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def spi_write_blocking(self, chip_select, bytes_to_write):\n\"\"\"\n    Write a list of bytes to the SPI device.\n\n    :param chip_select: chip select pin\n\n    :param bytes_to_write: A list of bytes to write. This must\n                            be in the form of a list.\n\n    \"\"\"\n\n    if not self.spi_enabled:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError(f'spi_write_blocking: SPI interface is not enabled.')\n\n    if type(bytes_to_write) is not list:\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError('spi_write_blocking: bytes_to_write must be a list.')\n\n    command = [PrivateConstants.SPI_WRITE_BLOCKING, chip_select, len(bytes_to_write)]\n\n    for data in bytes_to_write:\n        command.append(data)\n\n    await self._send_command(command)\n</code></pre>"},{"location":"telemetrix_wifi_reference_aio/#telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio.start_aio","title":"<code>start_aio()</code>  <code>async</code>","text":"<p>This method may be called directly, if the autostart parameter in init is set to false.</p> <p>This method instantiates the serial interface and then performs auto pin discovery if using a serial interface, or creates and connects to a TCP/IP enabled device running StandardFirmataWiFi.</p> <p>Use this method if you wish to start TelemetrixAIO manually from an asyncio function.</p> Source code in <code>telemetrix_uno_r4/wifi/telemetrix_uno_r4_wifi_aio/telemetrix_uno_r4_wifi_aio.py</code> <pre><code>async def start_aio(self):\n\"\"\"\n    This method may be called directly, if the autostart\n    parameter in __init__ is set to false.\n\n    This method instantiates the serial interface and then performs auto pin\n    discovery if using a serial interface, or creates and connects to\n    a TCP/IP enabled device running StandardFirmataWiFi.\n\n    Use this method if you wish to start TelemetrixAIO manually from\n    an asyncio function.\n     \"\"\"\n\n    if self.transport_type == PrivateConstants.SERIAL_TRANSPORT:\n        if not self.com_port:\n            # user did not specify a com_port\n            try:\n                await self._find_arduino()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n        else:\n            # com_port specified - set com_port and baud rate\n            try:\n                await self._manual_open()\n            except KeyboardInterrupt:\n                if self.shutdown_on_exception:\n                    await self.shutdown()\n\n        if self.com_port:\n            print(f'Telemetrix4UnoR4WIFI found and connected to {self.com_port}')\n\n            # no com_port found - raise a runtime exception\n        else:\n            if self.shutdown_on_exception:\n                await self.shutdown()\n            raise RuntimeError('No Arduino Found or User Aborted Program')\n        await self.disable_scroll_message()\n        # using tcp/ip\n    elif self.transport_type == PrivateConstants.WIFI_TRANSPORT:\n        self.sock = TelemetrixAioSocket(self.transport_address, self.ip_port,\n                                        self.loop)\n        try:\n            await self.sock.start()\n        except OSError:\n            raise RuntimeError('Could not connect to this address')\n    else:  # ble\n        self.ble_instance = TelemetrixAioBle(self.ble_device_name,\n                                             self._ble_report_dispatcher)\n        await self.ble_instance.connect()\n\n    # get arduino firmware version and print it\n    firmware_version = await self._get_firmware_version()\n    if not firmware_version:\n        print('*** Firmware Version retrieval timed out. ***')\n        print('\\nDo you have Arduino connectivity and do you have the ')\n        print('Telemetrix4UnoR4 sketch uploaded to the board and are connected')\n        print('to the correct serial port.\\n')\n        print('To see a list of serial ports, type: '\n              '\"list_serial_ports\" in your console.')\n        if self.shutdown_on_exception:\n            await self.shutdown()\n        raise RuntimeError\n    else:\n\n        print(f'Telemetrix4UnoR4 Version Number: {firmware_version[2]}.'\n              f'{firmware_version[3]}.{firmware_version[4]}')\n        # start the command dispatcher loop\n        command = [PrivateConstants.ENABLE_ALL_REPORTS]\n        await self._send_command(command)\n        if not self.loop:\n            self.loop = asyncio.get_event_loop()\n        self.the_task = self.loop.create_task(self._arduino_report_dispatcher())\n\n        # get the features list\n        command = [PrivateConstants.GET_FEATURES]\n        await self._send_command(command)\n        await asyncio.sleep(.5)\n\n        # Have the server reset its data structures\n        command = [PrivateConstants.RESET]\n        await self._send_command(command)\n        await asyncio.sleep(.1)\n</code></pre>"},{"location":"template_ble/","title":"BLE AIO","text":"<p>Here, we need to instantiate the class passing in two parameters. We need to pass in auto_start=False. This is because we are using the Bleak BLE  library, and this allows for a clean shutdown. We also need to pass in transport_type=2, which enables the BLE transport.</p> <p>Lastly, we need to manually start the asyncio portion of the API by calling board.start_aio() in our main function.</p> <pre><code>\nimport sys\nimport asyncio\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.wifi.telemetrix_uno_r4_wifi_aio import telemetrix_uno_r4_wifi_aio\n\n# An async method for running your application.\n# We pass in the instance of the API created below .\nasync def my_app(my_board):\n    # THIS NEXT LINE MUST BE ADDED HERE\n    await my_board.start_aio()\n\n    # Your Application code\n\n# get the event loop\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\n\n# instantiate telemetrix_aio\n\nboard = telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio(autostart=False,\n                                                          transport_type=2)\n\ntry:\n    # start the main function\n    loop.run_until_complete(my_app(board))\nexcept KeyboardInterrupt:\n    try:\n        loop.run_until_complete(board.shutdown())\n    except:\n        pass\n    sys.exit(0)\n\n</code></pre> <p></p>"},{"location":"template_minima_aio/","title":"Minima AIO","text":"<pre><code>\nimport sys\nimport asyncio\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.minima.telemetrix_uno_r4_minima_aio import telemetrix_uno_r4_minima_aio\n\n# An async method for running your application.\n# We pass in the instance of the API created below .\nasync def my_app(the_board):\n    # Your Application code\n\n# get the event loop\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\n\n# instantiate telemetrix_aio\nboard = telemetrix_uno_r4_minima_aio.TelemetrixUnoR4MinimaAio()\n\ntry:\n    # start the main function\n    loop.run_until_complete(my_app(board))\nexcept KeyboardInterrupt:\n    try:\n        loop.run_until_complete(board.shutdown())\n    except:\n        pass\n    sys.exit(0)\n\n</code></pre>"},{"location":"template_minima_threaded/","title":"Minima Threaded","text":"<pre><code>import sys\nimport time\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.minima.telemetrix_uno_r4_minima import telemetrix_uno_r4_minima\n\"\"\"\n\n# INSTANTIATE THE API CLASS\nboard = telemetrix_uno_r4_minima.TelemetrixUnoR4Minima()\n\ntry:\n    # WRITE YOUR APPLICATION HERE\nexcept:\n    board.shutdown()\n\n\n\n\n</code></pre>"},{"location":"template_usb_serial_aio/","title":"USBSerial AIO","text":"<p>Here, we need to instantiate the class passing in a transport_type of 1.  This parameter value enables the serial transport.</p> <pre><code>\nimport sys\nimport asyncio\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.wifi.telemetrix_uno_r4_wifi_aio import telemetrix_uno_r4_wifi_aio\n\n# An async method for running your application.\n# We pass in the instance of the API created below .\nasync def my_app(the_board):\n    # Your Application code\n\n# get the event loop\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\n\n# instantiate telemetrix_aio\nboard = telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio(transport_type=1)\n\ntry:\n    # start the main function\n    loop.run_until_complete(my_app(board))\nexcept KeyboardInterrupt:\n    try:\n        loop.run_until_complete(board.shutdown())\n    except:\n        pass\n    sys.exit(0)\n\n</code></pre> <p></p>"},{"location":"template_usb_serial_threaded/","title":"USBSerial Threaded","text":"<p>Here, we need to instantiate the class passing in a transport_type of 1. This enables  the serial transport.</p> <pre><code>import sys\nimport time\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.wifi.telemetrix_uno_r4_wifi import telemetrix_uno_r4_wifi\n\n# INSTANTIATE THE API CLASS\nboard = telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi(transport_type=1)\ntry:\n    # WRITE YOUR APPLICATION HERE\nexcept:\n    board.shutdown()\n\n\n\n\n</code></pre> <p></p>"},{"location":"template_wifi_aio/","title":"WIFI AIO","text":"<p>Here, we need to instantiate the class passing in the IP address assigned by your  router. This parameter enables the WIFI transport.</p> <pre><code>\nimport sys\nimport asyncio\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.wifi.telemetrix_uno_r4_wifi_aio import telemetrix_uno_r4_wifi_aio\n\n# An async method for running your application.\n# We pass in the instance of the API created below .\nasync def my_app(the_board):\n    # Your Application code\n\n# get the event loop\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\n\n# instantiate telemetrix_aio\n# Make sure to edit the transport address assigned by your router.\nboard = telemetrix_uno_r4_wifi_aio.TelemetrixUnoR4WiFiAio(\n    transport_address='192.168.2.118')\n\ntry:\n    # start the main function\n    loop.run_until_complete(my_app(board))\nexcept KeyboardInterrupt:\n    try:\n        loop.run_until_complete(board.shutdown())\n    except:\n        pass\n    sys.exit(0)\n\n</code></pre> <p></p>"},{"location":"template_wifi_threaded/","title":"WIFI Threaded","text":"<p>Here, we need to instantiate the class passing in the IP address assigned by your  router. This parameter enables the WIFI transport.</p> <pre><code>import sys\nimport time\n\n# IMPORT THE API\nfrom telemetrix_uno_r4.wifi.telemetrix_uno_r4_wifi import telemetrix_uno_r4_wifi\n\n# INSTANTIATE THE API CLASS\n# Make sure to edit the transport address assigned by your router.\n\nboard = telemetrix_uno_r4_wifi.TelemetrixUnoR4WiFi(transport_address='192.168.2.118')\ntry:\n    # WRITE YOUR APPLICATION HERE\nexcept:\n    board.shutdown()\n\n\n\n\n</code></pre> <p></p>"},{"location":"venv/","title":"Create A Python Virtual Environment","text":"<p>When using Telemetrix, it is highly recommended that you work within a Python virtual  environment.</p> <p>A virtual environment isolates your project from other projects.  Packages installed into a virtual environment are confined to your  current project and will not affect or change packages used by other projects.  Please refer to  this article or the Python documentation.</p> <p>If you are using the latest version of Ubuntu and Debian Linux, you are required to use a virtual environment.</p>"}]}